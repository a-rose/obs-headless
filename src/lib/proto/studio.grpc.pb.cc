// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: studio.proto

#include "studio.pb.h"
#include "studio.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace proto {

static const char* Studio_method_names[] = {
  "/proto.Studio/StudioGet",
  "/proto.Studio/StudioStart",
  "/proto.Studio/StudioStop",
  "/proto.Studio/ShowGet",
  "/proto.Studio/ShowCreate",
  "/proto.Studio/ShowDuplicate",
  "/proto.Studio/ShowRemove",
  "/proto.Studio/ShowLoad",
  "/proto.Studio/SceneGet",
  "/proto.Studio/SceneAdd",
  "/proto.Studio/SceneDuplicate",
  "/proto.Studio/SceneRemove",
  "/proto.Studio/SceneSetAsCurrent",
  "/proto.Studio/SceneGetCurrent",
  "/proto.Studio/SourceGet",
  "/proto.Studio/SourceAdd",
  "/proto.Studio/SourceDuplicate",
  "/proto.Studio/SourceRemove",
  "/proto.Studio/SourceSetProperties",
  "/proto.Studio/Health",
};

std::unique_ptr< Studio::Stub> Studio::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Studio::Stub> stub(new Studio::Stub(channel));
  return stub;
}

Studio::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StudioGet_(Studio_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StudioStart_(Studio_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StudioStop_(Studio_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowGet_(Studio_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowCreate_(Studio_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowDuplicate_(Studio_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowRemove_(Studio_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowLoad_(Studio_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SceneGet_(Studio_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SceneAdd_(Studio_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SceneDuplicate_(Studio_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SceneRemove_(Studio_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SceneSetAsCurrent_(Studio_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SceneGetCurrent_(Studio_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SourceGet_(Studio_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SourceAdd_(Studio_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SourceDuplicate_(Studio_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SourceRemove_(Studio_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SourceSetProperties_(Studio_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Health_(Studio_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Studio::Stub::StudioGet(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::proto::StudioGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StudioGet_, context, request, response);
}

void Studio::Stub::experimental_async::StudioGet(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::proto::StudioGetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StudioGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::StudioGetResponse>* Studio::Stub::AsyncStudioGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::StudioGetResponse>::Create(channel_.get(), cq, rpcmethod_StudioGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::StudioGetResponse>* Studio::Stub::PrepareAsyncStudioGetRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::StudioGetResponse>::Create(channel_.get(), cq, rpcmethod_StudioGet_, context, request, false);
}

::grpc::Status Studio::Stub::StudioStart(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StudioStart_, context, request, response);
}

void Studio::Stub::experimental_async::StudioStart(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StudioStart_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::AsyncStudioStartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StudioStart_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::PrepareAsyncStudioStartRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StudioStart_, context, request, false);
}

::grpc::Status Studio::Stub::StudioStop(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StudioStop_, context, request, response);
}

void Studio::Stub::experimental_async::StudioStop(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StudioStop_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::AsyncStudioStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StudioStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::PrepareAsyncStudioStopRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_StudioStop_, context, request, false);
}

::grpc::Status Studio::Stub::ShowGet(::grpc::ClientContext* context, const ::proto::ShowGetRequest& request, ::proto::ShowGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowGet_, context, request, response);
}

void Studio::Stub::experimental_async::ShowGet(::grpc::ClientContext* context, const ::proto::ShowGetRequest* request, ::proto::ShowGetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::ShowGetResponse>* Studio::Stub::AsyncShowGetRaw(::grpc::ClientContext* context, const ::proto::ShowGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowGetResponse>::Create(channel_.get(), cq, rpcmethod_ShowGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::ShowGetResponse>* Studio::Stub::PrepareAsyncShowGetRaw(::grpc::ClientContext* context, const ::proto::ShowGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowGetResponse>::Create(channel_.get(), cq, rpcmethod_ShowGet_, context, request, false);
}

::grpc::Status Studio::Stub::ShowCreate(::grpc::ClientContext* context, const ::proto::ShowCreateRequest& request, ::proto::ShowCreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowCreate_, context, request, response);
}

void Studio::Stub::experimental_async::ShowCreate(::grpc::ClientContext* context, const ::proto::ShowCreateRequest* request, ::proto::ShowCreateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowCreate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::ShowCreateResponse>* Studio::Stub::AsyncShowCreateRaw(::grpc::ClientContext* context, const ::proto::ShowCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowCreateResponse>::Create(channel_.get(), cq, rpcmethod_ShowCreate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::ShowCreateResponse>* Studio::Stub::PrepareAsyncShowCreateRaw(::grpc::ClientContext* context, const ::proto::ShowCreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowCreateResponse>::Create(channel_.get(), cq, rpcmethod_ShowCreate_, context, request, false);
}

::grpc::Status Studio::Stub::ShowDuplicate(::grpc::ClientContext* context, const ::proto::ShowDuplicateRequest& request, ::proto::ShowDuplicateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowDuplicate_, context, request, response);
}

void Studio::Stub::experimental_async::ShowDuplicate(::grpc::ClientContext* context, const ::proto::ShowDuplicateRequest* request, ::proto::ShowDuplicateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowDuplicate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::ShowDuplicateResponse>* Studio::Stub::AsyncShowDuplicateRaw(::grpc::ClientContext* context, const ::proto::ShowDuplicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowDuplicateResponse>::Create(channel_.get(), cq, rpcmethod_ShowDuplicate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::ShowDuplicateResponse>* Studio::Stub::PrepareAsyncShowDuplicateRaw(::grpc::ClientContext* context, const ::proto::ShowDuplicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowDuplicateResponse>::Create(channel_.get(), cq, rpcmethod_ShowDuplicate_, context, request, false);
}

::grpc::Status Studio::Stub::ShowRemove(::grpc::ClientContext* context, const ::proto::ShowRemoveRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowRemove_, context, request, response);
}

void Studio::Stub::experimental_async::ShowRemove(::grpc::ClientContext* context, const ::proto::ShowRemoveRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::AsyncShowRemoveRaw(::grpc::ClientContext* context, const ::proto::ShowRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ShowRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::PrepareAsyncShowRemoveRaw(::grpc::ClientContext* context, const ::proto::ShowRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_ShowRemove_, context, request, false);
}

::grpc::Status Studio::Stub::ShowLoad(::grpc::ClientContext* context, const ::proto::ShowLoadRequest& request, ::proto::ShowLoadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ShowLoad_, context, request, response);
}

void Studio::Stub::experimental_async::ShowLoad(::grpc::ClientContext* context, const ::proto::ShowLoadRequest* request, ::proto::ShowLoadResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ShowLoad_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::ShowLoadResponse>* Studio::Stub::AsyncShowLoadRaw(::grpc::ClientContext* context, const ::proto::ShowLoadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowLoadResponse>::Create(channel_.get(), cq, rpcmethod_ShowLoad_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::ShowLoadResponse>* Studio::Stub::PrepareAsyncShowLoadRaw(::grpc::ClientContext* context, const ::proto::ShowLoadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::ShowLoadResponse>::Create(channel_.get(), cq, rpcmethod_ShowLoad_, context, request, false);
}

::grpc::Status Studio::Stub::SceneGet(::grpc::ClientContext* context, const ::proto::SceneGetRequest& request, ::proto::SceneGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SceneGet_, context, request, response);
}

void Studio::Stub::experimental_async::SceneGet(::grpc::ClientContext* context, const ::proto::SceneGetRequest* request, ::proto::SceneGetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SceneGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SceneGetResponse>* Studio::Stub::AsyncSceneGetRaw(::grpc::ClientContext* context, const ::proto::SceneGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneGetResponse>::Create(channel_.get(), cq, rpcmethod_SceneGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SceneGetResponse>* Studio::Stub::PrepareAsyncSceneGetRaw(::grpc::ClientContext* context, const ::proto::SceneGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneGetResponse>::Create(channel_.get(), cq, rpcmethod_SceneGet_, context, request, false);
}

::grpc::Status Studio::Stub::SceneAdd(::grpc::ClientContext* context, const ::proto::SceneAddRequest& request, ::proto::SceneAddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SceneAdd_, context, request, response);
}

void Studio::Stub::experimental_async::SceneAdd(::grpc::ClientContext* context, const ::proto::SceneAddRequest* request, ::proto::SceneAddResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SceneAdd_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SceneAddResponse>* Studio::Stub::AsyncSceneAddRaw(::grpc::ClientContext* context, const ::proto::SceneAddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneAddResponse>::Create(channel_.get(), cq, rpcmethod_SceneAdd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SceneAddResponse>* Studio::Stub::PrepareAsyncSceneAddRaw(::grpc::ClientContext* context, const ::proto::SceneAddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneAddResponse>::Create(channel_.get(), cq, rpcmethod_SceneAdd_, context, request, false);
}

::grpc::Status Studio::Stub::SceneDuplicate(::grpc::ClientContext* context, const ::proto::SceneDuplicateRequest& request, ::proto::SceneDuplicateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SceneDuplicate_, context, request, response);
}

void Studio::Stub::experimental_async::SceneDuplicate(::grpc::ClientContext* context, const ::proto::SceneDuplicateRequest* request, ::proto::SceneDuplicateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SceneDuplicate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SceneDuplicateResponse>* Studio::Stub::AsyncSceneDuplicateRaw(::grpc::ClientContext* context, const ::proto::SceneDuplicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneDuplicateResponse>::Create(channel_.get(), cq, rpcmethod_SceneDuplicate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SceneDuplicateResponse>* Studio::Stub::PrepareAsyncSceneDuplicateRaw(::grpc::ClientContext* context, const ::proto::SceneDuplicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneDuplicateResponse>::Create(channel_.get(), cq, rpcmethod_SceneDuplicate_, context, request, false);
}

::grpc::Status Studio::Stub::SceneRemove(::grpc::ClientContext* context, const ::proto::SceneRemoveRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SceneRemove_, context, request, response);
}

void Studio::Stub::experimental_async::SceneRemove(::grpc::ClientContext* context, const ::proto::SceneRemoveRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SceneRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::AsyncSceneRemoveRaw(::grpc::ClientContext* context, const ::proto::SceneRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SceneRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::PrepareAsyncSceneRemoveRaw(::grpc::ClientContext* context, const ::proto::SceneRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SceneRemove_, context, request, false);
}

::grpc::Status Studio::Stub::SceneSetAsCurrent(::grpc::ClientContext* context, const ::proto::SceneSetAsCurrentRequest& request, ::proto::SceneSetAsCurrentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SceneSetAsCurrent_, context, request, response);
}

void Studio::Stub::experimental_async::SceneSetAsCurrent(::grpc::ClientContext* context, const ::proto::SceneSetAsCurrentRequest* request, ::proto::SceneSetAsCurrentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SceneSetAsCurrent_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SceneSetAsCurrentResponse>* Studio::Stub::AsyncSceneSetAsCurrentRaw(::grpc::ClientContext* context, const ::proto::SceneSetAsCurrentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneSetAsCurrentResponse>::Create(channel_.get(), cq, rpcmethod_SceneSetAsCurrent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SceneSetAsCurrentResponse>* Studio::Stub::PrepareAsyncSceneSetAsCurrentRaw(::grpc::ClientContext* context, const ::proto::SceneSetAsCurrentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneSetAsCurrentResponse>::Create(channel_.get(), cq, rpcmethod_SceneSetAsCurrent_, context, request, false);
}

::grpc::Status Studio::Stub::SceneGetCurrent(::grpc::ClientContext* context, const ::proto::SceneGetCurrentRequest& request, ::proto::SceneGetCurrentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SceneGetCurrent_, context, request, response);
}

void Studio::Stub::experimental_async::SceneGetCurrent(::grpc::ClientContext* context, const ::proto::SceneGetCurrentRequest* request, ::proto::SceneGetCurrentResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SceneGetCurrent_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SceneGetCurrentResponse>* Studio::Stub::AsyncSceneGetCurrentRaw(::grpc::ClientContext* context, const ::proto::SceneGetCurrentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneGetCurrentResponse>::Create(channel_.get(), cq, rpcmethod_SceneGetCurrent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SceneGetCurrentResponse>* Studio::Stub::PrepareAsyncSceneGetCurrentRaw(::grpc::ClientContext* context, const ::proto::SceneGetCurrentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SceneGetCurrentResponse>::Create(channel_.get(), cq, rpcmethod_SceneGetCurrent_, context, request, false);
}

::grpc::Status Studio::Stub::SourceGet(::grpc::ClientContext* context, const ::proto::SourceGetRequest& request, ::proto::SourceGetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SourceGet_, context, request, response);
}

void Studio::Stub::experimental_async::SourceGet(::grpc::ClientContext* context, const ::proto::SourceGetRequest* request, ::proto::SourceGetResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SourceGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SourceGetResponse>* Studio::Stub::AsyncSourceGetRaw(::grpc::ClientContext* context, const ::proto::SourceGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceGetResponse>::Create(channel_.get(), cq, rpcmethod_SourceGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SourceGetResponse>* Studio::Stub::PrepareAsyncSourceGetRaw(::grpc::ClientContext* context, const ::proto::SourceGetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceGetResponse>::Create(channel_.get(), cq, rpcmethod_SourceGet_, context, request, false);
}

::grpc::Status Studio::Stub::SourceAdd(::grpc::ClientContext* context, const ::proto::SourceAddRequest& request, ::proto::SourceAddResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SourceAdd_, context, request, response);
}

void Studio::Stub::experimental_async::SourceAdd(::grpc::ClientContext* context, const ::proto::SourceAddRequest* request, ::proto::SourceAddResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SourceAdd_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SourceAddResponse>* Studio::Stub::AsyncSourceAddRaw(::grpc::ClientContext* context, const ::proto::SourceAddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceAddResponse>::Create(channel_.get(), cq, rpcmethod_SourceAdd_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SourceAddResponse>* Studio::Stub::PrepareAsyncSourceAddRaw(::grpc::ClientContext* context, const ::proto::SourceAddRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceAddResponse>::Create(channel_.get(), cq, rpcmethod_SourceAdd_, context, request, false);
}

::grpc::Status Studio::Stub::SourceDuplicate(::grpc::ClientContext* context, const ::proto::SourceDuplicateRequest& request, ::proto::SourceDuplicateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SourceDuplicate_, context, request, response);
}

void Studio::Stub::experimental_async::SourceDuplicate(::grpc::ClientContext* context, const ::proto::SourceDuplicateRequest* request, ::proto::SourceDuplicateResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SourceDuplicate_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SourceDuplicateResponse>* Studio::Stub::AsyncSourceDuplicateRaw(::grpc::ClientContext* context, const ::proto::SourceDuplicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceDuplicateResponse>::Create(channel_.get(), cq, rpcmethod_SourceDuplicate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SourceDuplicateResponse>* Studio::Stub::PrepareAsyncSourceDuplicateRaw(::grpc::ClientContext* context, const ::proto::SourceDuplicateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceDuplicateResponse>::Create(channel_.get(), cq, rpcmethod_SourceDuplicate_, context, request, false);
}

::grpc::Status Studio::Stub::SourceRemove(::grpc::ClientContext* context, const ::proto::SourceRemoveRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SourceRemove_, context, request, response);
}

void Studio::Stub::experimental_async::SourceRemove(::grpc::ClientContext* context, const ::proto::SourceRemoveRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SourceRemove_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::AsyncSourceRemoveRaw(::grpc::ClientContext* context, const ::proto::SourceRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SourceRemove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* Studio::Stub::PrepareAsyncSourceRemoveRaw(::grpc::ClientContext* context, const ::proto::SourceRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_SourceRemove_, context, request, false);
}

::grpc::Status Studio::Stub::SourceSetProperties(::grpc::ClientContext* context, const ::proto::SourceSetPropertiesRequest& request, ::proto::SourceSetPropertiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SourceSetProperties_, context, request, response);
}

void Studio::Stub::experimental_async::SourceSetProperties(::grpc::ClientContext* context, const ::proto::SourceSetPropertiesRequest* request, ::proto::SourceSetPropertiesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SourceSetProperties_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::SourceSetPropertiesResponse>* Studio::Stub::AsyncSourceSetPropertiesRaw(::grpc::ClientContext* context, const ::proto::SourceSetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceSetPropertiesResponse>::Create(channel_.get(), cq, rpcmethod_SourceSetProperties_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::SourceSetPropertiesResponse>* Studio::Stub::PrepareAsyncSourceSetPropertiesRaw(::grpc::ClientContext* context, const ::proto::SourceSetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::SourceSetPropertiesResponse>::Create(channel_.get(), cq, rpcmethod_SourceSetProperties_, context, request, false);
}

::grpc::Status Studio::Stub::Health(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::proto::HealthResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Health_, context, request, response);
}

void Studio::Stub::experimental_async::Health(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::proto::HealthResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Health_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::proto::HealthResponse>* Studio::Stub::AsyncHealthRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::HealthResponse>::Create(channel_.get(), cq, rpcmethod_Health_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::proto::HealthResponse>* Studio::Stub::PrepareAsyncHealthRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::proto::HealthResponse>::Create(channel_.get(), cq, rpcmethod_Health_, context, request, false);
}

Studio::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::google::protobuf::Empty, ::proto::StudioGetResponse>(
          std::mem_fn(&Studio::Service::StudioGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Studio::Service::StudioStart), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::google::protobuf::Empty, ::google::protobuf::Empty>(
          std::mem_fn(&Studio::Service::StudioStop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::ShowGetRequest, ::proto::ShowGetResponse>(
          std::mem_fn(&Studio::Service::ShowGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::ShowCreateRequest, ::proto::ShowCreateResponse>(
          std::mem_fn(&Studio::Service::ShowCreate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::ShowDuplicateRequest, ::proto::ShowDuplicateResponse>(
          std::mem_fn(&Studio::Service::ShowDuplicate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::ShowRemoveRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Studio::Service::ShowRemove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::ShowLoadRequest, ::proto::ShowLoadResponse>(
          std::mem_fn(&Studio::Service::ShowLoad), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SceneGetRequest, ::proto::SceneGetResponse>(
          std::mem_fn(&Studio::Service::SceneGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SceneAddRequest, ::proto::SceneAddResponse>(
          std::mem_fn(&Studio::Service::SceneAdd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SceneDuplicateRequest, ::proto::SceneDuplicateResponse>(
          std::mem_fn(&Studio::Service::SceneDuplicate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SceneRemoveRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Studio::Service::SceneRemove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SceneSetAsCurrentRequest, ::proto::SceneSetAsCurrentResponse>(
          std::mem_fn(&Studio::Service::SceneSetAsCurrent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SceneGetCurrentRequest, ::proto::SceneGetCurrentResponse>(
          std::mem_fn(&Studio::Service::SceneGetCurrent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SourceGetRequest, ::proto::SourceGetResponse>(
          std::mem_fn(&Studio::Service::SourceGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SourceAddRequest, ::proto::SourceAddResponse>(
          std::mem_fn(&Studio::Service::SourceAdd), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SourceDuplicateRequest, ::proto::SourceDuplicateResponse>(
          std::mem_fn(&Studio::Service::SourceDuplicate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SourceRemoveRequest, ::google::protobuf::Empty>(
          std::mem_fn(&Studio::Service::SourceRemove), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::proto::SourceSetPropertiesRequest, ::proto::SourceSetPropertiesResponse>(
          std::mem_fn(&Studio::Service::SourceSetProperties), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Studio_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Studio::Service, ::google::protobuf::Empty, ::proto::HealthResponse>(
          std::mem_fn(&Studio::Service::Health), this)));
}

Studio::Service::~Service() {
}

::grpc::Status Studio::Service::StudioGet(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::proto::StudioGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::StudioStart(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::StudioStop(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::ShowGet(::grpc::ServerContext* context, const ::proto::ShowGetRequest* request, ::proto::ShowGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::ShowCreate(::grpc::ServerContext* context, const ::proto::ShowCreateRequest* request, ::proto::ShowCreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::ShowDuplicate(::grpc::ServerContext* context, const ::proto::ShowDuplicateRequest* request, ::proto::ShowDuplicateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::ShowRemove(::grpc::ServerContext* context, const ::proto::ShowRemoveRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::ShowLoad(::grpc::ServerContext* context, const ::proto::ShowLoadRequest* request, ::proto::ShowLoadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SceneGet(::grpc::ServerContext* context, const ::proto::SceneGetRequest* request, ::proto::SceneGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SceneAdd(::grpc::ServerContext* context, const ::proto::SceneAddRequest* request, ::proto::SceneAddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SceneDuplicate(::grpc::ServerContext* context, const ::proto::SceneDuplicateRequest* request, ::proto::SceneDuplicateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SceneRemove(::grpc::ServerContext* context, const ::proto::SceneRemoveRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SceneSetAsCurrent(::grpc::ServerContext* context, const ::proto::SceneSetAsCurrentRequest* request, ::proto::SceneSetAsCurrentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SceneGetCurrent(::grpc::ServerContext* context, const ::proto::SceneGetCurrentRequest* request, ::proto::SceneGetCurrentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SourceGet(::grpc::ServerContext* context, const ::proto::SourceGetRequest* request, ::proto::SourceGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SourceAdd(::grpc::ServerContext* context, const ::proto::SourceAddRequest* request, ::proto::SourceAddResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SourceDuplicate(::grpc::ServerContext* context, const ::proto::SourceDuplicateRequest* request, ::proto::SourceDuplicateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SourceRemove(::grpc::ServerContext* context, const ::proto::SourceRemoveRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::SourceSetProperties(::grpc::ServerContext* context, const ::proto::SourceSetPropertiesRequest* request, ::proto::SourceSetPropertiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Studio::Service::Health(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::proto::HealthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace proto

