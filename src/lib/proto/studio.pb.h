// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio.proto

#ifndef PROTOBUF_INCLUDED_studio_2eproto
#define PROTOBUF_INCLUDED_studio_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_studio_2eproto 

namespace protobuf_studio_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[36];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_studio_2eproto
namespace proto {
class HealthResponse;
class HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class SceneAddRequest;
class SceneAddRequestDefaultTypeInternal;
extern SceneAddRequestDefaultTypeInternal _SceneAddRequest_default_instance_;
class SceneAddResponse;
class SceneAddResponseDefaultTypeInternal;
extern SceneAddResponseDefaultTypeInternal _SceneAddResponse_default_instance_;
class SceneDuplicateRequest;
class SceneDuplicateRequestDefaultTypeInternal;
extern SceneDuplicateRequestDefaultTypeInternal _SceneDuplicateRequest_default_instance_;
class SceneDuplicateResponse;
class SceneDuplicateResponseDefaultTypeInternal;
extern SceneDuplicateResponseDefaultTypeInternal _SceneDuplicateResponse_default_instance_;
class SceneGetCurrentRequest;
class SceneGetCurrentRequestDefaultTypeInternal;
extern SceneGetCurrentRequestDefaultTypeInternal _SceneGetCurrentRequest_default_instance_;
class SceneGetCurrentResponse;
class SceneGetCurrentResponseDefaultTypeInternal;
extern SceneGetCurrentResponseDefaultTypeInternal _SceneGetCurrentResponse_default_instance_;
class SceneGetRequest;
class SceneGetRequestDefaultTypeInternal;
extern SceneGetRequestDefaultTypeInternal _SceneGetRequest_default_instance_;
class SceneGetResponse;
class SceneGetResponseDefaultTypeInternal;
extern SceneGetResponseDefaultTypeInternal _SceneGetResponse_default_instance_;
class SceneRemoveRequest;
class SceneRemoveRequestDefaultTypeInternal;
extern SceneRemoveRequestDefaultTypeInternal _SceneRemoveRequest_default_instance_;
class SceneSetAsCurrentRequest;
class SceneSetAsCurrentRequestDefaultTypeInternal;
extern SceneSetAsCurrentRequestDefaultTypeInternal _SceneSetAsCurrentRequest_default_instance_;
class SceneSetAsCurrentResponse;
class SceneSetAsCurrentResponseDefaultTypeInternal;
extern SceneSetAsCurrentResponseDefaultTypeInternal _SceneSetAsCurrentResponse_default_instance_;
class Show;
class ShowDefaultTypeInternal;
extern ShowDefaultTypeInternal _Show_default_instance_;
class ShowCreateRequest;
class ShowCreateRequestDefaultTypeInternal;
extern ShowCreateRequestDefaultTypeInternal _ShowCreateRequest_default_instance_;
class ShowCreateResponse;
class ShowCreateResponseDefaultTypeInternal;
extern ShowCreateResponseDefaultTypeInternal _ShowCreateResponse_default_instance_;
class ShowDuplicateRequest;
class ShowDuplicateRequestDefaultTypeInternal;
extern ShowDuplicateRequestDefaultTypeInternal _ShowDuplicateRequest_default_instance_;
class ShowDuplicateResponse;
class ShowDuplicateResponseDefaultTypeInternal;
extern ShowDuplicateResponseDefaultTypeInternal _ShowDuplicateResponse_default_instance_;
class ShowGetRequest;
class ShowGetRequestDefaultTypeInternal;
extern ShowGetRequestDefaultTypeInternal _ShowGetRequest_default_instance_;
class ShowGetResponse;
class ShowGetResponseDefaultTypeInternal;
extern ShowGetResponseDefaultTypeInternal _ShowGetResponse_default_instance_;
class ShowLoadRequest;
class ShowLoadRequestDefaultTypeInternal;
extern ShowLoadRequestDefaultTypeInternal _ShowLoadRequest_default_instance_;
class ShowLoadResponse;
class ShowLoadResponseDefaultTypeInternal;
extern ShowLoadResponseDefaultTypeInternal _ShowLoadResponse_default_instance_;
class ShowRemoveRequest;
class ShowRemoveRequestDefaultTypeInternal;
extern ShowRemoveRequestDefaultTypeInternal _ShowRemoveRequest_default_instance_;
class ShowSwitchSourceResponse;
class ShowSwitchSourceResponseDefaultTypeInternal;
extern ShowSwitchSourceResponseDefaultTypeInternal _ShowSwitchSourceResponse_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class SourceAddRequest;
class SourceAddRequestDefaultTypeInternal;
extern SourceAddRequestDefaultTypeInternal _SourceAddRequest_default_instance_;
class SourceAddResponse;
class SourceAddResponseDefaultTypeInternal;
extern SourceAddResponseDefaultTypeInternal _SourceAddResponse_default_instance_;
class SourceDuplicateRequest;
class SourceDuplicateRequestDefaultTypeInternal;
extern SourceDuplicateRequestDefaultTypeInternal _SourceDuplicateRequest_default_instance_;
class SourceDuplicateResponse;
class SourceDuplicateResponseDefaultTypeInternal;
extern SourceDuplicateResponseDefaultTypeInternal _SourceDuplicateResponse_default_instance_;
class SourceGetRequest;
class SourceGetRequestDefaultTypeInternal;
extern SourceGetRequestDefaultTypeInternal _SourceGetRequest_default_instance_;
class SourceGetResponse;
class SourceGetResponseDefaultTypeInternal;
extern SourceGetResponseDefaultTypeInternal _SourceGetResponse_default_instance_;
class SourceRemoveRequest;
class SourceRemoveRequestDefaultTypeInternal;
extern SourceRemoveRequestDefaultTypeInternal _SourceRemoveRequest_default_instance_;
class SourceSetPropertiesRequest;
class SourceSetPropertiesRequestDefaultTypeInternal;
extern SourceSetPropertiesRequestDefaultTypeInternal _SourceSetPropertiesRequest_default_instance_;
class SourceSetPropertiesResponse;
class SourceSetPropertiesResponseDefaultTypeInternal;
extern SourceSetPropertiesResponseDefaultTypeInternal _SourceSetPropertiesResponse_default_instance_;
class StudioGetResponse;
class StudioGetResponseDefaultTypeInternal;
extern StudioGetResponseDefaultTypeInternal _StudioGetResponse_default_instance_;
class StudioState;
class StudioStateDefaultTypeInternal;
extern StudioStateDefaultTypeInternal _StudioState_default_instance_;
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::HealthResponse* Arena::CreateMaybeMessage<::proto::HealthResponse>(Arena*);
template<> ::proto::Scene* Arena::CreateMaybeMessage<::proto::Scene>(Arena*);
template<> ::proto::SceneAddRequest* Arena::CreateMaybeMessage<::proto::SceneAddRequest>(Arena*);
template<> ::proto::SceneAddResponse* Arena::CreateMaybeMessage<::proto::SceneAddResponse>(Arena*);
template<> ::proto::SceneDuplicateRequest* Arena::CreateMaybeMessage<::proto::SceneDuplicateRequest>(Arena*);
template<> ::proto::SceneDuplicateResponse* Arena::CreateMaybeMessage<::proto::SceneDuplicateResponse>(Arena*);
template<> ::proto::SceneGetCurrentRequest* Arena::CreateMaybeMessage<::proto::SceneGetCurrentRequest>(Arena*);
template<> ::proto::SceneGetCurrentResponse* Arena::CreateMaybeMessage<::proto::SceneGetCurrentResponse>(Arena*);
template<> ::proto::SceneGetRequest* Arena::CreateMaybeMessage<::proto::SceneGetRequest>(Arena*);
template<> ::proto::SceneGetResponse* Arena::CreateMaybeMessage<::proto::SceneGetResponse>(Arena*);
template<> ::proto::SceneRemoveRequest* Arena::CreateMaybeMessage<::proto::SceneRemoveRequest>(Arena*);
template<> ::proto::SceneSetAsCurrentRequest* Arena::CreateMaybeMessage<::proto::SceneSetAsCurrentRequest>(Arena*);
template<> ::proto::SceneSetAsCurrentResponse* Arena::CreateMaybeMessage<::proto::SceneSetAsCurrentResponse>(Arena*);
template<> ::proto::Show* Arena::CreateMaybeMessage<::proto::Show>(Arena*);
template<> ::proto::ShowCreateRequest* Arena::CreateMaybeMessage<::proto::ShowCreateRequest>(Arena*);
template<> ::proto::ShowCreateResponse* Arena::CreateMaybeMessage<::proto::ShowCreateResponse>(Arena*);
template<> ::proto::ShowDuplicateRequest* Arena::CreateMaybeMessage<::proto::ShowDuplicateRequest>(Arena*);
template<> ::proto::ShowDuplicateResponse* Arena::CreateMaybeMessage<::proto::ShowDuplicateResponse>(Arena*);
template<> ::proto::ShowGetRequest* Arena::CreateMaybeMessage<::proto::ShowGetRequest>(Arena*);
template<> ::proto::ShowGetResponse* Arena::CreateMaybeMessage<::proto::ShowGetResponse>(Arena*);
template<> ::proto::ShowLoadRequest* Arena::CreateMaybeMessage<::proto::ShowLoadRequest>(Arena*);
template<> ::proto::ShowLoadResponse* Arena::CreateMaybeMessage<::proto::ShowLoadResponse>(Arena*);
template<> ::proto::ShowRemoveRequest* Arena::CreateMaybeMessage<::proto::ShowRemoveRequest>(Arena*);
template<> ::proto::ShowSwitchSourceResponse* Arena::CreateMaybeMessage<::proto::ShowSwitchSourceResponse>(Arena*);
template<> ::proto::Source* Arena::CreateMaybeMessage<::proto::Source>(Arena*);
template<> ::proto::SourceAddRequest* Arena::CreateMaybeMessage<::proto::SourceAddRequest>(Arena*);
template<> ::proto::SourceAddResponse* Arena::CreateMaybeMessage<::proto::SourceAddResponse>(Arena*);
template<> ::proto::SourceDuplicateRequest* Arena::CreateMaybeMessage<::proto::SourceDuplicateRequest>(Arena*);
template<> ::proto::SourceDuplicateResponse* Arena::CreateMaybeMessage<::proto::SourceDuplicateResponse>(Arena*);
template<> ::proto::SourceGetRequest* Arena::CreateMaybeMessage<::proto::SourceGetRequest>(Arena*);
template<> ::proto::SourceGetResponse* Arena::CreateMaybeMessage<::proto::SourceGetResponse>(Arena*);
template<> ::proto::SourceRemoveRequest* Arena::CreateMaybeMessage<::proto::SourceRemoveRequest>(Arena*);
template<> ::proto::SourceSetPropertiesRequest* Arena::CreateMaybeMessage<::proto::SourceSetPropertiesRequest>(Arena*);
template<> ::proto::SourceSetPropertiesResponse* Arena::CreateMaybeMessage<::proto::SourceSetPropertiesResponse>(Arena*);
template<> ::proto::StudioGetResponse* Arena::CreateMaybeMessage<::proto::StudioGetResponse>(Arena*);
template<> ::proto::StudioState* Arena::CreateMaybeMessage<::proto::StudioState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {

// ===================================================================

class StudioState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StudioState) */ {
 public:
  StudioState();
  virtual ~StudioState();

  StudioState(const StudioState& from);

  inline StudioState& operator=(const StudioState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StudioState(StudioState&& from) noexcept
    : StudioState() {
    *this = ::std::move(from);
  }

  inline StudioState& operator=(StudioState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StudioState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudioState* internal_default_instance() {
    return reinterpret_cast<const StudioState*>(
               &_StudioState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(StudioState* other);
  friend void swap(StudioState& a, StudioState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StudioState* New() const final {
    return CreateMaybeMessage<StudioState>(NULL);
  }

  StudioState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StudioState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StudioState& from);
  void MergeFrom(const StudioState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudioState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Show shows = 2;
  int shows_size() const;
  void clear_shows();
  static const int kShowsFieldNumber = 2;
  ::proto::Show* mutable_shows(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::Show >*
      mutable_shows();
  const ::proto::Show& shows(int index) const;
  ::proto::Show* add_shows();
  const ::google::protobuf::RepeatedPtrField< ::proto::Show >&
      shows() const;

  // string active_show_id = 1;
  void clear_active_show_id();
  static const int kActiveShowIdFieldNumber = 1;
  const ::std::string& active_show_id() const;
  void set_active_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_active_show_id(::std::string&& value);
  #endif
  void set_active_show_id(const char* value);
  void set_active_show_id(const char* value, size_t size);
  ::std::string* mutable_active_show_id();
  ::std::string* release_active_show_id();
  void set_allocated_active_show_id(::std::string* active_show_id);

  // @@protoc_insertion_point(class_scope:proto.StudioState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Show > shows_;
  ::google::protobuf::internal::ArenaStringPtr active_show_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Show : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Show) */ {
 public:
  Show();
  virtual ~Show();

  Show(const Show& from);

  inline Show& operator=(const Show& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Show(Show&& from) noexcept
    : Show() {
    *this = ::std::move(from);
  }

  inline Show& operator=(Show&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Show& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Show* internal_default_instance() {
    return reinterpret_cast<const Show*>(
               &_Show_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Show* other);
  friend void swap(Show& a, Show& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Show* New() const final {
    return CreateMaybeMessage<Show>(NULL);
  }

  Show* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Show>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Show& from);
  void MergeFrom(const Show& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Show* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Scene scenes = 4;
  int scenes_size() const;
  void clear_scenes();
  static const int kScenesFieldNumber = 4;
  ::proto::Scene* mutable_scenes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::Scene >*
      mutable_scenes();
  const ::proto::Scene& scenes(int index) const;
  ::proto::Scene* add_scenes();
  const ::google::protobuf::RepeatedPtrField< ::proto::Scene >&
      scenes() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string active_scene_id = 3;
  void clear_active_scene_id();
  static const int kActiveSceneIdFieldNumber = 3;
  const ::std::string& active_scene_id() const;
  void set_active_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_active_scene_id(::std::string&& value);
  #endif
  void set_active_scene_id(const char* value);
  void set_active_scene_id(const char* value, size_t size);
  ::std::string* mutable_active_scene_id();
  ::std::string* release_active_scene_id();
  void set_allocated_active_scene_id(::std::string* active_scene_id);

  // @@protoc_insertion_point(class_scope:proto.Show)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Scene > scenes_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr active_scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Scene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Scene) */ {
 public:
  Scene();
  virtual ~Scene();

  Scene(const Scene& from);

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Scene* other);
  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(NULL);
  }

  Scene* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Source sources = 4;
  int sources_size() const;
  void clear_sources();
  static const int kSourcesFieldNumber = 4;
  ::proto::Source* mutable_sources(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::Source >*
      mutable_sources();
  const ::proto::Source& sources(int index) const;
  ::proto::Source* add_sources();
  const ::google::protobuf::RepeatedPtrField< ::proto::Source >&
      sources() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string active_source_id = 3;
  void clear_active_source_id();
  static const int kActiveSourceIdFieldNumber = 3;
  const ::std::string& active_source_id() const;
  void set_active_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_active_source_id(::std::string&& value);
  #endif
  void set_active_source_id(const char* value);
  void set_active_source_id(const char* value, size_t size);
  ::std::string* mutable_active_source_id();
  ::std::string* release_active_source_id();
  void set_allocated_active_source_id(::std::string* active_source_id);

  // @@protoc_insertion_point(class_scope:proto.Scene)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Source > sources_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr active_source_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Source : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.Source) */ {
 public:
  Source();
  virtual ~Source();

  Source(const Source& from);

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(Source&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Source* other);
  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(NULL);
  }

  Source* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string url = 4;
  void clear_url();
  static const int kUrlFieldNumber = 4;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:proto.Source)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowGetRequest) */ {
 public:
  ShowGetRequest();
  virtual ~ShowGetRequest();

  ShowGetRequest(const ShowGetRequest& from);

  inline ShowGetRequest& operator=(const ShowGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowGetRequest(ShowGetRequest&& from) noexcept
    : ShowGetRequest() {
    *this = ::std::move(from);
  }

  inline ShowGetRequest& operator=(ShowGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowGetRequest* internal_default_instance() {
    return reinterpret_cast<const ShowGetRequest*>(
               &_ShowGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ShowGetRequest* other);
  friend void swap(ShowGetRequest& a, ShowGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowGetRequest* New() const final {
    return CreateMaybeMessage<ShowGetRequest>(NULL);
  }

  ShowGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowGetRequest& from);
  void MergeFrom(const ShowGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // @@protoc_insertion_point(class_scope:proto.ShowGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowCreateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowCreateRequest) */ {
 public:
  ShowCreateRequest();
  virtual ~ShowCreateRequest();

  ShowCreateRequest(const ShowCreateRequest& from);

  inline ShowCreateRequest& operator=(const ShowCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowCreateRequest(ShowCreateRequest&& from) noexcept
    : ShowCreateRequest() {
    *this = ::std::move(from);
  }

  inline ShowCreateRequest& operator=(ShowCreateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ShowCreateRequest*>(
               &_ShowCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ShowCreateRequest* other);
  friend void swap(ShowCreateRequest& a, ShowCreateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowCreateRequest* New() const final {
    return CreateMaybeMessage<ShowCreateRequest>(NULL);
  }

  ShowCreateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowCreateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowCreateRequest& from);
  void MergeFrom(const ShowCreateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_name = 1;
  void clear_show_name();
  static const int kShowNameFieldNumber = 1;
  const ::std::string& show_name() const;
  void set_show_name(const ::std::string& value);
  #if LANG_CXX11
  void set_show_name(::std::string&& value);
  #endif
  void set_show_name(const char* value);
  void set_show_name(const char* value, size_t size);
  ::std::string* mutable_show_name();
  ::std::string* release_show_name();
  void set_allocated_show_name(::std::string* show_name);

  // @@protoc_insertion_point(class_scope:proto.ShowCreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowDuplicateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowDuplicateRequest) */ {
 public:
  ShowDuplicateRequest();
  virtual ~ShowDuplicateRequest();

  ShowDuplicateRequest(const ShowDuplicateRequest& from);

  inline ShowDuplicateRequest& operator=(const ShowDuplicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowDuplicateRequest(ShowDuplicateRequest&& from) noexcept
    : ShowDuplicateRequest() {
    *this = ::std::move(from);
  }

  inline ShowDuplicateRequest& operator=(ShowDuplicateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowDuplicateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowDuplicateRequest* internal_default_instance() {
    return reinterpret_cast<const ShowDuplicateRequest*>(
               &_ShowDuplicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ShowDuplicateRequest* other);
  friend void swap(ShowDuplicateRequest& a, ShowDuplicateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowDuplicateRequest* New() const final {
    return CreateMaybeMessage<ShowDuplicateRequest>(NULL);
  }

  ShowDuplicateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowDuplicateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowDuplicateRequest& from);
  void MergeFrom(const ShowDuplicateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowDuplicateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // @@protoc_insertion_point(class_scope:proto.ShowDuplicateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowRemoveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowRemoveRequest) */ {
 public:
  ShowRemoveRequest();
  virtual ~ShowRemoveRequest();

  ShowRemoveRequest(const ShowRemoveRequest& from);

  inline ShowRemoveRequest& operator=(const ShowRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowRemoveRequest(ShowRemoveRequest&& from) noexcept
    : ShowRemoveRequest() {
    *this = ::std::move(from);
  }

  inline ShowRemoveRequest& operator=(ShowRemoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const ShowRemoveRequest*>(
               &_ShowRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(ShowRemoveRequest* other);
  friend void swap(ShowRemoveRequest& a, ShowRemoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowRemoveRequest* New() const final {
    return CreateMaybeMessage<ShowRemoveRequest>(NULL);
  }

  ShowRemoveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowRemoveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowRemoveRequest& from);
  void MergeFrom(const ShowRemoveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowRemoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // @@protoc_insertion_point(class_scope:proto.ShowRemoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowLoadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowLoadRequest) */ {
 public:
  ShowLoadRequest();
  virtual ~ShowLoadRequest();

  ShowLoadRequest(const ShowLoadRequest& from);

  inline ShowLoadRequest& operator=(const ShowLoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowLoadRequest(ShowLoadRequest&& from) noexcept
    : ShowLoadRequest() {
    *this = ::std::move(from);
  }

  inline ShowLoadRequest& operator=(ShowLoadRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowLoadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowLoadRequest* internal_default_instance() {
    return reinterpret_cast<const ShowLoadRequest*>(
               &_ShowLoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ShowLoadRequest* other);
  friend void swap(ShowLoadRequest& a, ShowLoadRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowLoadRequest* New() const final {
    return CreateMaybeMessage<ShowLoadRequest>(NULL);
  }

  ShowLoadRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowLoadRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowLoadRequest& from);
  void MergeFrom(const ShowLoadRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowLoadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_path = 1;
  void clear_show_path();
  static const int kShowPathFieldNumber = 1;
  const ::std::string& show_path() const;
  void set_show_path(const ::std::string& value);
  #if LANG_CXX11
  void set_show_path(::std::string&& value);
  #endif
  void set_show_path(const char* value);
  void set_show_path(const char* value, size_t size);
  ::std::string* mutable_show_path();
  ::std::string* release_show_path();
  void set_allocated_show_path(::std::string* show_path);

  // @@protoc_insertion_point(class_scope:proto.ShowLoadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_path_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetRequest) */ {
 public:
  SceneGetRequest();
  virtual ~SceneGetRequest();

  SceneGetRequest(const SceneGetRequest& from);

  inline SceneGetRequest& operator=(const SceneGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneGetRequest(SceneGetRequest&& from) noexcept
    : SceneGetRequest() {
    *this = ::std::move(from);
  }

  inline SceneGetRequest& operator=(SceneGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetRequest* internal_default_instance() {
    return reinterpret_cast<const SceneGetRequest*>(
               &_SceneGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(SceneGetRequest* other);
  friend void swap(SceneGetRequest& a, SceneGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneGetRequest* New() const final {
    return CreateMaybeMessage<SceneGetRequest>(NULL);
  }

  SceneGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneGetRequest& from);
  void MergeFrom(const SceneGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // @@protoc_insertion_point(class_scope:proto.SceneGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneAddRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneAddRequest) */ {
 public:
  SceneAddRequest();
  virtual ~SceneAddRequest();

  SceneAddRequest(const SceneAddRequest& from);

  inline SceneAddRequest& operator=(const SceneAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneAddRequest(SceneAddRequest&& from) noexcept
    : SceneAddRequest() {
    *this = ::std::move(from);
  }

  inline SceneAddRequest& operator=(SceneAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneAddRequest* internal_default_instance() {
    return reinterpret_cast<const SceneAddRequest*>(
               &_SceneAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(SceneAddRequest* other);
  friend void swap(SceneAddRequest& a, SceneAddRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneAddRequest* New() const final {
    return CreateMaybeMessage<SceneAddRequest>(NULL);
  }

  SceneAddRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneAddRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneAddRequest& from);
  void MergeFrom(const SceneAddRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneAddRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_name = 2;
  void clear_scene_name();
  static const int kSceneNameFieldNumber = 2;
  const ::std::string& scene_name() const;
  void set_scene_name(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_name(::std::string&& value);
  #endif
  void set_scene_name(const char* value);
  void set_scene_name(const char* value, size_t size);
  ::std::string* mutable_scene_name();
  ::std::string* release_scene_name();
  void set_allocated_scene_name(::std::string* scene_name);

  // @@protoc_insertion_point(class_scope:proto.SceneAddRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneDuplicateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneDuplicateRequest) */ {
 public:
  SceneDuplicateRequest();
  virtual ~SceneDuplicateRequest();

  SceneDuplicateRequest(const SceneDuplicateRequest& from);

  inline SceneDuplicateRequest& operator=(const SceneDuplicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneDuplicateRequest(SceneDuplicateRequest&& from) noexcept
    : SceneDuplicateRequest() {
    *this = ::std::move(from);
  }

  inline SceneDuplicateRequest& operator=(SceneDuplicateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneDuplicateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneDuplicateRequest* internal_default_instance() {
    return reinterpret_cast<const SceneDuplicateRequest*>(
               &_SceneDuplicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(SceneDuplicateRequest* other);
  friend void swap(SceneDuplicateRequest& a, SceneDuplicateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneDuplicateRequest* New() const final {
    return CreateMaybeMessage<SceneDuplicateRequest>(NULL);
  }

  SceneDuplicateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneDuplicateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneDuplicateRequest& from);
  void MergeFrom(const SceneDuplicateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneDuplicateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // @@protoc_insertion_point(class_scope:proto.SceneDuplicateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneRemoveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneRemoveRequest) */ {
 public:
  SceneRemoveRequest();
  virtual ~SceneRemoveRequest();

  SceneRemoveRequest(const SceneRemoveRequest& from);

  inline SceneRemoveRequest& operator=(const SceneRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneRemoveRequest(SceneRemoveRequest&& from) noexcept
    : SceneRemoveRequest() {
    *this = ::std::move(from);
  }

  inline SceneRemoveRequest& operator=(SceneRemoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const SceneRemoveRequest*>(
               &_SceneRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(SceneRemoveRequest* other);
  friend void swap(SceneRemoveRequest& a, SceneRemoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneRemoveRequest* New() const final {
    return CreateMaybeMessage<SceneRemoveRequest>(NULL);
  }

  SceneRemoveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneRemoveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneRemoveRequest& from);
  void MergeFrom(const SceneRemoveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneRemoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // @@protoc_insertion_point(class_scope:proto.SceneRemoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneSetAsCurrentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneSetAsCurrentRequest) */ {
 public:
  SceneSetAsCurrentRequest();
  virtual ~SceneSetAsCurrentRequest();

  SceneSetAsCurrentRequest(const SceneSetAsCurrentRequest& from);

  inline SceneSetAsCurrentRequest& operator=(const SceneSetAsCurrentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneSetAsCurrentRequest(SceneSetAsCurrentRequest&& from) noexcept
    : SceneSetAsCurrentRequest() {
    *this = ::std::move(from);
  }

  inline SceneSetAsCurrentRequest& operator=(SceneSetAsCurrentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneSetAsCurrentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneSetAsCurrentRequest* internal_default_instance() {
    return reinterpret_cast<const SceneSetAsCurrentRequest*>(
               &_SceneSetAsCurrentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(SceneSetAsCurrentRequest* other);
  friend void swap(SceneSetAsCurrentRequest& a, SceneSetAsCurrentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneSetAsCurrentRequest* New() const final {
    return CreateMaybeMessage<SceneSetAsCurrentRequest>(NULL);
  }

  SceneSetAsCurrentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneSetAsCurrentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneSetAsCurrentRequest& from);
  void MergeFrom(const SceneSetAsCurrentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneSetAsCurrentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // @@protoc_insertion_point(class_scope:proto.SceneSetAsCurrentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneGetCurrentRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetCurrentRequest) */ {
 public:
  SceneGetCurrentRequest();
  virtual ~SceneGetCurrentRequest();

  SceneGetCurrentRequest(const SceneGetCurrentRequest& from);

  inline SceneGetCurrentRequest& operator=(const SceneGetCurrentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneGetCurrentRequest(SceneGetCurrentRequest&& from) noexcept
    : SceneGetCurrentRequest() {
    *this = ::std::move(from);
  }

  inline SceneGetCurrentRequest& operator=(SceneGetCurrentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneGetCurrentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetCurrentRequest* internal_default_instance() {
    return reinterpret_cast<const SceneGetCurrentRequest*>(
               &_SceneGetCurrentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(SceneGetCurrentRequest* other);
  friend void swap(SceneGetCurrentRequest& a, SceneGetCurrentRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneGetCurrentRequest* New() const final {
    return CreateMaybeMessage<SceneGetCurrentRequest>(NULL);
  }

  SceneGetCurrentRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetCurrentRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneGetCurrentRequest& from);
  void MergeFrom(const SceneGetCurrentRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetCurrentRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // @@protoc_insertion_point(class_scope:proto.SceneGetCurrentRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceGetRequest) */ {
 public:
  SourceGetRequest();
  virtual ~SourceGetRequest();

  SourceGetRequest(const SourceGetRequest& from);

  inline SourceGetRequest& operator=(const SourceGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceGetRequest(SourceGetRequest&& from) noexcept
    : SourceGetRequest() {
    *this = ::std::move(from);
  }

  inline SourceGetRequest& operator=(SourceGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceGetRequest* internal_default_instance() {
    return reinterpret_cast<const SourceGetRequest*>(
               &_SourceGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SourceGetRequest* other);
  friend void swap(SourceGetRequest& a, SourceGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceGetRequest* New() const final {
    return CreateMaybeMessage<SourceGetRequest>(NULL);
  }

  SourceGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceGetRequest& from);
  void MergeFrom(const SourceGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // string source_id = 3;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 3;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_id(::std::string&& value);
  #endif
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // @@protoc_insertion_point(class_scope:proto.SourceGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceAddRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceAddRequest) */ {
 public:
  SourceAddRequest();
  virtual ~SourceAddRequest();

  SourceAddRequest(const SourceAddRequest& from);

  inline SourceAddRequest& operator=(const SourceAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceAddRequest(SourceAddRequest&& from) noexcept
    : SourceAddRequest() {
    *this = ::std::move(from);
  }

  inline SourceAddRequest& operator=(SourceAddRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceAddRequest* internal_default_instance() {
    return reinterpret_cast<const SourceAddRequest*>(
               &_SourceAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SourceAddRequest* other);
  friend void swap(SourceAddRequest& a, SourceAddRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceAddRequest* New() const final {
    return CreateMaybeMessage<SourceAddRequest>(NULL);
  }

  SourceAddRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceAddRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceAddRequest& from);
  void MergeFrom(const SourceAddRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceAddRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // string source_name = 3;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 3;
  const ::std::string& source_name() const;
  void set_source_name(const ::std::string& value);
  #if LANG_CXX11
  void set_source_name(::std::string&& value);
  #endif
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  ::std::string* mutable_source_name();
  ::std::string* release_source_name();
  void set_allocated_source_name(::std::string* source_name);

  // string source_type = 4;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 4;
  const ::std::string& source_type() const;
  void set_source_type(const ::std::string& value);
  #if LANG_CXX11
  void set_source_type(::std::string&& value);
  #endif
  void set_source_type(const char* value);
  void set_source_type(const char* value, size_t size);
  ::std::string* mutable_source_type();
  ::std::string* release_source_type();
  void set_allocated_source_type(::std::string* source_type);

  // string source_url = 5;
  void clear_source_url();
  static const int kSourceUrlFieldNumber = 5;
  const ::std::string& source_url() const;
  void set_source_url(const ::std::string& value);
  #if LANG_CXX11
  void set_source_url(::std::string&& value);
  #endif
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  ::std::string* mutable_source_url();
  ::std::string* release_source_url();
  void set_allocated_source_url(::std::string* source_url);

  // @@protoc_insertion_point(class_scope:proto.SourceAddRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::internal::ArenaStringPtr source_name_;
  ::google::protobuf::internal::ArenaStringPtr source_type_;
  ::google::protobuf::internal::ArenaStringPtr source_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceDuplicateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceDuplicateRequest) */ {
 public:
  SourceDuplicateRequest();
  virtual ~SourceDuplicateRequest();

  SourceDuplicateRequest(const SourceDuplicateRequest& from);

  inline SourceDuplicateRequest& operator=(const SourceDuplicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceDuplicateRequest(SourceDuplicateRequest&& from) noexcept
    : SourceDuplicateRequest() {
    *this = ::std::move(from);
  }

  inline SourceDuplicateRequest& operator=(SourceDuplicateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceDuplicateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceDuplicateRequest* internal_default_instance() {
    return reinterpret_cast<const SourceDuplicateRequest*>(
               &_SourceDuplicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SourceDuplicateRequest* other);
  friend void swap(SourceDuplicateRequest& a, SourceDuplicateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceDuplicateRequest* New() const final {
    return CreateMaybeMessage<SourceDuplicateRequest>(NULL);
  }

  SourceDuplicateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceDuplicateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceDuplicateRequest& from);
  void MergeFrom(const SourceDuplicateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceDuplicateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // string source_id = 3;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 3;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_id(::std::string&& value);
  #endif
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // @@protoc_insertion_point(class_scope:proto.SourceDuplicateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceRemoveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceRemoveRequest) */ {
 public:
  SourceRemoveRequest();
  virtual ~SourceRemoveRequest();

  SourceRemoveRequest(const SourceRemoveRequest& from);

  inline SourceRemoveRequest& operator=(const SourceRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceRemoveRequest(SourceRemoveRequest&& from) noexcept
    : SourceRemoveRequest() {
    *this = ::std::move(from);
  }

  inline SourceRemoveRequest& operator=(SourceRemoveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const SourceRemoveRequest*>(
               &_SourceRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SourceRemoveRequest* other);
  friend void swap(SourceRemoveRequest& a, SourceRemoveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceRemoveRequest* New() const final {
    return CreateMaybeMessage<SourceRemoveRequest>(NULL);
  }

  SourceRemoveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceRemoveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceRemoveRequest& from);
  void MergeFrom(const SourceRemoveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceRemoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // string source_id = 3;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 3;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_id(::std::string&& value);
  #endif
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // @@protoc_insertion_point(class_scope:proto.SourceRemoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceSetPropertiesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceSetPropertiesRequest) */ {
 public:
  SourceSetPropertiesRequest();
  virtual ~SourceSetPropertiesRequest();

  SourceSetPropertiesRequest(const SourceSetPropertiesRequest& from);

  inline SourceSetPropertiesRequest& operator=(const SourceSetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceSetPropertiesRequest(SourceSetPropertiesRequest&& from) noexcept
    : SourceSetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline SourceSetPropertiesRequest& operator=(SourceSetPropertiesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceSetPropertiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceSetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const SourceSetPropertiesRequest*>(
               &_SourceSetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SourceSetPropertiesRequest* other);
  friend void swap(SourceSetPropertiesRequest& a, SourceSetPropertiesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceSetPropertiesRequest* New() const final {
    return CreateMaybeMessage<SourceSetPropertiesRequest>(NULL);
  }

  SourceSetPropertiesRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceSetPropertiesRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceSetPropertiesRequest& from);
  void MergeFrom(const SourceSetPropertiesRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceSetPropertiesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string show_id = 1;
  void clear_show_id();
  static const int kShowIdFieldNumber = 1;
  const ::std::string& show_id() const;
  void set_show_id(const ::std::string& value);
  #if LANG_CXX11
  void set_show_id(::std::string&& value);
  #endif
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  ::std::string* mutable_show_id();
  ::std::string* release_show_id();
  void set_allocated_show_id(::std::string* show_id);

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // string source_id = 3;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 3;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_id(::std::string&& value);
  #endif
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // string source_type = 4;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 4;
  const ::std::string& source_type() const;
  void set_source_type(const ::std::string& value);
  #if LANG_CXX11
  void set_source_type(::std::string&& value);
  #endif
  void set_source_type(const char* value);
  void set_source_type(const char* value, size_t size);
  ::std::string* mutable_source_type();
  ::std::string* release_source_type();
  void set_allocated_source_type(::std::string* source_type);

  // string source_url = 5;
  void clear_source_url();
  static const int kSourceUrlFieldNumber = 5;
  const ::std::string& source_url() const;
  void set_source_url(const ::std::string& value);
  #if LANG_CXX11
  void set_source_url(::std::string&& value);
  #endif
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  ::std::string* mutable_source_url();
  ::std::string* release_source_url();
  void set_allocated_source_url(::std::string* source_url);

  // @@protoc_insertion_point(class_scope:proto.SourceSetPropertiesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr show_id_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  ::google::protobuf::internal::ArenaStringPtr source_type_;
  ::google::protobuf::internal::ArenaStringPtr source_url_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StudioGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.StudioGetResponse) */ {
 public:
  StudioGetResponse();
  virtual ~StudioGetResponse();

  StudioGetResponse(const StudioGetResponse& from);

  inline StudioGetResponse& operator=(const StudioGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StudioGetResponse(StudioGetResponse&& from) noexcept
    : StudioGetResponse() {
    *this = ::std::move(from);
  }

  inline StudioGetResponse& operator=(StudioGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StudioGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudioGetResponse* internal_default_instance() {
    return reinterpret_cast<const StudioGetResponse*>(
               &_StudioGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(StudioGetResponse* other);
  friend void swap(StudioGetResponse& a, StudioGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StudioGetResponse* New() const final {
    return CreateMaybeMessage<StudioGetResponse>(NULL);
  }

  StudioGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StudioGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StudioGetResponse& from);
  void MergeFrom(const StudioGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudioGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.StudioState studio = 1;
  bool has_studio() const;
  void clear_studio();
  static const int kStudioFieldNumber = 1;
  private:
  const ::proto::StudioState& _internal_studio() const;
  public:
  const ::proto::StudioState& studio() const;
  ::proto::StudioState* release_studio();
  ::proto::StudioState* mutable_studio();
  void set_allocated_studio(::proto::StudioState* studio);

  // @@protoc_insertion_point(class_scope:proto.StudioGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::StudioState* studio_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowGetResponse) */ {
 public:
  ShowGetResponse();
  virtual ~ShowGetResponse();

  ShowGetResponse(const ShowGetResponse& from);

  inline ShowGetResponse& operator=(const ShowGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowGetResponse(ShowGetResponse&& from) noexcept
    : ShowGetResponse() {
    *this = ::std::move(from);
  }

  inline ShowGetResponse& operator=(ShowGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowGetResponse* internal_default_instance() {
    return reinterpret_cast<const ShowGetResponse*>(
               &_ShowGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ShowGetResponse* other);
  friend void swap(ShowGetResponse& a, ShowGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowGetResponse* New() const final {
    return CreateMaybeMessage<ShowGetResponse>(NULL);
  }

  ShowGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowGetResponse& from);
  void MergeFrom(const ShowGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Show show = 1;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 1;
  private:
  const ::proto::Show& _internal_show() const;
  public:
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);

  // @@protoc_insertion_point(class_scope:proto.ShowGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Show* show_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowCreateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowCreateResponse) */ {
 public:
  ShowCreateResponse();
  virtual ~ShowCreateResponse();

  ShowCreateResponse(const ShowCreateResponse& from);

  inline ShowCreateResponse& operator=(const ShowCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowCreateResponse(ShowCreateResponse&& from) noexcept
    : ShowCreateResponse() {
    *this = ::std::move(from);
  }

  inline ShowCreateResponse& operator=(ShowCreateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCreateResponse* internal_default_instance() {
    return reinterpret_cast<const ShowCreateResponse*>(
               &_ShowCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(ShowCreateResponse* other);
  friend void swap(ShowCreateResponse& a, ShowCreateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowCreateResponse* New() const final {
    return CreateMaybeMessage<ShowCreateResponse>(NULL);
  }

  ShowCreateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowCreateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowCreateResponse& from);
  void MergeFrom(const ShowCreateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Show show = 1;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 1;
  private:
  const ::proto::Show& _internal_show() const;
  public:
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);

  // @@protoc_insertion_point(class_scope:proto.ShowCreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Show* show_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowDuplicateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowDuplicateResponse) */ {
 public:
  ShowDuplicateResponse();
  virtual ~ShowDuplicateResponse();

  ShowDuplicateResponse(const ShowDuplicateResponse& from);

  inline ShowDuplicateResponse& operator=(const ShowDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowDuplicateResponse(ShowDuplicateResponse&& from) noexcept
    : ShowDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline ShowDuplicateResponse& operator=(ShowDuplicateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowDuplicateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const ShowDuplicateResponse*>(
               &_ShowDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(ShowDuplicateResponse* other);
  friend void swap(ShowDuplicateResponse& a, ShowDuplicateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowDuplicateResponse* New() const final {
    return CreateMaybeMessage<ShowDuplicateResponse>(NULL);
  }

  ShowDuplicateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowDuplicateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowDuplicateResponse& from);
  void MergeFrom(const ShowDuplicateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowDuplicateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Show show = 1;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 1;
  private:
  const ::proto::Show& _internal_show() const;
  public:
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);

  // @@protoc_insertion_point(class_scope:proto.ShowDuplicateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Show* show_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowLoadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowLoadResponse) */ {
 public:
  ShowLoadResponse();
  virtual ~ShowLoadResponse();

  ShowLoadResponse(const ShowLoadResponse& from);

  inline ShowLoadResponse& operator=(const ShowLoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowLoadResponse(ShowLoadResponse&& from) noexcept
    : ShowLoadResponse() {
    *this = ::std::move(from);
  }

  inline ShowLoadResponse& operator=(ShowLoadResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowLoadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowLoadResponse* internal_default_instance() {
    return reinterpret_cast<const ShowLoadResponse*>(
               &_ShowLoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(ShowLoadResponse* other);
  friend void swap(ShowLoadResponse& a, ShowLoadResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowLoadResponse* New() const final {
    return CreateMaybeMessage<ShowLoadResponse>(NULL);
  }

  ShowLoadResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowLoadResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowLoadResponse& from);
  void MergeFrom(const ShowLoadResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowLoadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Show show = 1;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 1;
  private:
  const ::proto::Show& _internal_show() const;
  public:
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);

  // @@protoc_insertion_point(class_scope:proto.ShowLoadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Show* show_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowSwitchSourceResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ShowSwitchSourceResponse) */ {
 public:
  ShowSwitchSourceResponse();
  virtual ~ShowSwitchSourceResponse();

  ShowSwitchSourceResponse(const ShowSwitchSourceResponse& from);

  inline ShowSwitchSourceResponse& operator=(const ShowSwitchSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowSwitchSourceResponse(ShowSwitchSourceResponse&& from) noexcept
    : ShowSwitchSourceResponse() {
    *this = ::std::move(from);
  }

  inline ShowSwitchSourceResponse& operator=(ShowSwitchSourceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowSwitchSourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowSwitchSourceResponse* internal_default_instance() {
    return reinterpret_cast<const ShowSwitchSourceResponse*>(
               &_ShowSwitchSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(ShowSwitchSourceResponse* other);
  friend void swap(ShowSwitchSourceResponse& a, ShowSwitchSourceResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowSwitchSourceResponse* New() const final {
    return CreateMaybeMessage<ShowSwitchSourceResponse>(NULL);
  }

  ShowSwitchSourceResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowSwitchSourceResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowSwitchSourceResponse& from);
  void MergeFrom(const ShowSwitchSourceResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSwitchSourceResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Show show = 1;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 1;
  private:
  const ::proto::Show& _internal_show() const;
  public:
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);

  // @@protoc_insertion_point(class_scope:proto.ShowSwitchSourceResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Show* show_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetResponse) */ {
 public:
  SceneGetResponse();
  virtual ~SceneGetResponse();

  SceneGetResponse(const SceneGetResponse& from);

  inline SceneGetResponse& operator=(const SceneGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneGetResponse(SceneGetResponse&& from) noexcept
    : SceneGetResponse() {
    *this = ::std::move(from);
  }

  inline SceneGetResponse& operator=(SceneGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetResponse* internal_default_instance() {
    return reinterpret_cast<const SceneGetResponse*>(
               &_SceneGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(SceneGetResponse* other);
  friend void swap(SceneGetResponse& a, SceneGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneGetResponse* New() const final {
    return CreateMaybeMessage<SceneGetResponse>(NULL);
  }

  SceneGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneGetResponse& from);
  void MergeFrom(const SceneGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Scene scene = 1;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 1;
  private:
  const ::proto::Scene& _internal_scene() const;
  public:
  const ::proto::Scene& scene() const;
  ::proto::Scene* release_scene();
  ::proto::Scene* mutable_scene();
  void set_allocated_scene(::proto::Scene* scene);

  // @@protoc_insertion_point(class_scope:proto.SceneGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Scene* scene_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneAddResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneAddResponse) */ {
 public:
  SceneAddResponse();
  virtual ~SceneAddResponse();

  SceneAddResponse(const SceneAddResponse& from);

  inline SceneAddResponse& operator=(const SceneAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneAddResponse(SceneAddResponse&& from) noexcept
    : SceneAddResponse() {
    *this = ::std::move(from);
  }

  inline SceneAddResponse& operator=(SceneAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneAddResponse* internal_default_instance() {
    return reinterpret_cast<const SceneAddResponse*>(
               &_SceneAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(SceneAddResponse* other);
  friend void swap(SceneAddResponse& a, SceneAddResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneAddResponse* New() const final {
    return CreateMaybeMessage<SceneAddResponse>(NULL);
  }

  SceneAddResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneAddResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneAddResponse& from);
  void MergeFrom(const SceneAddResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneAddResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Scene scene = 1;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 1;
  private:
  const ::proto::Scene& _internal_scene() const;
  public:
  const ::proto::Scene& scene() const;
  ::proto::Scene* release_scene();
  ::proto::Scene* mutable_scene();
  void set_allocated_scene(::proto::Scene* scene);

  // @@protoc_insertion_point(class_scope:proto.SceneAddResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Scene* scene_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneDuplicateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneDuplicateResponse) */ {
 public:
  SceneDuplicateResponse();
  virtual ~SceneDuplicateResponse();

  SceneDuplicateResponse(const SceneDuplicateResponse& from);

  inline SceneDuplicateResponse& operator=(const SceneDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneDuplicateResponse(SceneDuplicateResponse&& from) noexcept
    : SceneDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline SceneDuplicateResponse& operator=(SceneDuplicateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneDuplicateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const SceneDuplicateResponse*>(
               &_SceneDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(SceneDuplicateResponse* other);
  friend void swap(SceneDuplicateResponse& a, SceneDuplicateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneDuplicateResponse* New() const final {
    return CreateMaybeMessage<SceneDuplicateResponse>(NULL);
  }

  SceneDuplicateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneDuplicateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneDuplicateResponse& from);
  void MergeFrom(const SceneDuplicateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneDuplicateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Scene scene = 1;
  bool has_scene() const;
  void clear_scene();
  static const int kSceneFieldNumber = 1;
  private:
  const ::proto::Scene& _internal_scene() const;
  public:
  const ::proto::Scene& scene() const;
  ::proto::Scene* release_scene();
  ::proto::Scene* mutable_scene();
  void set_allocated_scene(::proto::Scene* scene);

  // @@protoc_insertion_point(class_scope:proto.SceneDuplicateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Scene* scene_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneSetAsCurrentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneSetAsCurrentResponse) */ {
 public:
  SceneSetAsCurrentResponse();
  virtual ~SceneSetAsCurrentResponse();

  SceneSetAsCurrentResponse(const SceneSetAsCurrentResponse& from);

  inline SceneSetAsCurrentResponse& operator=(const SceneSetAsCurrentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneSetAsCurrentResponse(SceneSetAsCurrentResponse&& from) noexcept
    : SceneSetAsCurrentResponse() {
    *this = ::std::move(from);
  }

  inline SceneSetAsCurrentResponse& operator=(SceneSetAsCurrentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneSetAsCurrentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneSetAsCurrentResponse* internal_default_instance() {
    return reinterpret_cast<const SceneSetAsCurrentResponse*>(
               &_SceneSetAsCurrentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(SceneSetAsCurrentResponse* other);
  friend void swap(SceneSetAsCurrentResponse& a, SceneSetAsCurrentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneSetAsCurrentResponse* New() const final {
    return CreateMaybeMessage<SceneSetAsCurrentResponse>(NULL);
  }

  SceneSetAsCurrentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneSetAsCurrentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneSetAsCurrentResponse& from);
  void MergeFrom(const SceneSetAsCurrentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneSetAsCurrentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Show show = 1;
  bool has_show() const;
  void clear_show();
  static const int kShowFieldNumber = 1;
  private:
  const ::proto::Show& _internal_show() const;
  public:
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);

  // @@protoc_insertion_point(class_scope:proto.SceneSetAsCurrentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Show* show_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneGetCurrentResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetCurrentResponse) */ {
 public:
  SceneGetCurrentResponse();
  virtual ~SceneGetCurrentResponse();

  SceneGetCurrentResponse(const SceneGetCurrentResponse& from);

  inline SceneGetCurrentResponse& operator=(const SceneGetCurrentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneGetCurrentResponse(SceneGetCurrentResponse&& from) noexcept
    : SceneGetCurrentResponse() {
    *this = ::std::move(from);
  }

  inline SceneGetCurrentResponse& operator=(SceneGetCurrentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneGetCurrentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetCurrentResponse* internal_default_instance() {
    return reinterpret_cast<const SceneGetCurrentResponse*>(
               &_SceneGetCurrentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(SceneGetCurrentResponse* other);
  friend void swap(SceneGetCurrentResponse& a, SceneGetCurrentResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneGetCurrentResponse* New() const final {
    return CreateMaybeMessage<SceneGetCurrentResponse>(NULL);
  }

  SceneGetCurrentResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetCurrentResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneGetCurrentResponse& from);
  void MergeFrom(const SceneGetCurrentResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetCurrentResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string scene_id = 2;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  const ::std::string& scene_id() const;
  void set_scene_id(const ::std::string& value);
  #if LANG_CXX11
  void set_scene_id(::std::string&& value);
  #endif
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  ::std::string* mutable_scene_id();
  ::std::string* release_scene_id();
  void set_allocated_scene_id(::std::string* scene_id);

  // @@protoc_insertion_point(class_scope:proto.SceneGetCurrentResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr scene_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceGetResponse) */ {
 public:
  SourceGetResponse();
  virtual ~SourceGetResponse();

  SourceGetResponse(const SourceGetResponse& from);

  inline SourceGetResponse& operator=(const SourceGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceGetResponse(SourceGetResponse&& from) noexcept
    : SourceGetResponse() {
    *this = ::std::move(from);
  }

  inline SourceGetResponse& operator=(SourceGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceGetResponse* internal_default_instance() {
    return reinterpret_cast<const SourceGetResponse*>(
               &_SourceGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(SourceGetResponse* other);
  friend void swap(SourceGetResponse& a, SourceGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceGetResponse* New() const final {
    return CreateMaybeMessage<SourceGetResponse>(NULL);
  }

  SourceGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceGetResponse& from);
  void MergeFrom(const SourceGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Source source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::proto::Source& _internal_source() const;
  public:
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);

  // @@protoc_insertion_point(class_scope:proto.SourceGetResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Source* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceAddResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceAddResponse) */ {
 public:
  SourceAddResponse();
  virtual ~SourceAddResponse();

  SourceAddResponse(const SourceAddResponse& from);

  inline SourceAddResponse& operator=(const SourceAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceAddResponse(SourceAddResponse&& from) noexcept
    : SourceAddResponse() {
    *this = ::std::move(from);
  }

  inline SourceAddResponse& operator=(SourceAddResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceAddResponse* internal_default_instance() {
    return reinterpret_cast<const SourceAddResponse*>(
               &_SourceAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(SourceAddResponse* other);
  friend void swap(SourceAddResponse& a, SourceAddResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceAddResponse* New() const final {
    return CreateMaybeMessage<SourceAddResponse>(NULL);
  }

  SourceAddResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceAddResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceAddResponse& from);
  void MergeFrom(const SourceAddResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceAddResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Source source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::proto::Source& _internal_source() const;
  public:
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);

  // @@protoc_insertion_point(class_scope:proto.SourceAddResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Source* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceDuplicateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceDuplicateResponse) */ {
 public:
  SourceDuplicateResponse();
  virtual ~SourceDuplicateResponse();

  SourceDuplicateResponse(const SourceDuplicateResponse& from);

  inline SourceDuplicateResponse& operator=(const SourceDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceDuplicateResponse(SourceDuplicateResponse&& from) noexcept
    : SourceDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline SourceDuplicateResponse& operator=(SourceDuplicateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceDuplicateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const SourceDuplicateResponse*>(
               &_SourceDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(SourceDuplicateResponse* other);
  friend void swap(SourceDuplicateResponse& a, SourceDuplicateResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceDuplicateResponse* New() const final {
    return CreateMaybeMessage<SourceDuplicateResponse>(NULL);
  }

  SourceDuplicateResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceDuplicateResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceDuplicateResponse& from);
  void MergeFrom(const SourceDuplicateResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceDuplicateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Source source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::proto::Source& _internal_source() const;
  public:
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);

  // @@protoc_insertion_point(class_scope:proto.SourceDuplicateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Source* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SourceSetPropertiesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.SourceSetPropertiesResponse) */ {
 public:
  SourceSetPropertiesResponse();
  virtual ~SourceSetPropertiesResponse();

  SourceSetPropertiesResponse(const SourceSetPropertiesResponse& from);

  inline SourceSetPropertiesResponse& operator=(const SourceSetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SourceSetPropertiesResponse(SourceSetPropertiesResponse&& from) noexcept
    : SourceSetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline SourceSetPropertiesResponse& operator=(SourceSetPropertiesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SourceSetPropertiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceSetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const SourceSetPropertiesResponse*>(
               &_SourceSetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(SourceSetPropertiesResponse* other);
  friend void swap(SourceSetPropertiesResponse& a, SourceSetPropertiesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SourceSetPropertiesResponse* New() const final {
    return CreateMaybeMessage<SourceSetPropertiesResponse>(NULL);
  }

  SourceSetPropertiesResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SourceSetPropertiesResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SourceSetPropertiesResponse& from);
  void MergeFrom(const SourceSetPropertiesResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceSetPropertiesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Source source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  private:
  const ::proto::Source& _internal_source() const;
  public:
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);

  // @@protoc_insertion_point(class_scope:proto.SourceSetPropertiesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::Source* source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HealthResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HealthResponse) */ {
 public:
  HealthResponse();
  virtual ~HealthResponse();

  HealthResponse(const HealthResponse& from);

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HealthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(HealthResponse* other);
  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HealthResponse* New() const final {
    return CreateMaybeMessage<HealthResponse>(NULL);
  }

  HealthResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HealthResponse& from);
  void MergeFrom(const HealthResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto.HealthResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 timestamp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_studio_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StudioState

// string active_show_id = 1;
inline void StudioState::clear_active_show_id() {
  active_show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StudioState::active_show_id() const {
  // @@protoc_insertion_point(field_get:proto.StudioState.active_show_id)
  return active_show_id_.GetNoArena();
}
inline void StudioState::set_active_show_id(const ::std::string& value) {
  
  active_show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.StudioState.active_show_id)
}
#if LANG_CXX11
inline void StudioState::set_active_show_id(::std::string&& value) {
  
  active_show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.StudioState.active_show_id)
}
#endif
inline void StudioState::set_active_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  active_show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.StudioState.active_show_id)
}
inline void StudioState::set_active_show_id(const char* value, size_t size) {
  
  active_show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.StudioState.active_show_id)
}
inline ::std::string* StudioState::mutable_active_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.StudioState.active_show_id)
  return active_show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StudioState::release_active_show_id() {
  // @@protoc_insertion_point(field_release:proto.StudioState.active_show_id)
  
  return active_show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StudioState::set_allocated_active_show_id(::std::string* active_show_id) {
  if (active_show_id != NULL) {
    
  } else {
    
  }
  active_show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), active_show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.StudioState.active_show_id)
}

// repeated .proto.Show shows = 2;
inline int StudioState::shows_size() const {
  return shows_.size();
}
inline void StudioState::clear_shows() {
  shows_.Clear();
}
inline ::proto::Show* StudioState::mutable_shows(int index) {
  // @@protoc_insertion_point(field_mutable:proto.StudioState.shows)
  return shows_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Show >*
StudioState::mutable_shows() {
  // @@protoc_insertion_point(field_mutable_list:proto.StudioState.shows)
  return &shows_;
}
inline const ::proto::Show& StudioState::shows(int index) const {
  // @@protoc_insertion_point(field_get:proto.StudioState.shows)
  return shows_.Get(index);
}
inline ::proto::Show* StudioState::add_shows() {
  // @@protoc_insertion_point(field_add:proto.StudioState.shows)
  return shows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Show >&
StudioState::shows() const {
  // @@protoc_insertion_point(field_list:proto.StudioState.shows)
  return shows_;
}

// -------------------------------------------------------------------

// Show

// string id = 1;
inline void Show::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Show::id() const {
  // @@protoc_insertion_point(field_get:proto.Show.id)
  return id_.GetNoArena();
}
inline void Show::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Show.id)
}
#if LANG_CXX11
inline void Show::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Show.id)
}
#endif
inline void Show::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Show.id)
}
inline void Show::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Show.id)
}
inline ::std::string* Show::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.Show.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Show::release_id() {
  // @@protoc_insertion_point(field_release:proto.Show.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Show::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:proto.Show.id)
}

// string name = 2;
inline void Show::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Show::name() const {
  // @@protoc_insertion_point(field_get:proto.Show.name)
  return name_.GetNoArena();
}
inline void Show::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Show.name)
}
#if LANG_CXX11
inline void Show::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Show.name)
}
#endif
inline void Show::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Show.name)
}
inline void Show::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Show.name)
}
inline ::std::string* Show::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Show.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Show::release_name() {
  // @@protoc_insertion_point(field_release:proto.Show.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Show::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Show.name)
}

// string active_scene_id = 3;
inline void Show::clear_active_scene_id() {
  active_scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Show::active_scene_id() const {
  // @@protoc_insertion_point(field_get:proto.Show.active_scene_id)
  return active_scene_id_.GetNoArena();
}
inline void Show::set_active_scene_id(const ::std::string& value) {
  
  active_scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Show.active_scene_id)
}
#if LANG_CXX11
inline void Show::set_active_scene_id(::std::string&& value) {
  
  active_scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Show.active_scene_id)
}
#endif
inline void Show::set_active_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  active_scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Show.active_scene_id)
}
inline void Show::set_active_scene_id(const char* value, size_t size) {
  
  active_scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Show.active_scene_id)
}
inline ::std::string* Show::mutable_active_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.Show.active_scene_id)
  return active_scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Show::release_active_scene_id() {
  // @@protoc_insertion_point(field_release:proto.Show.active_scene_id)
  
  return active_scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Show::set_allocated_active_scene_id(::std::string* active_scene_id) {
  if (active_scene_id != NULL) {
    
  } else {
    
  }
  active_scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), active_scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.Show.active_scene_id)
}

// repeated .proto.Scene scenes = 4;
inline int Show::scenes_size() const {
  return scenes_.size();
}
inline void Show::clear_scenes() {
  scenes_.Clear();
}
inline ::proto::Scene* Show::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Show.scenes)
  return scenes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Scene >*
Show::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:proto.Show.scenes)
  return &scenes_;
}
inline const ::proto::Scene& Show::scenes(int index) const {
  // @@protoc_insertion_point(field_get:proto.Show.scenes)
  return scenes_.Get(index);
}
inline ::proto::Scene* Show::add_scenes() {
  // @@protoc_insertion_point(field_add:proto.Show.scenes)
  return scenes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Scene >&
Show::scenes() const {
  // @@protoc_insertion_point(field_list:proto.Show.scenes)
  return scenes_;
}

// -------------------------------------------------------------------

// Scene

// string id = 1;
inline void Scene::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scene::id() const {
  // @@protoc_insertion_point(field_get:proto.Scene.id)
  return id_.GetNoArena();
}
inline void Scene::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Scene.id)
}
#if LANG_CXX11
inline void Scene::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Scene.id)
}
#endif
inline void Scene::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Scene.id)
}
inline void Scene::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Scene.id)
}
inline ::std::string* Scene::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.Scene.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scene::release_id() {
  // @@protoc_insertion_point(field_release:proto.Scene.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scene::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:proto.Scene.id)
}

// string name = 2;
inline void Scene::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scene::name() const {
  // @@protoc_insertion_point(field_get:proto.Scene.name)
  return name_.GetNoArena();
}
inline void Scene::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Scene.name)
}
#if LANG_CXX11
inline void Scene::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Scene.name)
}
#endif
inline void Scene::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Scene.name)
}
inline void Scene::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Scene.name)
}
inline ::std::string* Scene::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Scene.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scene::release_name() {
  // @@protoc_insertion_point(field_release:proto.Scene.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scene::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Scene.name)
}

// string active_source_id = 3;
inline void Scene::clear_active_source_id() {
  active_source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Scene::active_source_id() const {
  // @@protoc_insertion_point(field_get:proto.Scene.active_source_id)
  return active_source_id_.GetNoArena();
}
inline void Scene::set_active_source_id(const ::std::string& value) {
  
  active_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Scene.active_source_id)
}
#if LANG_CXX11
inline void Scene::set_active_source_id(::std::string&& value) {
  
  active_source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Scene.active_source_id)
}
#endif
inline void Scene::set_active_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  active_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Scene.active_source_id)
}
inline void Scene::set_active_source_id(const char* value, size_t size) {
  
  active_source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Scene.active_source_id)
}
inline ::std::string* Scene::mutable_active_source_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.Scene.active_source_id)
  return active_source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Scene::release_active_source_id() {
  // @@protoc_insertion_point(field_release:proto.Scene.active_source_id)
  
  return active_source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Scene::set_allocated_active_source_id(::std::string* active_source_id) {
  if (active_source_id != NULL) {
    
  } else {
    
  }
  active_source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), active_source_id);
  // @@protoc_insertion_point(field_set_allocated:proto.Scene.active_source_id)
}

// repeated .proto.Source sources = 4;
inline int Scene::sources_size() const {
  return sources_.size();
}
inline void Scene::clear_sources() {
  sources_.Clear();
}
inline ::proto::Source* Scene::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Scene.sources)
  return sources_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Source >*
Scene::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:proto.Scene.sources)
  return &sources_;
}
inline const ::proto::Source& Scene::sources(int index) const {
  // @@protoc_insertion_point(field_get:proto.Scene.sources)
  return sources_.Get(index);
}
inline ::proto::Source* Scene::add_sources() {
  // @@protoc_insertion_point(field_add:proto.Scene.sources)
  return sources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Source >&
Scene::sources() const {
  // @@protoc_insertion_point(field_list:proto.Scene.sources)
  return sources_;
}

// -------------------------------------------------------------------

// Source

// string id = 1;
inline void Source::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::id() const {
  // @@protoc_insertion_point(field_get:proto.Source.id)
  return id_.GetNoArena();
}
inline void Source::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Source.id)
}
#if LANG_CXX11
inline void Source::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.id)
}
#endif
inline void Source::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Source.id)
}
inline void Source::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Source.id)
}
inline ::std::string* Source::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.Source.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_id() {
  // @@protoc_insertion_point(field_release:proto.Source.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:proto.Source.id)
}

// string name = 2;
inline void Source::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::name() const {
  // @@protoc_insertion_point(field_get:proto.Source.name)
  return name_.GetNoArena();
}
inline void Source::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Source.name)
}
#if LANG_CXX11
inline void Source::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.name)
}
#endif
inline void Source::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Source.name)
}
inline void Source::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Source.name)
}
inline ::std::string* Source::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Source.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_name() {
  // @@protoc_insertion_point(field_release:proto.Source.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.Source.name)
}

// string type = 3;
inline void Source::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::type() const {
  // @@protoc_insertion_point(field_get:proto.Source.type)
  return type_.GetNoArena();
}
inline void Source::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Source.type)
}
#if LANG_CXX11
inline void Source::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.type)
}
#endif
inline void Source::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Source.type)
}
inline void Source::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Source.type)
}
inline ::std::string* Source::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.Source.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_type() {
  // @@protoc_insertion_point(field_release:proto.Source.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.Source.type)
}

// string url = 4;
inline void Source::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Source::url() const {
  // @@protoc_insertion_point(field_get:proto.Source.url)
  return url_.GetNoArena();
}
inline void Source::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Source.url)
}
#if LANG_CXX11
inline void Source::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.url)
}
#endif
inline void Source::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Source.url)
}
inline void Source::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Source.url)
}
inline ::std::string* Source::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.Source.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Source::release_url() {
  // @@protoc_insertion_point(field_release:proto.Source.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Source::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:proto.Source.url)
}

// -------------------------------------------------------------------

// ShowGetRequest

// string show_id = 1;
inline void ShowGetRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowGetRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowGetRequest.show_id)
  return show_id_.GetNoArena();
}
inline void ShowGetRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShowGetRequest.show_id)
}
#if LANG_CXX11
inline void ShowGetRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowGetRequest.show_id)
}
#endif
inline void ShowGetRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShowGetRequest.show_id)
}
inline void ShowGetRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShowGetRequest.show_id)
}
inline ::std::string* ShowGetRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShowGetRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowGetRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.ShowGetRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowGetRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ShowGetRequest.show_id)
}

// -------------------------------------------------------------------

// ShowCreateRequest

// string show_name = 1;
inline void ShowCreateRequest::clear_show_name() {
  show_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowCreateRequest::show_name() const {
  // @@protoc_insertion_point(field_get:proto.ShowCreateRequest.show_name)
  return show_name_.GetNoArena();
}
inline void ShowCreateRequest::set_show_name(const ::std::string& value) {
  
  show_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShowCreateRequest.show_name)
}
#if LANG_CXX11
inline void ShowCreateRequest::set_show_name(::std::string&& value) {
  
  show_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowCreateRequest.show_name)
}
#endif
inline void ShowCreateRequest::set_show_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShowCreateRequest.show_name)
}
inline void ShowCreateRequest::set_show_name(const char* value, size_t size) {
  
  show_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShowCreateRequest.show_name)
}
inline ::std::string* ShowCreateRequest::mutable_show_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShowCreateRequest.show_name)
  return show_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowCreateRequest::release_show_name() {
  // @@protoc_insertion_point(field_release:proto.ShowCreateRequest.show_name)
  
  return show_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowCreateRequest::set_allocated_show_name(::std::string* show_name) {
  if (show_name != NULL) {
    
  } else {
    
  }
  show_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_name);
  // @@protoc_insertion_point(field_set_allocated:proto.ShowCreateRequest.show_name)
}

// -------------------------------------------------------------------

// ShowDuplicateRequest

// string show_id = 1;
inline void ShowDuplicateRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowDuplicateRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowDuplicateRequest.show_id)
  return show_id_.GetNoArena();
}
inline void ShowDuplicateRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShowDuplicateRequest.show_id)
}
#if LANG_CXX11
inline void ShowDuplicateRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowDuplicateRequest.show_id)
}
#endif
inline void ShowDuplicateRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShowDuplicateRequest.show_id)
}
inline void ShowDuplicateRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShowDuplicateRequest.show_id)
}
inline ::std::string* ShowDuplicateRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShowDuplicateRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowDuplicateRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.ShowDuplicateRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowDuplicateRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ShowDuplicateRequest.show_id)
}

// -------------------------------------------------------------------

// ShowRemoveRequest

// string show_id = 1;
inline void ShowRemoveRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowRemoveRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowRemoveRequest.show_id)
  return show_id_.GetNoArena();
}
inline void ShowRemoveRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShowRemoveRequest.show_id)
}
#if LANG_CXX11
inline void ShowRemoveRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowRemoveRequest.show_id)
}
#endif
inline void ShowRemoveRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShowRemoveRequest.show_id)
}
inline void ShowRemoveRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShowRemoveRequest.show_id)
}
inline ::std::string* ShowRemoveRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShowRemoveRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowRemoveRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.ShowRemoveRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowRemoveRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ShowRemoveRequest.show_id)
}

// -------------------------------------------------------------------

// ShowLoadRequest

// string show_path = 1;
inline void ShowLoadRequest::clear_show_path() {
  show_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ShowLoadRequest::show_path() const {
  // @@protoc_insertion_point(field_get:proto.ShowLoadRequest.show_path)
  return show_path_.GetNoArena();
}
inline void ShowLoadRequest::set_show_path(const ::std::string& value) {
  
  show_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ShowLoadRequest.show_path)
}
#if LANG_CXX11
inline void ShowLoadRequest::set_show_path(::std::string&& value) {
  
  show_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowLoadRequest.show_path)
}
#endif
inline void ShowLoadRequest::set_show_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ShowLoadRequest.show_path)
}
inline void ShowLoadRequest::set_show_path(const char* value, size_t size) {
  
  show_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ShowLoadRequest.show_path)
}
inline ::std::string* ShowLoadRequest::mutable_show_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.ShowLoadRequest.show_path)
  return show_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowLoadRequest::release_show_path() {
  // @@protoc_insertion_point(field_release:proto.ShowLoadRequest.show_path)
  
  return show_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowLoadRequest::set_allocated_show_path(::std::string* show_path) {
  if (show_path != NULL) {
    
  } else {
    
  }
  show_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_path);
  // @@protoc_insertion_point(field_set_allocated:proto.ShowLoadRequest.show_path)
}

// -------------------------------------------------------------------

// SceneGetRequest

// string show_id = 1;
inline void SceneGetRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneGetRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SceneGetRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneGetRequest.show_id)
}
#if LANG_CXX11
inline void SceneGetRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetRequest.show_id)
}
#endif
inline void SceneGetRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneGetRequest.show_id)
}
inline void SceneGetRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetRequest.show_id)
}
inline ::std::string* SceneGetRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneGetRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneGetRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneGetRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetRequest.show_id)
}

// string scene_id = 2;
inline void SceneGetRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneGetRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SceneGetRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneGetRequest.scene_id)
}
#if LANG_CXX11
inline void SceneGetRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetRequest.scene_id)
}
#endif
inline void SceneGetRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneGetRequest.scene_id)
}
inline void SceneGetRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetRequest.scene_id)
}
inline ::std::string* SceneGetRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneGetRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneGetRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneGetRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneAddRequest

// string show_id = 1;
inline void SceneAddRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneAddRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAddRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SceneAddRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneAddRequest.show_id)
}
#if LANG_CXX11
inline void SceneAddRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneAddRequest.show_id)
}
#endif
inline void SceneAddRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneAddRequest.show_id)
}
inline void SceneAddRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneAddRequest.show_id)
}
inline ::std::string* SceneAddRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneAddRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneAddRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneAddRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneAddRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAddRequest.show_id)
}

// string scene_name = 2;
inline void SceneAddRequest::clear_scene_name() {
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneAddRequest::scene_name() const {
  // @@protoc_insertion_point(field_get:proto.SceneAddRequest.scene_name)
  return scene_name_.GetNoArena();
}
inline void SceneAddRequest::set_scene_name(const ::std::string& value) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneAddRequest.scene_name)
}
#if LANG_CXX11
inline void SceneAddRequest::set_scene_name(::std::string&& value) {
  
  scene_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneAddRequest.scene_name)
}
#endif
inline void SceneAddRequest::set_scene_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneAddRequest.scene_name)
}
inline void SceneAddRequest::set_scene_name(const char* value, size_t size) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneAddRequest.scene_name)
}
inline ::std::string* SceneAddRequest::mutable_scene_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneAddRequest.scene_name)
  return scene_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneAddRequest::release_scene_name() {
  // @@protoc_insertion_point(field_release:proto.SceneAddRequest.scene_name)
  
  return scene_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneAddRequest::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name != NULL) {
    
  } else {
    
  }
  scene_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_name);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAddRequest.scene_name)
}

// -------------------------------------------------------------------

// SceneDuplicateRequest

// string show_id = 1;
inline void SceneDuplicateRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneDuplicateRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneDuplicateRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SceneDuplicateRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneDuplicateRequest.show_id)
}
#if LANG_CXX11
inline void SceneDuplicateRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneDuplicateRequest.show_id)
}
#endif
inline void SceneDuplicateRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneDuplicateRequest.show_id)
}
inline void SceneDuplicateRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneDuplicateRequest.show_id)
}
inline ::std::string* SceneDuplicateRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneDuplicateRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneDuplicateRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneDuplicateRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneDuplicateRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneDuplicateRequest.show_id)
}

// string scene_id = 2;
inline void SceneDuplicateRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneDuplicateRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneDuplicateRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SceneDuplicateRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneDuplicateRequest.scene_id)
}
#if LANG_CXX11
inline void SceneDuplicateRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneDuplicateRequest.scene_id)
}
#endif
inline void SceneDuplicateRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneDuplicateRequest.scene_id)
}
inline void SceneDuplicateRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneDuplicateRequest.scene_id)
}
inline ::std::string* SceneDuplicateRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneDuplicateRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneDuplicateRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneDuplicateRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneDuplicateRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneDuplicateRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneRemoveRequest

// string show_id = 1;
inline void SceneRemoveRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneRemoveRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneRemoveRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SceneRemoveRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneRemoveRequest.show_id)
}
#if LANG_CXX11
inline void SceneRemoveRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneRemoveRequest.show_id)
}
#endif
inline void SceneRemoveRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneRemoveRequest.show_id)
}
inline void SceneRemoveRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneRemoveRequest.show_id)
}
inline ::std::string* SceneRemoveRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneRemoveRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneRemoveRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneRemoveRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneRemoveRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneRemoveRequest.show_id)
}

// string scene_id = 2;
inline void SceneRemoveRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneRemoveRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneRemoveRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SceneRemoveRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneRemoveRequest.scene_id)
}
#if LANG_CXX11
inline void SceneRemoveRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneRemoveRequest.scene_id)
}
#endif
inline void SceneRemoveRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneRemoveRequest.scene_id)
}
inline void SceneRemoveRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneRemoveRequest.scene_id)
}
inline ::std::string* SceneRemoveRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneRemoveRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneRemoveRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneRemoveRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneRemoveRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneRemoveRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneSetAsCurrentRequest

// string show_id = 1;
inline void SceneSetAsCurrentRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneSetAsCurrentRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneSetAsCurrentRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SceneSetAsCurrentRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneSetAsCurrentRequest.show_id)
}
#if LANG_CXX11
inline void SceneSetAsCurrentRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneSetAsCurrentRequest.show_id)
}
#endif
inline void SceneSetAsCurrentRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneSetAsCurrentRequest.show_id)
}
inline void SceneSetAsCurrentRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneSetAsCurrentRequest.show_id)
}
inline ::std::string* SceneSetAsCurrentRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneSetAsCurrentRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneSetAsCurrentRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneSetAsCurrentRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneSetAsCurrentRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneSetAsCurrentRequest.show_id)
}

// string scene_id = 2;
inline void SceneSetAsCurrentRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneSetAsCurrentRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneSetAsCurrentRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SceneSetAsCurrentRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneSetAsCurrentRequest.scene_id)
}
#if LANG_CXX11
inline void SceneSetAsCurrentRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneSetAsCurrentRequest.scene_id)
}
#endif
inline void SceneSetAsCurrentRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneSetAsCurrentRequest.scene_id)
}
inline void SceneSetAsCurrentRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneSetAsCurrentRequest.scene_id)
}
inline ::std::string* SceneSetAsCurrentRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneSetAsCurrentRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneSetAsCurrentRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneSetAsCurrentRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneSetAsCurrentRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneSetAsCurrentRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneGetCurrentRequest

// string show_id = 1;
inline void SceneGetCurrentRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneGetCurrentRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetCurrentRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SceneGetCurrentRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneGetCurrentRequest.show_id)
}
#if LANG_CXX11
inline void SceneGetCurrentRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetCurrentRequest.show_id)
}
#endif
inline void SceneGetCurrentRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneGetCurrentRequest.show_id)
}
inline void SceneGetCurrentRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetCurrentRequest.show_id)
}
inline ::std::string* SceneGetCurrentRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneGetCurrentRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneGetCurrentRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetCurrentRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneGetCurrentRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetCurrentRequest.show_id)
}

// -------------------------------------------------------------------

// SourceGetRequest

// string show_id = 1;
inline void SourceGetRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceGetRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SourceGetRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceGetRequest.show_id)
}
#if LANG_CXX11
inline void SourceGetRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceGetRequest.show_id)
}
#endif
inline void SourceGetRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceGetRequest.show_id)
}
inline void SourceGetRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceGetRequest.show_id)
}
inline ::std::string* SourceGetRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceGetRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceGetRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceGetRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceGetRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetRequest.show_id)
}

// string scene_id = 2;
inline void SourceGetRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceGetRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SourceGetRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceGetRequest.scene_id)
}
#if LANG_CXX11
inline void SourceGetRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceGetRequest.scene_id)
}
#endif
inline void SourceGetRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceGetRequest.scene_id)
}
inline void SourceGetRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceGetRequest.scene_id)
}
inline ::std::string* SourceGetRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceGetRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceGetRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceGetRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceGetRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetRequest.scene_id)
}

// string source_id = 3;
inline void SourceGetRequest::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceGetRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetRequest.source_id)
  return source_id_.GetNoArena();
}
inline void SourceGetRequest::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceGetRequest.source_id)
}
#if LANG_CXX11
inline void SourceGetRequest::set_source_id(::std::string&& value) {
  
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceGetRequest.source_id)
}
#endif
inline void SourceGetRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceGetRequest.source_id)
}
inline void SourceGetRequest::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceGetRequest.source_id)
}
inline ::std::string* SourceGetRequest::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceGetRequest.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceGetRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceGetRequest.source_id)
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceGetRequest::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetRequest.source_id)
}

// -------------------------------------------------------------------

// SourceAddRequest

// string show_id = 1;
inline void SourceAddRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceAddRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SourceAddRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.show_id)
}
#if LANG_CXX11
inline void SourceAddRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.show_id)
}
#endif
inline void SourceAddRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.show_id)
}
inline void SourceAddRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.show_id)
}
inline ::std::string* SourceAddRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceAddRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceAddRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.show_id)
}

// string scene_id = 2;
inline void SourceAddRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceAddRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SourceAddRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.scene_id)
}
#if LANG_CXX11
inline void SourceAddRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.scene_id)
}
#endif
inline void SourceAddRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.scene_id)
}
inline void SourceAddRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.scene_id)
}
inline ::std::string* SourceAddRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceAddRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceAddRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.scene_id)
}

// string source_name = 3;
inline void SourceAddRequest::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceAddRequest::source_name() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.source_name)
  return source_name_.GetNoArena();
}
inline void SourceAddRequest::set_source_name(const ::std::string& value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.source_name)
}
#if LANG_CXX11
inline void SourceAddRequest::set_source_name(::std::string&& value) {
  
  source_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.source_name)
}
#endif
inline void SourceAddRequest::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.source_name)
}
inline void SourceAddRequest::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.source_name)
}
inline ::std::string* SourceAddRequest::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceAddRequest::release_source_name() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.source_name)
  
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceAddRequest::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.source_name)
}

// string source_type = 4;
inline void SourceAddRequest::clear_source_type() {
  source_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceAddRequest::source_type() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.source_type)
  return source_type_.GetNoArena();
}
inline void SourceAddRequest::set_source_type(const ::std::string& value) {
  
  source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.source_type)
}
#if LANG_CXX11
inline void SourceAddRequest::set_source_type(::std::string&& value) {
  
  source_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.source_type)
}
#endif
inline void SourceAddRequest::set_source_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.source_type)
}
inline void SourceAddRequest::set_source_type(const char* value, size_t size) {
  
  source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.source_type)
}
inline ::std::string* SourceAddRequest::mutable_source_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.source_type)
  return source_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceAddRequest::release_source_type() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.source_type)
  
  return source_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceAddRequest::set_allocated_source_type(::std::string* source_type) {
  if (source_type != NULL) {
    
  } else {
    
  }
  source_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_type);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.source_type)
}

// string source_url = 5;
inline void SourceAddRequest::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceAddRequest::source_url() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.source_url)
  return source_url_.GetNoArena();
}
inline void SourceAddRequest::set_source_url(const ::std::string& value) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.source_url)
}
#if LANG_CXX11
inline void SourceAddRequest::set_source_url(::std::string&& value) {
  
  source_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.source_url)
}
#endif
inline void SourceAddRequest::set_source_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.source_url)
}
inline void SourceAddRequest::set_source_url(const char* value, size_t size) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.source_url)
}
inline ::std::string* SourceAddRequest::mutable_source_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceAddRequest::release_source_url() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.source_url)
  
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceAddRequest::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    
  } else {
    
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.source_url)
}

// -------------------------------------------------------------------

// SourceDuplicateRequest

// string show_id = 1;
inline void SourceDuplicateRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceDuplicateRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SourceDuplicateRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceDuplicateRequest.show_id)
}
#if LANG_CXX11
inline void SourceDuplicateRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceDuplicateRequest.show_id)
}
#endif
inline void SourceDuplicateRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceDuplicateRequest.show_id)
}
inline void SourceDuplicateRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceDuplicateRequest.show_id)
}
inline ::std::string* SourceDuplicateRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceDuplicateRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceDuplicateRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateRequest.show_id)
}

// string scene_id = 2;
inline void SourceDuplicateRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceDuplicateRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SourceDuplicateRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceDuplicateRequest.scene_id)
}
#if LANG_CXX11
inline void SourceDuplicateRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceDuplicateRequest.scene_id)
}
#endif
inline void SourceDuplicateRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceDuplicateRequest.scene_id)
}
inline void SourceDuplicateRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceDuplicateRequest.scene_id)
}
inline ::std::string* SourceDuplicateRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceDuplicateRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceDuplicateRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateRequest.scene_id)
}

// string source_id = 3;
inline void SourceDuplicateRequest::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceDuplicateRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateRequest.source_id)
  return source_id_.GetNoArena();
}
inline void SourceDuplicateRequest::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceDuplicateRequest.source_id)
}
#if LANG_CXX11
inline void SourceDuplicateRequest::set_source_id(::std::string&& value) {
  
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceDuplicateRequest.source_id)
}
#endif
inline void SourceDuplicateRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceDuplicateRequest.source_id)
}
inline void SourceDuplicateRequest::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceDuplicateRequest.source_id)
}
inline ::std::string* SourceDuplicateRequest::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateRequest.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceDuplicateRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateRequest.source_id)
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceDuplicateRequest::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateRequest.source_id)
}

// -------------------------------------------------------------------

// SourceRemoveRequest

// string show_id = 1;
inline void SourceRemoveRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceRemoveRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceRemoveRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SourceRemoveRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceRemoveRequest.show_id)
}
#if LANG_CXX11
inline void SourceRemoveRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceRemoveRequest.show_id)
}
#endif
inline void SourceRemoveRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceRemoveRequest.show_id)
}
inline void SourceRemoveRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceRemoveRequest.show_id)
}
inline ::std::string* SourceRemoveRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceRemoveRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRemoveRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceRemoveRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceRemoveRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceRemoveRequest.show_id)
}

// string scene_id = 2;
inline void SourceRemoveRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceRemoveRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceRemoveRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SourceRemoveRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceRemoveRequest.scene_id)
}
#if LANG_CXX11
inline void SourceRemoveRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceRemoveRequest.scene_id)
}
#endif
inline void SourceRemoveRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceRemoveRequest.scene_id)
}
inline void SourceRemoveRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceRemoveRequest.scene_id)
}
inline ::std::string* SourceRemoveRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceRemoveRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRemoveRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceRemoveRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceRemoveRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceRemoveRequest.scene_id)
}

// string source_id = 3;
inline void SourceRemoveRequest::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceRemoveRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceRemoveRequest.source_id)
  return source_id_.GetNoArena();
}
inline void SourceRemoveRequest::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceRemoveRequest.source_id)
}
#if LANG_CXX11
inline void SourceRemoveRequest::set_source_id(::std::string&& value) {
  
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceRemoveRequest.source_id)
}
#endif
inline void SourceRemoveRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceRemoveRequest.source_id)
}
inline void SourceRemoveRequest::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceRemoveRequest.source_id)
}
inline ::std::string* SourceRemoveRequest::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceRemoveRequest.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceRemoveRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceRemoveRequest.source_id)
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceRemoveRequest::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceRemoveRequest.source_id)
}

// -------------------------------------------------------------------

// SourceSetPropertiesRequest

// string show_id = 1;
inline void SourceSetPropertiesRequest::clear_show_id() {
  show_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceSetPropertiesRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.show_id)
  return show_id_.GetNoArena();
}
inline void SourceSetPropertiesRequest::set_show_id(const ::std::string& value) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.show_id)
}
#if LANG_CXX11
inline void SourceSetPropertiesRequest::set_show_id(::std::string&& value) {
  
  show_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.show_id)
}
#endif
inline void SourceSetPropertiesRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.show_id)
}
inline void SourceSetPropertiesRequest::set_show_id(const char* value, size_t size) {
  
  show_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.show_id)
}
inline ::std::string* SourceSetPropertiesRequest::mutable_show_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.show_id)
  return show_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceSetPropertiesRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.show_id)
  
  return show_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceSetPropertiesRequest::set_allocated_show_id(::std::string* show_id) {
  if (show_id != NULL) {
    
  } else {
    
  }
  show_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), show_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.show_id)
}

// string scene_id = 2;
inline void SourceSetPropertiesRequest::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceSetPropertiesRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.scene_id)
  return scene_id_.GetNoArena();
}
inline void SourceSetPropertiesRequest::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.scene_id)
}
#if LANG_CXX11
inline void SourceSetPropertiesRequest::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.scene_id)
}
#endif
inline void SourceSetPropertiesRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.scene_id)
}
inline void SourceSetPropertiesRequest::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.scene_id)
}
inline ::std::string* SourceSetPropertiesRequest::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceSetPropertiesRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceSetPropertiesRequest::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.scene_id)
}

// string source_id = 3;
inline void SourceSetPropertiesRequest::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceSetPropertiesRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.source_id)
  return source_id_.GetNoArena();
}
inline void SourceSetPropertiesRequest::set_source_id(const ::std::string& value) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.source_id)
}
#if LANG_CXX11
inline void SourceSetPropertiesRequest::set_source_id(::std::string&& value) {
  
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.source_id)
}
#endif
inline void SourceSetPropertiesRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.source_id)
}
inline void SourceSetPropertiesRequest::set_source_id(const char* value, size_t size) {
  
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.source_id)
}
inline ::std::string* SourceSetPropertiesRequest::mutable_source_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceSetPropertiesRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.source_id)
  
  return source_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceSetPropertiesRequest::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    
  } else {
    
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.source_id)
}

// string source_type = 4;
inline void SourceSetPropertiesRequest::clear_source_type() {
  source_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceSetPropertiesRequest::source_type() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.source_type)
  return source_type_.GetNoArena();
}
inline void SourceSetPropertiesRequest::set_source_type(const ::std::string& value) {
  
  source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.source_type)
}
#if LANG_CXX11
inline void SourceSetPropertiesRequest::set_source_type(::std::string&& value) {
  
  source_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.source_type)
}
#endif
inline void SourceSetPropertiesRequest::set_source_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.source_type)
}
inline void SourceSetPropertiesRequest::set_source_type(const char* value, size_t size) {
  
  source_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.source_type)
}
inline ::std::string* SourceSetPropertiesRequest::mutable_source_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.source_type)
  return source_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceSetPropertiesRequest::release_source_type() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.source_type)
  
  return source_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceSetPropertiesRequest::set_allocated_source_type(::std::string* source_type) {
  if (source_type != NULL) {
    
  } else {
    
  }
  source_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_type);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.source_type)
}

// string source_url = 5;
inline void SourceSetPropertiesRequest::clear_source_url() {
  source_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SourceSetPropertiesRequest::source_url() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.source_url)
  return source_url_.GetNoArena();
}
inline void SourceSetPropertiesRequest::set_source_url(const ::std::string& value) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.source_url)
}
#if LANG_CXX11
inline void SourceSetPropertiesRequest::set_source_url(::std::string&& value) {
  
  source_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.source_url)
}
#endif
inline void SourceSetPropertiesRequest::set_source_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.source_url)
}
inline void SourceSetPropertiesRequest::set_source_url(const char* value, size_t size) {
  
  source_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.source_url)
}
inline ::std::string* SourceSetPropertiesRequest::mutable_source_url() {
  
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.source_url)
  return source_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SourceSetPropertiesRequest::release_source_url() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.source_url)
  
  return source_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SourceSetPropertiesRequest::set_allocated_source_url(::std::string* source_url) {
  if (source_url != NULL) {
    
  } else {
    
  }
  source_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_url);
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.source_url)
}

// -------------------------------------------------------------------

// StudioGetResponse

// .proto.StudioState studio = 1;
inline bool StudioGetResponse::has_studio() const {
  return this != internal_default_instance() && studio_ != NULL;
}
inline void StudioGetResponse::clear_studio() {
  if (GetArenaNoVirtual() == NULL && studio_ != NULL) {
    delete studio_;
  }
  studio_ = NULL;
}
inline const ::proto::StudioState& StudioGetResponse::_internal_studio() const {
  return *studio_;
}
inline const ::proto::StudioState& StudioGetResponse::studio() const {
  const ::proto::StudioState* p = studio_;
  // @@protoc_insertion_point(field_get:proto.StudioGetResponse.studio)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::StudioState*>(
      &::proto::_StudioState_default_instance_);
}
inline ::proto::StudioState* StudioGetResponse::release_studio() {
  // @@protoc_insertion_point(field_release:proto.StudioGetResponse.studio)
  
  ::proto::StudioState* temp = studio_;
  studio_ = NULL;
  return temp;
}
inline ::proto::StudioState* StudioGetResponse::mutable_studio() {
  
  if (studio_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::StudioState>(GetArenaNoVirtual());
    studio_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.StudioGetResponse.studio)
  return studio_;
}
inline void StudioGetResponse::set_allocated_studio(::proto::StudioState* studio) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete studio_;
  }
  if (studio) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      studio = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, studio, submessage_arena);
    }
    
  } else {
    
  }
  studio_ = studio;
  // @@protoc_insertion_point(field_set_allocated:proto.StudioGetResponse.studio)
}

// -------------------------------------------------------------------

// ShowGetResponse

// .proto.Show show = 1;
inline bool ShowGetResponse::has_show() const {
  return this != internal_default_instance() && show_ != NULL;
}
inline void ShowGetResponse::clear_show() {
  if (GetArenaNoVirtual() == NULL && show_ != NULL) {
    delete show_;
  }
  show_ = NULL;
}
inline const ::proto::Show& ShowGetResponse::_internal_show() const {
  return *show_;
}
inline const ::proto::Show& ShowGetResponse::show() const {
  const ::proto::Show* p = show_;
  // @@protoc_insertion_point(field_get:proto.ShowGetResponse.show)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline ::proto::Show* ShowGetResponse::release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowGetResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = NULL;
  return temp;
}
inline ::proto::Show* ShowGetResponse::mutable_show() {
  
  if (show_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowGetResponse.show)
  return show_;
}
inline void ShowGetResponse::set_allocated_show(::proto::Show* show) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_;
  }
  if (show) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowGetResponse.show)
}

// -------------------------------------------------------------------

// ShowCreateResponse

// .proto.Show show = 1;
inline bool ShowCreateResponse::has_show() const {
  return this != internal_default_instance() && show_ != NULL;
}
inline void ShowCreateResponse::clear_show() {
  if (GetArenaNoVirtual() == NULL && show_ != NULL) {
    delete show_;
  }
  show_ = NULL;
}
inline const ::proto::Show& ShowCreateResponse::_internal_show() const {
  return *show_;
}
inline const ::proto::Show& ShowCreateResponse::show() const {
  const ::proto::Show* p = show_;
  // @@protoc_insertion_point(field_get:proto.ShowCreateResponse.show)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline ::proto::Show* ShowCreateResponse::release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowCreateResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = NULL;
  return temp;
}
inline ::proto::Show* ShowCreateResponse::mutable_show() {
  
  if (show_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowCreateResponse.show)
  return show_;
}
inline void ShowCreateResponse::set_allocated_show(::proto::Show* show) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_;
  }
  if (show) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowCreateResponse.show)
}

// -------------------------------------------------------------------

// ShowDuplicateResponse

// .proto.Show show = 1;
inline bool ShowDuplicateResponse::has_show() const {
  return this != internal_default_instance() && show_ != NULL;
}
inline void ShowDuplicateResponse::clear_show() {
  if (GetArenaNoVirtual() == NULL && show_ != NULL) {
    delete show_;
  }
  show_ = NULL;
}
inline const ::proto::Show& ShowDuplicateResponse::_internal_show() const {
  return *show_;
}
inline const ::proto::Show& ShowDuplicateResponse::show() const {
  const ::proto::Show* p = show_;
  // @@protoc_insertion_point(field_get:proto.ShowDuplicateResponse.show)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline ::proto::Show* ShowDuplicateResponse::release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowDuplicateResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = NULL;
  return temp;
}
inline ::proto::Show* ShowDuplicateResponse::mutable_show() {
  
  if (show_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowDuplicateResponse.show)
  return show_;
}
inline void ShowDuplicateResponse::set_allocated_show(::proto::Show* show) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_;
  }
  if (show) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowDuplicateResponse.show)
}

// -------------------------------------------------------------------

// ShowLoadResponse

// .proto.Show show = 1;
inline bool ShowLoadResponse::has_show() const {
  return this != internal_default_instance() && show_ != NULL;
}
inline void ShowLoadResponse::clear_show() {
  if (GetArenaNoVirtual() == NULL && show_ != NULL) {
    delete show_;
  }
  show_ = NULL;
}
inline const ::proto::Show& ShowLoadResponse::_internal_show() const {
  return *show_;
}
inline const ::proto::Show& ShowLoadResponse::show() const {
  const ::proto::Show* p = show_;
  // @@protoc_insertion_point(field_get:proto.ShowLoadResponse.show)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline ::proto::Show* ShowLoadResponse::release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowLoadResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = NULL;
  return temp;
}
inline ::proto::Show* ShowLoadResponse::mutable_show() {
  
  if (show_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowLoadResponse.show)
  return show_;
}
inline void ShowLoadResponse::set_allocated_show(::proto::Show* show) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_;
  }
  if (show) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowLoadResponse.show)
}

// -------------------------------------------------------------------

// ShowSwitchSourceResponse

// .proto.Show show = 1;
inline bool ShowSwitchSourceResponse::has_show() const {
  return this != internal_default_instance() && show_ != NULL;
}
inline void ShowSwitchSourceResponse::clear_show() {
  if (GetArenaNoVirtual() == NULL && show_ != NULL) {
    delete show_;
  }
  show_ = NULL;
}
inline const ::proto::Show& ShowSwitchSourceResponse::_internal_show() const {
  return *show_;
}
inline const ::proto::Show& ShowSwitchSourceResponse::show() const {
  const ::proto::Show* p = show_;
  // @@protoc_insertion_point(field_get:proto.ShowSwitchSourceResponse.show)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline ::proto::Show* ShowSwitchSourceResponse::release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowSwitchSourceResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = NULL;
  return temp;
}
inline ::proto::Show* ShowSwitchSourceResponse::mutable_show() {
  
  if (show_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.ShowSwitchSourceResponse.show)
  return show_;
}
inline void ShowSwitchSourceResponse::set_allocated_show(::proto::Show* show) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_;
  }
  if (show) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowSwitchSourceResponse.show)
}

// -------------------------------------------------------------------

// SceneGetResponse

// .proto.Scene scene = 1;
inline bool SceneGetResponse::has_scene() const {
  return this != internal_default_instance() && scene_ != NULL;
}
inline void SceneGetResponse::clear_scene() {
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) {
    delete scene_;
  }
  scene_ = NULL;
}
inline const ::proto::Scene& SceneGetResponse::_internal_scene() const {
  return *scene_;
}
inline const ::proto::Scene& SceneGetResponse::scene() const {
  const ::proto::Scene* p = scene_;
  // @@protoc_insertion_point(field_get:proto.SceneGetResponse.scene)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Scene*>(
      &::proto::_Scene_default_instance_);
}
inline ::proto::Scene* SceneGetResponse::release_scene() {
  // @@protoc_insertion_point(field_release:proto.SceneGetResponse.scene)
  
  ::proto::Scene* temp = scene_;
  scene_ = NULL;
  return temp;
}
inline ::proto::Scene* SceneGetResponse::mutable_scene() {
  
  if (scene_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Scene>(GetArenaNoVirtual());
    scene_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGetResponse.scene)
  return scene_;
}
inline void SceneGetResponse::set_allocated_scene(::proto::Scene* scene) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scene_;
  }
  if (scene) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scene = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetResponse.scene)
}

// -------------------------------------------------------------------

// SceneAddResponse

// .proto.Scene scene = 1;
inline bool SceneAddResponse::has_scene() const {
  return this != internal_default_instance() && scene_ != NULL;
}
inline void SceneAddResponse::clear_scene() {
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) {
    delete scene_;
  }
  scene_ = NULL;
}
inline const ::proto::Scene& SceneAddResponse::_internal_scene() const {
  return *scene_;
}
inline const ::proto::Scene& SceneAddResponse::scene() const {
  const ::proto::Scene* p = scene_;
  // @@protoc_insertion_point(field_get:proto.SceneAddResponse.scene)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Scene*>(
      &::proto::_Scene_default_instance_);
}
inline ::proto::Scene* SceneAddResponse::release_scene() {
  // @@protoc_insertion_point(field_release:proto.SceneAddResponse.scene)
  
  ::proto::Scene* temp = scene_;
  scene_ = NULL;
  return temp;
}
inline ::proto::Scene* SceneAddResponse::mutable_scene() {
  
  if (scene_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Scene>(GetArenaNoVirtual());
    scene_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneAddResponse.scene)
  return scene_;
}
inline void SceneAddResponse::set_allocated_scene(::proto::Scene* scene) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scene_;
  }
  if (scene) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scene = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAddResponse.scene)
}

// -------------------------------------------------------------------

// SceneDuplicateResponse

// .proto.Scene scene = 1;
inline bool SceneDuplicateResponse::has_scene() const {
  return this != internal_default_instance() && scene_ != NULL;
}
inline void SceneDuplicateResponse::clear_scene() {
  if (GetArenaNoVirtual() == NULL && scene_ != NULL) {
    delete scene_;
  }
  scene_ = NULL;
}
inline const ::proto::Scene& SceneDuplicateResponse::_internal_scene() const {
  return *scene_;
}
inline const ::proto::Scene& SceneDuplicateResponse::scene() const {
  const ::proto::Scene* p = scene_;
  // @@protoc_insertion_point(field_get:proto.SceneDuplicateResponse.scene)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Scene*>(
      &::proto::_Scene_default_instance_);
}
inline ::proto::Scene* SceneDuplicateResponse::release_scene() {
  // @@protoc_insertion_point(field_release:proto.SceneDuplicateResponse.scene)
  
  ::proto::Scene* temp = scene_;
  scene_ = NULL;
  return temp;
}
inline ::proto::Scene* SceneDuplicateResponse::mutable_scene() {
  
  if (scene_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Scene>(GetArenaNoVirtual());
    scene_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneDuplicateResponse.scene)
  return scene_;
}
inline void SceneDuplicateResponse::set_allocated_scene(::proto::Scene* scene) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scene_;
  }
  if (scene) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scene = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneDuplicateResponse.scene)
}

// -------------------------------------------------------------------

// SceneSetAsCurrentResponse

// .proto.Show show = 1;
inline bool SceneSetAsCurrentResponse::has_show() const {
  return this != internal_default_instance() && show_ != NULL;
}
inline void SceneSetAsCurrentResponse::clear_show() {
  if (GetArenaNoVirtual() == NULL && show_ != NULL) {
    delete show_;
  }
  show_ = NULL;
}
inline const ::proto::Show& SceneSetAsCurrentResponse::_internal_show() const {
  return *show_;
}
inline const ::proto::Show& SceneSetAsCurrentResponse::show() const {
  const ::proto::Show* p = show_;
  // @@protoc_insertion_point(field_get:proto.SceneSetAsCurrentResponse.show)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline ::proto::Show* SceneSetAsCurrentResponse::release_show() {
  // @@protoc_insertion_point(field_release:proto.SceneSetAsCurrentResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = NULL;
  return temp;
}
inline ::proto::Show* SceneSetAsCurrentResponse::mutable_show() {
  
  if (show_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArenaNoVirtual());
    show_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneSetAsCurrentResponse.show)
  return show_;
}
inline void SceneSetAsCurrentResponse::set_allocated_show(::proto::Show* show) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete show_;
  }
  if (show) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      show = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneSetAsCurrentResponse.show)
}

// -------------------------------------------------------------------

// SceneGetCurrentResponse

// string scene_id = 2;
inline void SceneGetCurrentResponse::clear_scene_id() {
  scene_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneGetCurrentResponse::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetCurrentResponse.scene_id)
  return scene_id_.GetNoArena();
}
inline void SceneGetCurrentResponse::set_scene_id(const ::std::string& value) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneGetCurrentResponse.scene_id)
}
#if LANG_CXX11
inline void SceneGetCurrentResponse::set_scene_id(::std::string&& value) {
  
  scene_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetCurrentResponse.scene_id)
}
#endif
inline void SceneGetCurrentResponse::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneGetCurrentResponse.scene_id)
}
inline void SceneGetCurrentResponse::set_scene_id(const char* value, size_t size) {
  
  scene_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetCurrentResponse.scene_id)
}
inline ::std::string* SceneGetCurrentResponse::mutable_scene_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneGetCurrentResponse.scene_id)
  return scene_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneGetCurrentResponse::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetCurrentResponse.scene_id)
  
  return scene_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneGetCurrentResponse::set_allocated_scene_id(::std::string* scene_id) {
  if (scene_id != NULL) {
    
  } else {
    
  }
  scene_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_id);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetCurrentResponse.scene_id)
}

// -------------------------------------------------------------------

// SourceGetResponse

// .proto.Source source = 1;
inline bool SourceGetResponse::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void SourceGetResponse::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::proto::Source& SourceGetResponse::_internal_source() const {
  return *source_;
}
inline const ::proto::Source& SourceGetResponse::source() const {
  const ::proto::Source* p = source_;
  // @@protoc_insertion_point(field_get:proto.SourceGetResponse.source)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline ::proto::Source* SourceGetResponse::release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceGetResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::proto::Source* SourceGetResponse::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SourceGetResponse.source)
  return source_;
}
inline void SourceGetResponse::set_allocated_source(::proto::Source* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetResponse.source)
}

// -------------------------------------------------------------------

// SourceAddResponse

// .proto.Source source = 1;
inline bool SourceAddResponse::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void SourceAddResponse::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::proto::Source& SourceAddResponse::_internal_source() const {
  return *source_;
}
inline const ::proto::Source& SourceAddResponse::source() const {
  const ::proto::Source* p = source_;
  // @@protoc_insertion_point(field_get:proto.SourceAddResponse.source)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline ::proto::Source* SourceAddResponse::release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceAddResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::proto::Source* SourceAddResponse::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SourceAddResponse.source)
  return source_;
}
inline void SourceAddResponse::set_allocated_source(::proto::Source* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddResponse.source)
}

// -------------------------------------------------------------------

// SourceDuplicateResponse

// .proto.Source source = 1;
inline bool SourceDuplicateResponse::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void SourceDuplicateResponse::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::proto::Source& SourceDuplicateResponse::_internal_source() const {
  return *source_;
}
inline const ::proto::Source& SourceDuplicateResponse::source() const {
  const ::proto::Source* p = source_;
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateResponse.source)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline ::proto::Source* SourceDuplicateResponse::release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::proto::Source* SourceDuplicateResponse::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateResponse.source)
  return source_;
}
inline void SourceDuplicateResponse::set_allocated_source(::proto::Source* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateResponse.source)
}

// -------------------------------------------------------------------

// SourceSetPropertiesResponse

// .proto.Source source = 1;
inline bool SourceSetPropertiesResponse::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
inline void SourceSetPropertiesResponse::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}
inline const ::proto::Source& SourceSetPropertiesResponse::_internal_source() const {
  return *source_;
}
inline const ::proto::Source& SourceSetPropertiesResponse::source() const {
  const ::proto::Source* p = source_;
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesResponse.source)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline ::proto::Source* SourceSetPropertiesResponse::release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = NULL;
  return temp;
}
inline ::proto::Source* SourceSetPropertiesResponse::mutable_source() {
  
  if (source_ == NULL) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesResponse.source)
  return source_;
}
inline void SourceSetPropertiesResponse::set_allocated_source(::proto::Source* source) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete source_;
  }
  if (source) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      source = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesResponse.source)
}

// -------------------------------------------------------------------

// HealthResponse

// int64 timestamp = 1;
inline void HealthResponse::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 HealthResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.HealthResponse.timestamp)
  return timestamp_;
}
inline void HealthResponse::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.HealthResponse.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_studio_2eproto
