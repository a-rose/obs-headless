// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: studio.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_studio_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_studio_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_studio_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_studio_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_studio_2eproto;
namespace proto {
class HealthResponse;
class HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class SceneAddRequest;
class SceneAddRequestDefaultTypeInternal;
extern SceneAddRequestDefaultTypeInternal _SceneAddRequest_default_instance_;
class SceneAddResponse;
class SceneAddResponseDefaultTypeInternal;
extern SceneAddResponseDefaultTypeInternal _SceneAddResponse_default_instance_;
class SceneDuplicateRequest;
class SceneDuplicateRequestDefaultTypeInternal;
extern SceneDuplicateRequestDefaultTypeInternal _SceneDuplicateRequest_default_instance_;
class SceneDuplicateResponse;
class SceneDuplicateResponseDefaultTypeInternal;
extern SceneDuplicateResponseDefaultTypeInternal _SceneDuplicateResponse_default_instance_;
class SceneGetCurrentRequest;
class SceneGetCurrentRequestDefaultTypeInternal;
extern SceneGetCurrentRequestDefaultTypeInternal _SceneGetCurrentRequest_default_instance_;
class SceneGetCurrentResponse;
class SceneGetCurrentResponseDefaultTypeInternal;
extern SceneGetCurrentResponseDefaultTypeInternal _SceneGetCurrentResponse_default_instance_;
class SceneGetRequest;
class SceneGetRequestDefaultTypeInternal;
extern SceneGetRequestDefaultTypeInternal _SceneGetRequest_default_instance_;
class SceneGetResponse;
class SceneGetResponseDefaultTypeInternal;
extern SceneGetResponseDefaultTypeInternal _SceneGetResponse_default_instance_;
class SceneRemoveRequest;
class SceneRemoveRequestDefaultTypeInternal;
extern SceneRemoveRequestDefaultTypeInternal _SceneRemoveRequest_default_instance_;
class SceneSetAsCurrentRequest;
class SceneSetAsCurrentRequestDefaultTypeInternal;
extern SceneSetAsCurrentRequestDefaultTypeInternal _SceneSetAsCurrentRequest_default_instance_;
class SceneSetAsCurrentResponse;
class SceneSetAsCurrentResponseDefaultTypeInternal;
extern SceneSetAsCurrentResponseDefaultTypeInternal _SceneSetAsCurrentResponse_default_instance_;
class Show;
class ShowDefaultTypeInternal;
extern ShowDefaultTypeInternal _Show_default_instance_;
class ShowCreateRequest;
class ShowCreateRequestDefaultTypeInternal;
extern ShowCreateRequestDefaultTypeInternal _ShowCreateRequest_default_instance_;
class ShowCreateResponse;
class ShowCreateResponseDefaultTypeInternal;
extern ShowCreateResponseDefaultTypeInternal _ShowCreateResponse_default_instance_;
class ShowDuplicateRequest;
class ShowDuplicateRequestDefaultTypeInternal;
extern ShowDuplicateRequestDefaultTypeInternal _ShowDuplicateRequest_default_instance_;
class ShowDuplicateResponse;
class ShowDuplicateResponseDefaultTypeInternal;
extern ShowDuplicateResponseDefaultTypeInternal _ShowDuplicateResponse_default_instance_;
class ShowGetRequest;
class ShowGetRequestDefaultTypeInternal;
extern ShowGetRequestDefaultTypeInternal _ShowGetRequest_default_instance_;
class ShowGetResponse;
class ShowGetResponseDefaultTypeInternal;
extern ShowGetResponseDefaultTypeInternal _ShowGetResponse_default_instance_;
class ShowLoadRequest;
class ShowLoadRequestDefaultTypeInternal;
extern ShowLoadRequestDefaultTypeInternal _ShowLoadRequest_default_instance_;
class ShowLoadResponse;
class ShowLoadResponseDefaultTypeInternal;
extern ShowLoadResponseDefaultTypeInternal _ShowLoadResponse_default_instance_;
class ShowRemoveRequest;
class ShowRemoveRequestDefaultTypeInternal;
extern ShowRemoveRequestDefaultTypeInternal _ShowRemoveRequest_default_instance_;
class ShowSwitchSourceResponse;
class ShowSwitchSourceResponseDefaultTypeInternal;
extern ShowSwitchSourceResponseDefaultTypeInternal _ShowSwitchSourceResponse_default_instance_;
class Source;
class SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
class SourceAddRequest;
class SourceAddRequestDefaultTypeInternal;
extern SourceAddRequestDefaultTypeInternal _SourceAddRequest_default_instance_;
class SourceAddResponse;
class SourceAddResponseDefaultTypeInternal;
extern SourceAddResponseDefaultTypeInternal _SourceAddResponse_default_instance_;
class SourceDuplicateRequest;
class SourceDuplicateRequestDefaultTypeInternal;
extern SourceDuplicateRequestDefaultTypeInternal _SourceDuplicateRequest_default_instance_;
class SourceDuplicateResponse;
class SourceDuplicateResponseDefaultTypeInternal;
extern SourceDuplicateResponseDefaultTypeInternal _SourceDuplicateResponse_default_instance_;
class SourceGetRequest;
class SourceGetRequestDefaultTypeInternal;
extern SourceGetRequestDefaultTypeInternal _SourceGetRequest_default_instance_;
class SourceGetResponse;
class SourceGetResponseDefaultTypeInternal;
extern SourceGetResponseDefaultTypeInternal _SourceGetResponse_default_instance_;
class SourceRemoveRequest;
class SourceRemoveRequestDefaultTypeInternal;
extern SourceRemoveRequestDefaultTypeInternal _SourceRemoveRequest_default_instance_;
class SourceSetPropertiesRequest;
class SourceSetPropertiesRequestDefaultTypeInternal;
extern SourceSetPropertiesRequestDefaultTypeInternal _SourceSetPropertiesRequest_default_instance_;
class SourceSetPropertiesResponse;
class SourceSetPropertiesResponseDefaultTypeInternal;
extern SourceSetPropertiesResponseDefaultTypeInternal _SourceSetPropertiesResponse_default_instance_;
class StudioGetResponse;
class StudioGetResponseDefaultTypeInternal;
extern StudioGetResponseDefaultTypeInternal _StudioGetResponse_default_instance_;
class StudioState;
class StudioStateDefaultTypeInternal;
extern StudioStateDefaultTypeInternal _StudioState_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::HealthResponse* Arena::CreateMaybeMessage<::proto::HealthResponse>(Arena*);
template<> ::proto::Scene* Arena::CreateMaybeMessage<::proto::Scene>(Arena*);
template<> ::proto::SceneAddRequest* Arena::CreateMaybeMessage<::proto::SceneAddRequest>(Arena*);
template<> ::proto::SceneAddResponse* Arena::CreateMaybeMessage<::proto::SceneAddResponse>(Arena*);
template<> ::proto::SceneDuplicateRequest* Arena::CreateMaybeMessage<::proto::SceneDuplicateRequest>(Arena*);
template<> ::proto::SceneDuplicateResponse* Arena::CreateMaybeMessage<::proto::SceneDuplicateResponse>(Arena*);
template<> ::proto::SceneGetCurrentRequest* Arena::CreateMaybeMessage<::proto::SceneGetCurrentRequest>(Arena*);
template<> ::proto::SceneGetCurrentResponse* Arena::CreateMaybeMessage<::proto::SceneGetCurrentResponse>(Arena*);
template<> ::proto::SceneGetRequest* Arena::CreateMaybeMessage<::proto::SceneGetRequest>(Arena*);
template<> ::proto::SceneGetResponse* Arena::CreateMaybeMessage<::proto::SceneGetResponse>(Arena*);
template<> ::proto::SceneRemoveRequest* Arena::CreateMaybeMessage<::proto::SceneRemoveRequest>(Arena*);
template<> ::proto::SceneSetAsCurrentRequest* Arena::CreateMaybeMessage<::proto::SceneSetAsCurrentRequest>(Arena*);
template<> ::proto::SceneSetAsCurrentResponse* Arena::CreateMaybeMessage<::proto::SceneSetAsCurrentResponse>(Arena*);
template<> ::proto::Show* Arena::CreateMaybeMessage<::proto::Show>(Arena*);
template<> ::proto::ShowCreateRequest* Arena::CreateMaybeMessage<::proto::ShowCreateRequest>(Arena*);
template<> ::proto::ShowCreateResponse* Arena::CreateMaybeMessage<::proto::ShowCreateResponse>(Arena*);
template<> ::proto::ShowDuplicateRequest* Arena::CreateMaybeMessage<::proto::ShowDuplicateRequest>(Arena*);
template<> ::proto::ShowDuplicateResponse* Arena::CreateMaybeMessage<::proto::ShowDuplicateResponse>(Arena*);
template<> ::proto::ShowGetRequest* Arena::CreateMaybeMessage<::proto::ShowGetRequest>(Arena*);
template<> ::proto::ShowGetResponse* Arena::CreateMaybeMessage<::proto::ShowGetResponse>(Arena*);
template<> ::proto::ShowLoadRequest* Arena::CreateMaybeMessage<::proto::ShowLoadRequest>(Arena*);
template<> ::proto::ShowLoadResponse* Arena::CreateMaybeMessage<::proto::ShowLoadResponse>(Arena*);
template<> ::proto::ShowRemoveRequest* Arena::CreateMaybeMessage<::proto::ShowRemoveRequest>(Arena*);
template<> ::proto::ShowSwitchSourceResponse* Arena::CreateMaybeMessage<::proto::ShowSwitchSourceResponse>(Arena*);
template<> ::proto::Source* Arena::CreateMaybeMessage<::proto::Source>(Arena*);
template<> ::proto::SourceAddRequest* Arena::CreateMaybeMessage<::proto::SourceAddRequest>(Arena*);
template<> ::proto::SourceAddResponse* Arena::CreateMaybeMessage<::proto::SourceAddResponse>(Arena*);
template<> ::proto::SourceDuplicateRequest* Arena::CreateMaybeMessage<::proto::SourceDuplicateRequest>(Arena*);
template<> ::proto::SourceDuplicateResponse* Arena::CreateMaybeMessage<::proto::SourceDuplicateResponse>(Arena*);
template<> ::proto::SourceGetRequest* Arena::CreateMaybeMessage<::proto::SourceGetRequest>(Arena*);
template<> ::proto::SourceGetResponse* Arena::CreateMaybeMessage<::proto::SourceGetResponse>(Arena*);
template<> ::proto::SourceRemoveRequest* Arena::CreateMaybeMessage<::proto::SourceRemoveRequest>(Arena*);
template<> ::proto::SourceSetPropertiesRequest* Arena::CreateMaybeMessage<::proto::SourceSetPropertiesRequest>(Arena*);
template<> ::proto::SourceSetPropertiesResponse* Arena::CreateMaybeMessage<::proto::SourceSetPropertiesResponse>(Arena*);
template<> ::proto::StudioGetResponse* Arena::CreateMaybeMessage<::proto::StudioGetResponse>(Arena*);
template<> ::proto::StudioState* Arena::CreateMaybeMessage<::proto::StudioState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class StudioState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.StudioState) */ {
 public:
  inline StudioState() : StudioState(nullptr) {};
  virtual ~StudioState();

  StudioState(const StudioState& from);
  StudioState(StudioState&& from) noexcept
    : StudioState() {
    *this = ::std::move(from);
  }

  inline StudioState& operator=(const StudioState& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudioState& operator=(StudioState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudioState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudioState* internal_default_instance() {
    return reinterpret_cast<const StudioState*>(
               &_StudioState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StudioState& a, StudioState& b) {
    a.Swap(&b);
  }
  inline void Swap(StudioState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudioState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudioState* New() const final {
    return CreateMaybeMessage<StudioState>(nullptr);
  }

  StudioState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudioState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudioState& from);
  void MergeFrom(const StudioState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudioState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.StudioState";
  }
  protected:
  explicit StudioState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowsFieldNumber = 2,
    kActiveShowIdFieldNumber = 1,
  };
  // repeated .proto.Show shows = 2;
  int shows_size() const;
  private:
  int _internal_shows_size() const;
  public:
  void clear_shows();
  ::proto::Show* mutable_shows(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Show >*
      mutable_shows();
  private:
  const ::proto::Show& _internal_shows(int index) const;
  ::proto::Show* _internal_add_shows();
  public:
  const ::proto::Show& shows(int index) const;
  ::proto::Show* add_shows();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Show >&
      shows() const;

  // string active_show_id = 1;
  void clear_active_show_id();
  const std::string& active_show_id() const;
  void set_active_show_id(const std::string& value);
  void set_active_show_id(std::string&& value);
  void set_active_show_id(const char* value);
  void set_active_show_id(const char* value, size_t size);
  std::string* mutable_active_show_id();
  std::string* release_active_show_id();
  void set_allocated_active_show_id(std::string* active_show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_active_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_active_show_id(
      std::string* active_show_id);
  private:
  const std::string& _internal_active_show_id() const;
  void _internal_set_active_show_id(const std::string& value);
  std::string* _internal_mutable_active_show_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.StudioState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Show > shows_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_show_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class Show PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Show) */ {
 public:
  inline Show() : Show(nullptr) {};
  virtual ~Show();

  Show(const Show& from);
  Show(Show&& from) noexcept
    : Show() {
    *this = ::std::move(from);
  }

  inline Show& operator=(const Show& from) {
    CopyFrom(from);
    return *this;
  }
  inline Show& operator=(Show&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Show& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Show* internal_default_instance() {
    return reinterpret_cast<const Show*>(
               &_Show_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Show& a, Show& b) {
    a.Swap(&b);
  }
  inline void Swap(Show* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Show* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Show* New() const final {
    return CreateMaybeMessage<Show>(nullptr);
  }

  Show* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Show>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Show& from);
  void MergeFrom(const Show& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Show* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Show";
  }
  protected:
  explicit Show(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kActiveSceneIdFieldNumber = 3,
  };
  // repeated .proto.Scene scenes = 4;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;
  public:
  void clear_scenes();
  ::proto::Scene* mutable_scenes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Scene >*
      mutable_scenes();
  private:
  const ::proto::Scene& _internal_scenes(int index) const;
  ::proto::Scene* _internal_add_scenes();
  public:
  const ::proto::Scene& scenes(int index) const;
  ::proto::Scene* add_scenes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Scene >&
      scenes() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string active_scene_id = 3;
  void clear_active_scene_id();
  const std::string& active_scene_id() const;
  void set_active_scene_id(const std::string& value);
  void set_active_scene_id(std::string&& value);
  void set_active_scene_id(const char* value);
  void set_active_scene_id(const char* value, size_t size);
  std::string* mutable_active_scene_id();
  std::string* release_active_scene_id();
  void set_allocated_active_scene_id(std::string* active_scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_active_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_active_scene_id(
      std::string* active_scene_id);
  private:
  const std::string& _internal_active_scene_id() const;
  void _internal_set_active_scene_id(const std::string& value);
  std::string* _internal_mutable_active_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.Show)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Scene > scenes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class Scene PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {};
  virtual ~Scene();

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(nullptr);
  }

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourcesFieldNumber = 4,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kActiveSourceIdFieldNumber = 3,
  };
  // repeated .proto.Source sources = 4;
  int sources_size() const;
  private:
  int _internal_sources_size() const;
  public:
  void clear_sources();
  ::proto::Source* mutable_sources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Source >*
      mutable_sources();
  private:
  const ::proto::Source& _internal_sources(int index) const;
  ::proto::Source* _internal_add_sources();
  public:
  const ::proto::Source& sources(int index) const;
  ::proto::Source* add_sources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Source >&
      sources() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string active_source_id = 3;
  void clear_active_source_id();
  const std::string& active_source_id() const;
  void set_active_source_id(const std::string& value);
  void set_active_source_id(std::string&& value);
  void set_active_source_id(const char* value);
  void set_active_source_id(const char* value, size_t size);
  std::string* mutable_active_source_id();
  std::string* release_active_source_id();
  void set_allocated_active_source_id(std::string* active_source_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_active_source_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_active_source_id(
      std::string* active_source_id);
  private:
  const std::string& _internal_active_source_id() const;
  void _internal_set_active_source_id(const std::string& value);
  std::string* _internal_mutable_active_source_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Source > sources_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class Source PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Source) */ {
 public:
  inline Source() : Source(nullptr) {};
  virtual ~Source();

  Source(const Source& from);
  Source(Source&& from) noexcept
    : Source() {
    *this = ::std::move(from);
  }

  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
               &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Source& a, Source& b) {
    a.Swap(&b);
  }
  inline void Swap(Source* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Source* New() const final {
    return CreateMaybeMessage<Source>(nullptr);
  }

  Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Source>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Source& from);
  void MergeFrom(const Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Source* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Source";
  }
  protected:
  explicit Source(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kUrlFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:proto.Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowGetRequest) */ {
 public:
  inline ShowGetRequest() : ShowGetRequest(nullptr) {};
  virtual ~ShowGetRequest();

  ShowGetRequest(const ShowGetRequest& from);
  ShowGetRequest(ShowGetRequest&& from) noexcept
    : ShowGetRequest() {
    *this = ::std::move(from);
  }

  inline ShowGetRequest& operator=(const ShowGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowGetRequest& operator=(ShowGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowGetRequest* internal_default_instance() {
    return reinterpret_cast<const ShowGetRequest*>(
               &_ShowGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShowGetRequest& a, ShowGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowGetRequest* New() const final {
    return CreateMaybeMessage<ShowGetRequest>(nullptr);
  }

  ShowGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowGetRequest& from);
  void MergeFrom(const ShowGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowGetRequest";
  }
  protected:
  explicit ShowGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.ShowGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowCreateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowCreateRequest) */ {
 public:
  inline ShowCreateRequest() : ShowCreateRequest(nullptr) {};
  virtual ~ShowCreateRequest();

  ShowCreateRequest(const ShowCreateRequest& from);
  ShowCreateRequest(ShowCreateRequest&& from) noexcept
    : ShowCreateRequest() {
    *this = ::std::move(from);
  }

  inline ShowCreateRequest& operator=(const ShowCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowCreateRequest& operator=(ShowCreateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowCreateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCreateRequest* internal_default_instance() {
    return reinterpret_cast<const ShowCreateRequest*>(
               &_ShowCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ShowCreateRequest& a, ShowCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowCreateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowCreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowCreateRequest* New() const final {
    return CreateMaybeMessage<ShowCreateRequest>(nullptr);
  }

  ShowCreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowCreateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowCreateRequest& from);
  void MergeFrom(const ShowCreateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCreateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowCreateRequest";
  }
  protected:
  explicit ShowCreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowNameFieldNumber = 1,
  };
  // string show_name = 1;
  void clear_show_name();
  const std::string& show_name() const;
  void set_show_name(const std::string& value);
  void set_show_name(std::string&& value);
  void set_show_name(const char* value);
  void set_show_name(const char* value, size_t size);
  std::string* mutable_show_name();
  std::string* release_show_name();
  void set_allocated_show_name(std::string* show_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_name(
      std::string* show_name);
  private:
  const std::string& _internal_show_name() const;
  void _internal_set_show_name(const std::string& value);
  std::string* _internal_mutable_show_name();
  public:

  // @@protoc_insertion_point(class_scope:proto.ShowCreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowDuplicateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowDuplicateRequest) */ {
 public:
  inline ShowDuplicateRequest() : ShowDuplicateRequest(nullptr) {};
  virtual ~ShowDuplicateRequest();

  ShowDuplicateRequest(const ShowDuplicateRequest& from);
  ShowDuplicateRequest(ShowDuplicateRequest&& from) noexcept
    : ShowDuplicateRequest() {
    *this = ::std::move(from);
  }

  inline ShowDuplicateRequest& operator=(const ShowDuplicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowDuplicateRequest& operator=(ShowDuplicateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowDuplicateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowDuplicateRequest* internal_default_instance() {
    return reinterpret_cast<const ShowDuplicateRequest*>(
               &_ShowDuplicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShowDuplicateRequest& a, ShowDuplicateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowDuplicateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowDuplicateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowDuplicateRequest* New() const final {
    return CreateMaybeMessage<ShowDuplicateRequest>(nullptr);
  }

  ShowDuplicateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowDuplicateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowDuplicateRequest& from);
  void MergeFrom(const ShowDuplicateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowDuplicateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowDuplicateRequest";
  }
  protected:
  explicit ShowDuplicateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.ShowDuplicateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowRemoveRequest) */ {
 public:
  inline ShowRemoveRequest() : ShowRemoveRequest(nullptr) {};
  virtual ~ShowRemoveRequest();

  ShowRemoveRequest(const ShowRemoveRequest& from);
  ShowRemoveRequest(ShowRemoveRequest&& from) noexcept
    : ShowRemoveRequest() {
    *this = ::std::move(from);
  }

  inline ShowRemoveRequest& operator=(const ShowRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowRemoveRequest& operator=(ShowRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const ShowRemoveRequest*>(
               &_ShowRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ShowRemoveRequest& a, ShowRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowRemoveRequest* New() const final {
    return CreateMaybeMessage<ShowRemoveRequest>(nullptr);
  }

  ShowRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowRemoveRequest& from);
  void MergeFrom(const ShowRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowRemoveRequest";
  }
  protected:
  explicit ShowRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.ShowRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowLoadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowLoadRequest) */ {
 public:
  inline ShowLoadRequest() : ShowLoadRequest(nullptr) {};
  virtual ~ShowLoadRequest();

  ShowLoadRequest(const ShowLoadRequest& from);
  ShowLoadRequest(ShowLoadRequest&& from) noexcept
    : ShowLoadRequest() {
    *this = ::std::move(from);
  }

  inline ShowLoadRequest& operator=(const ShowLoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowLoadRequest& operator=(ShowLoadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowLoadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowLoadRequest* internal_default_instance() {
    return reinterpret_cast<const ShowLoadRequest*>(
               &_ShowLoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ShowLoadRequest& a, ShowLoadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowLoadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowLoadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowLoadRequest* New() const final {
    return CreateMaybeMessage<ShowLoadRequest>(nullptr);
  }

  ShowLoadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowLoadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowLoadRequest& from);
  void MergeFrom(const ShowLoadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowLoadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowLoadRequest";
  }
  protected:
  explicit ShowLoadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowPathFieldNumber = 1,
  };
  // string show_path = 1;
  void clear_show_path();
  const std::string& show_path() const;
  void set_show_path(const std::string& value);
  void set_show_path(std::string&& value);
  void set_show_path(const char* value);
  void set_show_path(const char* value, size_t size);
  std::string* mutable_show_path();
  std::string* release_show_path();
  void set_allocated_show_path(std::string* show_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_path(
      std::string* show_path);
  private:
  const std::string& _internal_show_path() const;
  void _internal_set_show_path(const std::string& value);
  std::string* _internal_mutable_show_path();
  public:

  // @@protoc_insertion_point(class_scope:proto.ShowLoadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetRequest) */ {
 public:
  inline SceneGetRequest() : SceneGetRequest(nullptr) {};
  virtual ~SceneGetRequest();

  SceneGetRequest(const SceneGetRequest& from);
  SceneGetRequest(SceneGetRequest&& from) noexcept
    : SceneGetRequest() {
    *this = ::std::move(from);
  }

  inline SceneGetRequest& operator=(const SceneGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneGetRequest& operator=(SceneGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetRequest* internal_default_instance() {
    return reinterpret_cast<const SceneGetRequest*>(
               &_SceneGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SceneGetRequest& a, SceneGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneGetRequest* New() const final {
    return CreateMaybeMessage<SceneGetRequest>(nullptr);
  }

  SceneGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneGetRequest& from);
  void MergeFrom(const SceneGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneGetRequest";
  }
  protected:
  explicit SceneGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneAddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneAddRequest) */ {
 public:
  inline SceneAddRequest() : SceneAddRequest(nullptr) {};
  virtual ~SceneAddRequest();

  SceneAddRequest(const SceneAddRequest& from);
  SceneAddRequest(SceneAddRequest&& from) noexcept
    : SceneAddRequest() {
    *this = ::std::move(from);
  }

  inline SceneAddRequest& operator=(const SceneAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneAddRequest& operator=(SceneAddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneAddRequest* internal_default_instance() {
    return reinterpret_cast<const SceneAddRequest*>(
               &_SceneAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SceneAddRequest& a, SceneAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneAddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneAddRequest* New() const final {
    return CreateMaybeMessage<SceneAddRequest>(nullptr);
  }

  SceneAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneAddRequest& from);
  void MergeFrom(const SceneAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneAddRequest";
  }
  protected:
  explicit SceneAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneNameFieldNumber = 2,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_name = 2;
  void clear_scene_name();
  const std::string& scene_name() const;
  void set_scene_name(const std::string& value);
  void set_scene_name(std::string&& value);
  void set_scene_name(const char* value);
  void set_scene_name(const char* value, size_t size);
  std::string* mutable_scene_name();
  std::string* release_scene_name();
  void set_allocated_scene_name(std::string* scene_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_name(
      std::string* scene_name);
  private:
  const std::string& _internal_scene_name() const;
  void _internal_set_scene_name(const std::string& value);
  std::string* _internal_mutable_scene_name();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneDuplicateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneDuplicateRequest) */ {
 public:
  inline SceneDuplicateRequest() : SceneDuplicateRequest(nullptr) {};
  virtual ~SceneDuplicateRequest();

  SceneDuplicateRequest(const SceneDuplicateRequest& from);
  SceneDuplicateRequest(SceneDuplicateRequest&& from) noexcept
    : SceneDuplicateRequest() {
    *this = ::std::move(from);
  }

  inline SceneDuplicateRequest& operator=(const SceneDuplicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneDuplicateRequest& operator=(SceneDuplicateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneDuplicateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneDuplicateRequest* internal_default_instance() {
    return reinterpret_cast<const SceneDuplicateRequest*>(
               &_SceneDuplicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SceneDuplicateRequest& a, SceneDuplicateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneDuplicateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneDuplicateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneDuplicateRequest* New() const final {
    return CreateMaybeMessage<SceneDuplicateRequest>(nullptr);
  }

  SceneDuplicateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneDuplicateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneDuplicateRequest& from);
  void MergeFrom(const SceneDuplicateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneDuplicateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneDuplicateRequest";
  }
  protected:
  explicit SceneDuplicateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneDuplicateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneRemoveRequest) */ {
 public:
  inline SceneRemoveRequest() : SceneRemoveRequest(nullptr) {};
  virtual ~SceneRemoveRequest();

  SceneRemoveRequest(const SceneRemoveRequest& from);
  SceneRemoveRequest(SceneRemoveRequest&& from) noexcept
    : SceneRemoveRequest() {
    *this = ::std::move(from);
  }

  inline SceneRemoveRequest& operator=(const SceneRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneRemoveRequest& operator=(SceneRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const SceneRemoveRequest*>(
               &_SceneRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SceneRemoveRequest& a, SceneRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneRemoveRequest* New() const final {
    return CreateMaybeMessage<SceneRemoveRequest>(nullptr);
  }

  SceneRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneRemoveRequest& from);
  void MergeFrom(const SceneRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneRemoveRequest";
  }
  protected:
  explicit SceneRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneSetAsCurrentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneSetAsCurrentRequest) */ {
 public:
  inline SceneSetAsCurrentRequest() : SceneSetAsCurrentRequest(nullptr) {};
  virtual ~SceneSetAsCurrentRequest();

  SceneSetAsCurrentRequest(const SceneSetAsCurrentRequest& from);
  SceneSetAsCurrentRequest(SceneSetAsCurrentRequest&& from) noexcept
    : SceneSetAsCurrentRequest() {
    *this = ::std::move(from);
  }

  inline SceneSetAsCurrentRequest& operator=(const SceneSetAsCurrentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneSetAsCurrentRequest& operator=(SceneSetAsCurrentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneSetAsCurrentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneSetAsCurrentRequest* internal_default_instance() {
    return reinterpret_cast<const SceneSetAsCurrentRequest*>(
               &_SceneSetAsCurrentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SceneSetAsCurrentRequest& a, SceneSetAsCurrentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneSetAsCurrentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneSetAsCurrentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneSetAsCurrentRequest* New() const final {
    return CreateMaybeMessage<SceneSetAsCurrentRequest>(nullptr);
  }

  SceneSetAsCurrentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneSetAsCurrentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneSetAsCurrentRequest& from);
  void MergeFrom(const SceneSetAsCurrentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneSetAsCurrentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneSetAsCurrentRequest";
  }
  protected:
  explicit SceneSetAsCurrentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneSetAsCurrentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneGetCurrentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetCurrentRequest) */ {
 public:
  inline SceneGetCurrentRequest() : SceneGetCurrentRequest(nullptr) {};
  virtual ~SceneGetCurrentRequest();

  SceneGetCurrentRequest(const SceneGetCurrentRequest& from);
  SceneGetCurrentRequest(SceneGetCurrentRequest&& from) noexcept
    : SceneGetCurrentRequest() {
    *this = ::std::move(from);
  }

  inline SceneGetCurrentRequest& operator=(const SceneGetCurrentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneGetCurrentRequest& operator=(SceneGetCurrentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneGetCurrentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetCurrentRequest* internal_default_instance() {
    return reinterpret_cast<const SceneGetCurrentRequest*>(
               &_SceneGetCurrentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SceneGetCurrentRequest& a, SceneGetCurrentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneGetCurrentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneGetCurrentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneGetCurrentRequest* New() const final {
    return CreateMaybeMessage<SceneGetCurrentRequest>(nullptr);
  }

  SceneGetCurrentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetCurrentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneGetCurrentRequest& from);
  void MergeFrom(const SceneGetCurrentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetCurrentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneGetCurrentRequest";
  }
  protected:
  explicit SceneGetCurrentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneGetCurrentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceGetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceGetRequest) */ {
 public:
  inline SourceGetRequest() : SourceGetRequest(nullptr) {};
  virtual ~SourceGetRequest();

  SourceGetRequest(const SourceGetRequest& from);
  SourceGetRequest(SourceGetRequest&& from) noexcept
    : SourceGetRequest() {
    *this = ::std::move(from);
  }

  inline SourceGetRequest& operator=(const SourceGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceGetRequest& operator=(SourceGetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceGetRequest* internal_default_instance() {
    return reinterpret_cast<const SourceGetRequest*>(
               &_SourceGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SourceGetRequest& a, SourceGetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceGetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceGetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceGetRequest* New() const final {
    return CreateMaybeMessage<SourceGetRequest>(nullptr);
  }

  SourceGetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceGetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceGetRequest& from);
  void MergeFrom(const SourceGetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceGetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceGetRequest";
  }
  protected:
  explicit SourceGetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kSourceIdFieldNumber = 3,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_id(
      std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SourceGetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceAddRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceAddRequest) */ {
 public:
  inline SourceAddRequest() : SourceAddRequest(nullptr) {};
  virtual ~SourceAddRequest();

  SourceAddRequest(const SourceAddRequest& from);
  SourceAddRequest(SourceAddRequest&& from) noexcept
    : SourceAddRequest() {
    *this = ::std::move(from);
  }

  inline SourceAddRequest& operator=(const SourceAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceAddRequest& operator=(SourceAddRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceAddRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceAddRequest* internal_default_instance() {
    return reinterpret_cast<const SourceAddRequest*>(
               &_SourceAddRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SourceAddRequest& a, SourceAddRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceAddRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceAddRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceAddRequest* New() const final {
    return CreateMaybeMessage<SourceAddRequest>(nullptr);
  }

  SourceAddRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceAddRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceAddRequest& from);
  void MergeFrom(const SourceAddRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceAddRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceAddRequest";
  }
  protected:
  explicit SourceAddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kSourceNameFieldNumber = 3,
    kSourceTypeFieldNumber = 4,
    kSourceUrlFieldNumber = 5,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string source_name = 3;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_name(
      std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // string source_type = 4;
  void clear_source_type();
  const std::string& source_type() const;
  void set_source_type(const std::string& value);
  void set_source_type(std::string&& value);
  void set_source_type(const char* value);
  void set_source_type(const char* value, size_t size);
  std::string* mutable_source_type();
  std::string* release_source_type();
  void set_allocated_source_type(std::string* source_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_type(
      std::string* source_type);
  private:
  const std::string& _internal_source_type() const;
  void _internal_set_source_type(const std::string& value);
  std::string* _internal_mutable_source_type();
  public:

  // string source_url = 5;
  void clear_source_url();
  const std::string& source_url() const;
  void set_source_url(const std::string& value);
  void set_source_url(std::string&& value);
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  std::string* mutable_source_url();
  std::string* release_source_url();
  void set_allocated_source_url(std::string* source_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_url(
      std::string* source_url);
  private:
  const std::string& _internal_source_url() const;
  void _internal_set_source_url(const std::string& value);
  std::string* _internal_mutable_source_url();
  public:

  // @@protoc_insertion_point(class_scope:proto.SourceAddRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceDuplicateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceDuplicateRequest) */ {
 public:
  inline SourceDuplicateRequest() : SourceDuplicateRequest(nullptr) {};
  virtual ~SourceDuplicateRequest();

  SourceDuplicateRequest(const SourceDuplicateRequest& from);
  SourceDuplicateRequest(SourceDuplicateRequest&& from) noexcept
    : SourceDuplicateRequest() {
    *this = ::std::move(from);
  }

  inline SourceDuplicateRequest& operator=(const SourceDuplicateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceDuplicateRequest& operator=(SourceDuplicateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceDuplicateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceDuplicateRequest* internal_default_instance() {
    return reinterpret_cast<const SourceDuplicateRequest*>(
               &_SourceDuplicateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SourceDuplicateRequest& a, SourceDuplicateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceDuplicateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceDuplicateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceDuplicateRequest* New() const final {
    return CreateMaybeMessage<SourceDuplicateRequest>(nullptr);
  }

  SourceDuplicateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceDuplicateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceDuplicateRequest& from);
  void MergeFrom(const SourceDuplicateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceDuplicateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceDuplicateRequest";
  }
  protected:
  explicit SourceDuplicateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kSourceIdFieldNumber = 3,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_id(
      std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SourceDuplicateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceRemoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceRemoveRequest) */ {
 public:
  inline SourceRemoveRequest() : SourceRemoveRequest(nullptr) {};
  virtual ~SourceRemoveRequest();

  SourceRemoveRequest(const SourceRemoveRequest& from);
  SourceRemoveRequest(SourceRemoveRequest&& from) noexcept
    : SourceRemoveRequest() {
    *this = ::std::move(from);
  }

  inline SourceRemoveRequest& operator=(const SourceRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceRemoveRequest& operator=(SourceRemoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceRemoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceRemoveRequest* internal_default_instance() {
    return reinterpret_cast<const SourceRemoveRequest*>(
               &_SourceRemoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SourceRemoveRequest& a, SourceRemoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceRemoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceRemoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceRemoveRequest* New() const final {
    return CreateMaybeMessage<SourceRemoveRequest>(nullptr);
  }

  SourceRemoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceRemoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceRemoveRequest& from);
  void MergeFrom(const SourceRemoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceRemoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceRemoveRequest";
  }
  protected:
  explicit SourceRemoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kSourceIdFieldNumber = 3,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_id(
      std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SourceRemoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceSetPropertiesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceSetPropertiesRequest) */ {
 public:
  inline SourceSetPropertiesRequest() : SourceSetPropertiesRequest(nullptr) {};
  virtual ~SourceSetPropertiesRequest();

  SourceSetPropertiesRequest(const SourceSetPropertiesRequest& from);
  SourceSetPropertiesRequest(SourceSetPropertiesRequest&& from) noexcept
    : SourceSetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline SourceSetPropertiesRequest& operator=(const SourceSetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceSetPropertiesRequest& operator=(SourceSetPropertiesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceSetPropertiesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceSetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const SourceSetPropertiesRequest*>(
               &_SourceSetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SourceSetPropertiesRequest& a, SourceSetPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceSetPropertiesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceSetPropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceSetPropertiesRequest* New() const final {
    return CreateMaybeMessage<SourceSetPropertiesRequest>(nullptr);
  }

  SourceSetPropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceSetPropertiesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceSetPropertiesRequest& from);
  void MergeFrom(const SourceSetPropertiesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceSetPropertiesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceSetPropertiesRequest";
  }
  protected:
  explicit SourceSetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
    kSourceIdFieldNumber = 3,
    kSourceTypeFieldNumber = 4,
    kSourceUrlFieldNumber = 5,
  };
  // string show_id = 1;
  void clear_show_id();
  const std::string& show_id() const;
  void set_show_id(const std::string& value);
  void set_show_id(std::string&& value);
  void set_show_id(const char* value);
  void set_show_id(const char* value, size_t size);
  std::string* mutable_show_id();
  std::string* release_show_id();
  void set_allocated_show_id(std::string* show_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_show_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_show_id(
      std::string* show_id);
  private:
  const std::string& _internal_show_id() const;
  void _internal_set_show_id(const std::string& value);
  std::string* _internal_mutable_show_id();
  public:

  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // string source_id = 3;
  void clear_source_id();
  const std::string& source_id() const;
  void set_source_id(const std::string& value);
  void set_source_id(std::string&& value);
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  std::string* mutable_source_id();
  std::string* release_source_id();
  void set_allocated_source_id(std::string* source_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_id(
      std::string* source_id);
  private:
  const std::string& _internal_source_id() const;
  void _internal_set_source_id(const std::string& value);
  std::string* _internal_mutable_source_id();
  public:

  // string source_type = 4;
  void clear_source_type();
  const std::string& source_type() const;
  void set_source_type(const std::string& value);
  void set_source_type(std::string&& value);
  void set_source_type(const char* value);
  void set_source_type(const char* value, size_t size);
  std::string* mutable_source_type();
  std::string* release_source_type();
  void set_allocated_source_type(std::string* source_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_type(
      std::string* source_type);
  private:
  const std::string& _internal_source_type() const;
  void _internal_set_source_type(const std::string& value);
  std::string* _internal_mutable_source_type();
  public:

  // string source_url = 5;
  void clear_source_url();
  const std::string& source_url() const;
  void set_source_url(const std::string& value);
  void set_source_url(std::string&& value);
  void set_source_url(const char* value);
  void set_source_url(const char* value, size_t size);
  std::string* mutable_source_url();
  std::string* release_source_url();
  void set_allocated_source_url(std::string* source_url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_url(
      std::string* source_url);
  private:
  const std::string& _internal_source_url() const;
  void _internal_set_source_url(const std::string& value);
  std::string* _internal_mutable_source_url();
  public:

  // @@protoc_insertion_point(class_scope:proto.SourceSetPropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr show_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class StudioGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.StudioGetResponse) */ {
 public:
  inline StudioGetResponse() : StudioGetResponse(nullptr) {};
  virtual ~StudioGetResponse();

  StudioGetResponse(const StudioGetResponse& from);
  StudioGetResponse(StudioGetResponse&& from) noexcept
    : StudioGetResponse() {
    *this = ::std::move(from);
  }

  inline StudioGetResponse& operator=(const StudioGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudioGetResponse& operator=(StudioGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StudioGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StudioGetResponse* internal_default_instance() {
    return reinterpret_cast<const StudioGetResponse*>(
               &_StudioGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StudioGetResponse& a, StudioGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StudioGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudioGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudioGetResponse* New() const final {
    return CreateMaybeMessage<StudioGetResponse>(nullptr);
  }

  StudioGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudioGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudioGetResponse& from);
  void MergeFrom(const StudioGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudioGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.StudioGetResponse";
  }
  protected:
  explicit StudioGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudioFieldNumber = 1,
  };
  // .proto.StudioState studio = 1;
  bool has_studio() const;
  private:
  bool _internal_has_studio() const;
  public:
  void clear_studio();
  const ::proto::StudioState& studio() const;
  ::proto::StudioState* release_studio();
  ::proto::StudioState* mutable_studio();
  void set_allocated_studio(::proto::StudioState* studio);
  private:
  const ::proto::StudioState& _internal_studio() const;
  ::proto::StudioState* _internal_mutable_studio();
  public:
  void unsafe_arena_set_allocated_studio(
      ::proto::StudioState* studio);
  ::proto::StudioState* unsafe_arena_release_studio();

  // @@protoc_insertion_point(class_scope:proto.StudioGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::StudioState* studio_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowGetResponse) */ {
 public:
  inline ShowGetResponse() : ShowGetResponse(nullptr) {};
  virtual ~ShowGetResponse();

  ShowGetResponse(const ShowGetResponse& from);
  ShowGetResponse(ShowGetResponse&& from) noexcept
    : ShowGetResponse() {
    *this = ::std::move(from);
  }

  inline ShowGetResponse& operator=(const ShowGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowGetResponse& operator=(ShowGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowGetResponse* internal_default_instance() {
    return reinterpret_cast<const ShowGetResponse*>(
               &_ShowGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ShowGetResponse& a, ShowGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowGetResponse* New() const final {
    return CreateMaybeMessage<ShowGetResponse>(nullptr);
  }

  ShowGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowGetResponse& from);
  void MergeFrom(const ShowGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowGetResponse";
  }
  protected:
  explicit ShowGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // .proto.Show show = 1;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);
  private:
  const ::proto::Show& _internal_show() const;
  ::proto::Show* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::proto::Show* show);
  ::proto::Show* unsafe_arena_release_show();

  // @@protoc_insertion_point(class_scope:proto.ShowGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Show* show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowCreateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowCreateResponse) */ {
 public:
  inline ShowCreateResponse() : ShowCreateResponse(nullptr) {};
  virtual ~ShowCreateResponse();

  ShowCreateResponse(const ShowCreateResponse& from);
  ShowCreateResponse(ShowCreateResponse&& from) noexcept
    : ShowCreateResponse() {
    *this = ::std::move(from);
  }

  inline ShowCreateResponse& operator=(const ShowCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowCreateResponse& operator=(ShowCreateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowCreateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCreateResponse* internal_default_instance() {
    return reinterpret_cast<const ShowCreateResponse*>(
               &_ShowCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ShowCreateResponse& a, ShowCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowCreateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowCreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowCreateResponse* New() const final {
    return CreateMaybeMessage<ShowCreateResponse>(nullptr);
  }

  ShowCreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowCreateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowCreateResponse& from);
  void MergeFrom(const ShowCreateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCreateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowCreateResponse";
  }
  protected:
  explicit ShowCreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // .proto.Show show = 1;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);
  private:
  const ::proto::Show& _internal_show() const;
  ::proto::Show* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::proto::Show* show);
  ::proto::Show* unsafe_arena_release_show();

  // @@protoc_insertion_point(class_scope:proto.ShowCreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Show* show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowDuplicateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowDuplicateResponse) */ {
 public:
  inline ShowDuplicateResponse() : ShowDuplicateResponse(nullptr) {};
  virtual ~ShowDuplicateResponse();

  ShowDuplicateResponse(const ShowDuplicateResponse& from);
  ShowDuplicateResponse(ShowDuplicateResponse&& from) noexcept
    : ShowDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline ShowDuplicateResponse& operator=(const ShowDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowDuplicateResponse& operator=(ShowDuplicateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowDuplicateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const ShowDuplicateResponse*>(
               &_ShowDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ShowDuplicateResponse& a, ShowDuplicateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowDuplicateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowDuplicateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowDuplicateResponse* New() const final {
    return CreateMaybeMessage<ShowDuplicateResponse>(nullptr);
  }

  ShowDuplicateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowDuplicateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowDuplicateResponse& from);
  void MergeFrom(const ShowDuplicateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowDuplicateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowDuplicateResponse";
  }
  protected:
  explicit ShowDuplicateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // .proto.Show show = 1;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);
  private:
  const ::proto::Show& _internal_show() const;
  ::proto::Show* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::proto::Show* show);
  ::proto::Show* unsafe_arena_release_show();

  // @@protoc_insertion_point(class_scope:proto.ShowDuplicateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Show* show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowLoadResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowLoadResponse) */ {
 public:
  inline ShowLoadResponse() : ShowLoadResponse(nullptr) {};
  virtual ~ShowLoadResponse();

  ShowLoadResponse(const ShowLoadResponse& from);
  ShowLoadResponse(ShowLoadResponse&& from) noexcept
    : ShowLoadResponse() {
    *this = ::std::move(from);
  }

  inline ShowLoadResponse& operator=(const ShowLoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowLoadResponse& operator=(ShowLoadResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowLoadResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowLoadResponse* internal_default_instance() {
    return reinterpret_cast<const ShowLoadResponse*>(
               &_ShowLoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ShowLoadResponse& a, ShowLoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowLoadResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowLoadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowLoadResponse* New() const final {
    return CreateMaybeMessage<ShowLoadResponse>(nullptr);
  }

  ShowLoadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowLoadResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowLoadResponse& from);
  void MergeFrom(const ShowLoadResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowLoadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowLoadResponse";
  }
  protected:
  explicit ShowLoadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // .proto.Show show = 1;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);
  private:
  const ::proto::Show& _internal_show() const;
  ::proto::Show* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::proto::Show* show);
  ::proto::Show* unsafe_arena_release_show();

  // @@protoc_insertion_point(class_scope:proto.ShowLoadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Show* show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class ShowSwitchSourceResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ShowSwitchSourceResponse) */ {
 public:
  inline ShowSwitchSourceResponse() : ShowSwitchSourceResponse(nullptr) {};
  virtual ~ShowSwitchSourceResponse();

  ShowSwitchSourceResponse(const ShowSwitchSourceResponse& from);
  ShowSwitchSourceResponse(ShowSwitchSourceResponse&& from) noexcept
    : ShowSwitchSourceResponse() {
    *this = ::std::move(from);
  }

  inline ShowSwitchSourceResponse& operator=(const ShowSwitchSourceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowSwitchSourceResponse& operator=(ShowSwitchSourceResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowSwitchSourceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowSwitchSourceResponse* internal_default_instance() {
    return reinterpret_cast<const ShowSwitchSourceResponse*>(
               &_ShowSwitchSourceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ShowSwitchSourceResponse& a, ShowSwitchSourceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowSwitchSourceResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowSwitchSourceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowSwitchSourceResponse* New() const final {
    return CreateMaybeMessage<ShowSwitchSourceResponse>(nullptr);
  }

  ShowSwitchSourceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowSwitchSourceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowSwitchSourceResponse& from);
  void MergeFrom(const ShowSwitchSourceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSwitchSourceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ShowSwitchSourceResponse";
  }
  protected:
  explicit ShowSwitchSourceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // .proto.Show show = 1;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);
  private:
  const ::proto::Show& _internal_show() const;
  ::proto::Show* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::proto::Show* show);
  ::proto::Show* unsafe_arena_release_show();

  // @@protoc_insertion_point(class_scope:proto.ShowSwitchSourceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Show* show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetResponse) */ {
 public:
  inline SceneGetResponse() : SceneGetResponse(nullptr) {};
  virtual ~SceneGetResponse();

  SceneGetResponse(const SceneGetResponse& from);
  SceneGetResponse(SceneGetResponse&& from) noexcept
    : SceneGetResponse() {
    *this = ::std::move(from);
  }

  inline SceneGetResponse& operator=(const SceneGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneGetResponse& operator=(SceneGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetResponse* internal_default_instance() {
    return reinterpret_cast<const SceneGetResponse*>(
               &_SceneGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SceneGetResponse& a, SceneGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneGetResponse* New() const final {
    return CreateMaybeMessage<SceneGetResponse>(nullptr);
  }

  SceneGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneGetResponse& from);
  void MergeFrom(const SceneGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneGetResponse";
  }
  protected:
  explicit SceneGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
  };
  // .proto.Scene scene = 1;
  bool has_scene() const;
  private:
  bool _internal_has_scene() const;
  public:
  void clear_scene();
  const ::proto::Scene& scene() const;
  ::proto::Scene* release_scene();
  ::proto::Scene* mutable_scene();
  void set_allocated_scene(::proto::Scene* scene);
  private:
  const ::proto::Scene& _internal_scene() const;
  ::proto::Scene* _internal_mutable_scene();
  public:
  void unsafe_arena_set_allocated_scene(
      ::proto::Scene* scene);
  ::proto::Scene* unsafe_arena_release_scene();

  // @@protoc_insertion_point(class_scope:proto.SceneGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Scene* scene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneAddResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneAddResponse) */ {
 public:
  inline SceneAddResponse() : SceneAddResponse(nullptr) {};
  virtual ~SceneAddResponse();

  SceneAddResponse(const SceneAddResponse& from);
  SceneAddResponse(SceneAddResponse&& from) noexcept
    : SceneAddResponse() {
    *this = ::std::move(from);
  }

  inline SceneAddResponse& operator=(const SceneAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneAddResponse& operator=(SceneAddResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneAddResponse* internal_default_instance() {
    return reinterpret_cast<const SceneAddResponse*>(
               &_SceneAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SceneAddResponse& a, SceneAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneAddResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneAddResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneAddResponse* New() const final {
    return CreateMaybeMessage<SceneAddResponse>(nullptr);
  }

  SceneAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneAddResponse& from);
  void MergeFrom(const SceneAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneAddResponse";
  }
  protected:
  explicit SceneAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
  };
  // .proto.Scene scene = 1;
  bool has_scene() const;
  private:
  bool _internal_has_scene() const;
  public:
  void clear_scene();
  const ::proto::Scene& scene() const;
  ::proto::Scene* release_scene();
  ::proto::Scene* mutable_scene();
  void set_allocated_scene(::proto::Scene* scene);
  private:
  const ::proto::Scene& _internal_scene() const;
  ::proto::Scene* _internal_mutable_scene();
  public:
  void unsafe_arena_set_allocated_scene(
      ::proto::Scene* scene);
  ::proto::Scene* unsafe_arena_release_scene();

  // @@protoc_insertion_point(class_scope:proto.SceneAddResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Scene* scene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneDuplicateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneDuplicateResponse) */ {
 public:
  inline SceneDuplicateResponse() : SceneDuplicateResponse(nullptr) {};
  virtual ~SceneDuplicateResponse();

  SceneDuplicateResponse(const SceneDuplicateResponse& from);
  SceneDuplicateResponse(SceneDuplicateResponse&& from) noexcept
    : SceneDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline SceneDuplicateResponse& operator=(const SceneDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneDuplicateResponse& operator=(SceneDuplicateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneDuplicateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const SceneDuplicateResponse*>(
               &_SceneDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SceneDuplicateResponse& a, SceneDuplicateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneDuplicateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneDuplicateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneDuplicateResponse* New() const final {
    return CreateMaybeMessage<SceneDuplicateResponse>(nullptr);
  }

  SceneDuplicateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneDuplicateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneDuplicateResponse& from);
  void MergeFrom(const SceneDuplicateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneDuplicateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneDuplicateResponse";
  }
  protected:
  explicit SceneDuplicateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneFieldNumber = 1,
  };
  // .proto.Scene scene = 1;
  bool has_scene() const;
  private:
  bool _internal_has_scene() const;
  public:
  void clear_scene();
  const ::proto::Scene& scene() const;
  ::proto::Scene* release_scene();
  ::proto::Scene* mutable_scene();
  void set_allocated_scene(::proto::Scene* scene);
  private:
  const ::proto::Scene& _internal_scene() const;
  ::proto::Scene* _internal_mutable_scene();
  public:
  void unsafe_arena_set_allocated_scene(
      ::proto::Scene* scene);
  ::proto::Scene* unsafe_arena_release_scene();

  // @@protoc_insertion_point(class_scope:proto.SceneDuplicateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Scene* scene_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneSetAsCurrentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneSetAsCurrentResponse) */ {
 public:
  inline SceneSetAsCurrentResponse() : SceneSetAsCurrentResponse(nullptr) {};
  virtual ~SceneSetAsCurrentResponse();

  SceneSetAsCurrentResponse(const SceneSetAsCurrentResponse& from);
  SceneSetAsCurrentResponse(SceneSetAsCurrentResponse&& from) noexcept
    : SceneSetAsCurrentResponse() {
    *this = ::std::move(from);
  }

  inline SceneSetAsCurrentResponse& operator=(const SceneSetAsCurrentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneSetAsCurrentResponse& operator=(SceneSetAsCurrentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneSetAsCurrentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneSetAsCurrentResponse* internal_default_instance() {
    return reinterpret_cast<const SceneSetAsCurrentResponse*>(
               &_SceneSetAsCurrentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SceneSetAsCurrentResponse& a, SceneSetAsCurrentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneSetAsCurrentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneSetAsCurrentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneSetAsCurrentResponse* New() const final {
    return CreateMaybeMessage<SceneSetAsCurrentResponse>(nullptr);
  }

  SceneSetAsCurrentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneSetAsCurrentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneSetAsCurrentResponse& from);
  void MergeFrom(const SceneSetAsCurrentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneSetAsCurrentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneSetAsCurrentResponse";
  }
  protected:
  explicit SceneSetAsCurrentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowFieldNumber = 1,
  };
  // .proto.Show show = 1;
  bool has_show() const;
  private:
  bool _internal_has_show() const;
  public:
  void clear_show();
  const ::proto::Show& show() const;
  ::proto::Show* release_show();
  ::proto::Show* mutable_show();
  void set_allocated_show(::proto::Show* show);
  private:
  const ::proto::Show& _internal_show() const;
  ::proto::Show* _internal_mutable_show();
  public:
  void unsafe_arena_set_allocated_show(
      ::proto::Show* show);
  ::proto::Show* unsafe_arena_release_show();

  // @@protoc_insertion_point(class_scope:proto.SceneSetAsCurrentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Show* show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SceneGetCurrentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SceneGetCurrentResponse) */ {
 public:
  inline SceneGetCurrentResponse() : SceneGetCurrentResponse(nullptr) {};
  virtual ~SceneGetCurrentResponse();

  SceneGetCurrentResponse(const SceneGetCurrentResponse& from);
  SceneGetCurrentResponse(SceneGetCurrentResponse&& from) noexcept
    : SceneGetCurrentResponse() {
    *this = ::std::move(from);
  }

  inline SceneGetCurrentResponse& operator=(const SceneGetCurrentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneGetCurrentResponse& operator=(SceneGetCurrentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneGetCurrentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneGetCurrentResponse* internal_default_instance() {
    return reinterpret_cast<const SceneGetCurrentResponse*>(
               &_SceneGetCurrentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SceneGetCurrentResponse& a, SceneGetCurrentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneGetCurrentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SceneGetCurrentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneGetCurrentResponse* New() const final {
    return CreateMaybeMessage<SceneGetCurrentResponse>(nullptr);
  }

  SceneGetCurrentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneGetCurrentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneGetCurrentResponse& from);
  void MergeFrom(const SceneGetCurrentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneGetCurrentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SceneGetCurrentResponse";
  }
  protected:
  explicit SceneGetCurrentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSceneIdFieldNumber = 2,
  };
  // string scene_id = 2;
  void clear_scene_id();
  const std::string& scene_id() const;
  void set_scene_id(const std::string& value);
  void set_scene_id(std::string&& value);
  void set_scene_id(const char* value);
  void set_scene_id(const char* value, size_t size);
  std::string* mutable_scene_id();
  std::string* release_scene_id();
  void set_allocated_scene_id(std::string* scene_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scene_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scene_id(
      std::string* scene_id);
  private:
  const std::string& _internal_scene_id() const;
  void _internal_set_scene_id(const std::string& value);
  std::string* _internal_mutable_scene_id();
  public:

  // @@protoc_insertion_point(class_scope:proto.SceneGetCurrentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceGetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceGetResponse) */ {
 public:
  inline SourceGetResponse() : SourceGetResponse(nullptr) {};
  virtual ~SourceGetResponse();

  SourceGetResponse(const SourceGetResponse& from);
  SourceGetResponse(SourceGetResponse&& from) noexcept
    : SourceGetResponse() {
    *this = ::std::move(from);
  }

  inline SourceGetResponse& operator=(const SourceGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceGetResponse& operator=(SourceGetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceGetResponse* internal_default_instance() {
    return reinterpret_cast<const SourceGetResponse*>(
               &_SourceGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SourceGetResponse& a, SourceGetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceGetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceGetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceGetResponse* New() const final {
    return CreateMaybeMessage<SourceGetResponse>(nullptr);
  }

  SourceGetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceGetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceGetResponse& from);
  void MergeFrom(const SourceGetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceGetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceGetResponse";
  }
  protected:
  explicit SourceGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // .proto.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);
  private:
  const ::proto::Source& _internal_source() const;
  ::proto::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::proto::Source* source);
  ::proto::Source* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:proto.SourceGetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Source* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceAddResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceAddResponse) */ {
 public:
  inline SourceAddResponse() : SourceAddResponse(nullptr) {};
  virtual ~SourceAddResponse();

  SourceAddResponse(const SourceAddResponse& from);
  SourceAddResponse(SourceAddResponse&& from) noexcept
    : SourceAddResponse() {
    *this = ::std::move(from);
  }

  inline SourceAddResponse& operator=(const SourceAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceAddResponse& operator=(SourceAddResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceAddResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceAddResponse* internal_default_instance() {
    return reinterpret_cast<const SourceAddResponse*>(
               &_SourceAddResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SourceAddResponse& a, SourceAddResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceAddResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceAddResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceAddResponse* New() const final {
    return CreateMaybeMessage<SourceAddResponse>(nullptr);
  }

  SourceAddResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceAddResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceAddResponse& from);
  void MergeFrom(const SourceAddResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceAddResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceAddResponse";
  }
  protected:
  explicit SourceAddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // .proto.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);
  private:
  const ::proto::Source& _internal_source() const;
  ::proto::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::proto::Source* source);
  ::proto::Source* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:proto.SourceAddResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Source* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceDuplicateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceDuplicateResponse) */ {
 public:
  inline SourceDuplicateResponse() : SourceDuplicateResponse(nullptr) {};
  virtual ~SourceDuplicateResponse();

  SourceDuplicateResponse(const SourceDuplicateResponse& from);
  SourceDuplicateResponse(SourceDuplicateResponse&& from) noexcept
    : SourceDuplicateResponse() {
    *this = ::std::move(from);
  }

  inline SourceDuplicateResponse& operator=(const SourceDuplicateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceDuplicateResponse& operator=(SourceDuplicateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceDuplicateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceDuplicateResponse* internal_default_instance() {
    return reinterpret_cast<const SourceDuplicateResponse*>(
               &_SourceDuplicateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(SourceDuplicateResponse& a, SourceDuplicateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceDuplicateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceDuplicateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceDuplicateResponse* New() const final {
    return CreateMaybeMessage<SourceDuplicateResponse>(nullptr);
  }

  SourceDuplicateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceDuplicateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceDuplicateResponse& from);
  void MergeFrom(const SourceDuplicateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceDuplicateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceDuplicateResponse";
  }
  protected:
  explicit SourceDuplicateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // .proto.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);
  private:
  const ::proto::Source& _internal_source() const;
  ::proto::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::proto::Source* source);
  ::proto::Source* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:proto.SourceDuplicateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Source* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class SourceSetPropertiesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.SourceSetPropertiesResponse) */ {
 public:
  inline SourceSetPropertiesResponse() : SourceSetPropertiesResponse(nullptr) {};
  virtual ~SourceSetPropertiesResponse();

  SourceSetPropertiesResponse(const SourceSetPropertiesResponse& from);
  SourceSetPropertiesResponse(SourceSetPropertiesResponse&& from) noexcept
    : SourceSetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline SourceSetPropertiesResponse& operator=(const SourceSetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SourceSetPropertiesResponse& operator=(SourceSetPropertiesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SourceSetPropertiesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SourceSetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const SourceSetPropertiesResponse*>(
               &_SourceSetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(SourceSetPropertiesResponse& a, SourceSetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SourceSetPropertiesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SourceSetPropertiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SourceSetPropertiesResponse* New() const final {
    return CreateMaybeMessage<SourceSetPropertiesResponse>(nullptr);
  }

  SourceSetPropertiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SourceSetPropertiesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SourceSetPropertiesResponse& from);
  void MergeFrom(const SourceSetPropertiesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SourceSetPropertiesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.SourceSetPropertiesResponse";
  }
  protected:
  explicit SourceSetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
  };
  // .proto.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::proto::Source& source() const;
  ::proto::Source* release_source();
  ::proto::Source* mutable_source();
  void set_allocated_source(::proto::Source* source);
  private:
  const ::proto::Source& _internal_source() const;
  ::proto::Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::proto::Source* source);
  ::proto::Source* unsafe_arena_release_source();

  // @@protoc_insertion_point(class_scope:proto.SourceSetPropertiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::proto::Source* source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// -------------------------------------------------------------------

class HealthResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.HealthResponse) */ {
 public:
  inline HealthResponse() : HealthResponse(nullptr) {};
  virtual ~HealthResponse();

  HealthResponse(const HealthResponse& from);
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthResponse* New() const final {
    return CreateMaybeMessage<HealthResponse>(nullptr);
  }

  HealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthResponse& from);
  void MergeFrom(const HealthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.HealthResponse";
  }
  protected:
  explicit HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_studio_2eproto);
    return ::descriptor_table_studio_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:proto.HealthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_studio_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StudioState

// string active_show_id = 1;
inline void StudioState::clear_active_show_id() {
  active_show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StudioState::active_show_id() const {
  // @@protoc_insertion_point(field_get:proto.StudioState.active_show_id)
  return _internal_active_show_id();
}
inline void StudioState::set_active_show_id(const std::string& value) {
  _internal_set_active_show_id(value);
  // @@protoc_insertion_point(field_set:proto.StudioState.active_show_id)
}
inline std::string* StudioState::mutable_active_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.StudioState.active_show_id)
  return _internal_mutable_active_show_id();
}
inline const std::string& StudioState::_internal_active_show_id() const {
  return active_show_id_.Get();
}
inline void StudioState::_internal_set_active_show_id(const std::string& value) {
  
  active_show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StudioState::set_active_show_id(std::string&& value) {
  
  active_show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.StudioState.active_show_id)
}
inline void StudioState::set_active_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.StudioState.active_show_id)
}
inline void StudioState::set_active_show_id(const char* value,
    size_t size) {
  
  active_show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.StudioState.active_show_id)
}
inline std::string* StudioState::_internal_mutable_active_show_id() {
  
  return active_show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StudioState::release_active_show_id() {
  // @@protoc_insertion_point(field_release:proto.StudioState.active_show_id)
  return active_show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StudioState::set_allocated_active_show_id(std::string* active_show_id) {
  if (active_show_id != nullptr) {
    
  } else {
    
  }
  active_show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.StudioState.active_show_id)
}
inline std::string* StudioState::unsafe_arena_release_active_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.StudioState.active_show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return active_show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StudioState::unsafe_arena_set_allocated_active_show_id(
    std::string* active_show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (active_show_id != nullptr) {
    
  } else {
    
  }
  active_show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      active_show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.StudioState.active_show_id)
}

// repeated .proto.Show shows = 2;
inline int StudioState::_internal_shows_size() const {
  return shows_.size();
}
inline int StudioState::shows_size() const {
  return _internal_shows_size();
}
inline void StudioState::clear_shows() {
  shows_.Clear();
}
inline ::proto::Show* StudioState::mutable_shows(int index) {
  // @@protoc_insertion_point(field_mutable:proto.StudioState.shows)
  return shows_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Show >*
StudioState::mutable_shows() {
  // @@protoc_insertion_point(field_mutable_list:proto.StudioState.shows)
  return &shows_;
}
inline const ::proto::Show& StudioState::_internal_shows(int index) const {
  return shows_.Get(index);
}
inline const ::proto::Show& StudioState::shows(int index) const {
  // @@protoc_insertion_point(field_get:proto.StudioState.shows)
  return _internal_shows(index);
}
inline ::proto::Show* StudioState::_internal_add_shows() {
  return shows_.Add();
}
inline ::proto::Show* StudioState::add_shows() {
  // @@protoc_insertion_point(field_add:proto.StudioState.shows)
  return _internal_add_shows();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Show >&
StudioState::shows() const {
  // @@protoc_insertion_point(field_list:proto.StudioState.shows)
  return shows_;
}

// -------------------------------------------------------------------

// Show

// string id = 1;
inline void Show::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Show::id() const {
  // @@protoc_insertion_point(field_get:proto.Show.id)
  return _internal_id();
}
inline void Show::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Show.id)
}
inline std::string* Show::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto.Show.id)
  return _internal_mutable_id();
}
inline const std::string& Show::_internal_id() const {
  return id_.Get();
}
inline void Show::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Show::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Show.id)
}
inline void Show::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Show.id)
}
inline void Show::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Show.id)
}
inline std::string* Show::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Show::release_id() {
  // @@protoc_insertion_point(field_release:proto.Show.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Show::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Show.id)
}
inline std::string* Show::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Show.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Show::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Show.id)
}

// string name = 2;
inline void Show::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Show::name() const {
  // @@protoc_insertion_point(field_get:proto.Show.name)
  return _internal_name();
}
inline void Show::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.Show.name)
}
inline std::string* Show::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.Show.name)
  return _internal_mutable_name();
}
inline const std::string& Show::_internal_name() const {
  return name_.Get();
}
inline void Show::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Show::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Show.name)
}
inline void Show::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Show.name)
}
inline void Show::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Show.name)
}
inline std::string* Show::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Show::release_name() {
  // @@protoc_insertion_point(field_release:proto.Show.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Show::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Show.name)
}
inline std::string* Show::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Show.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Show::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Show.name)
}

// string active_scene_id = 3;
inline void Show::clear_active_scene_id() {
  active_scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Show::active_scene_id() const {
  // @@protoc_insertion_point(field_get:proto.Show.active_scene_id)
  return _internal_active_scene_id();
}
inline void Show::set_active_scene_id(const std::string& value) {
  _internal_set_active_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.Show.active_scene_id)
}
inline std::string* Show::mutable_active_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.Show.active_scene_id)
  return _internal_mutable_active_scene_id();
}
inline const std::string& Show::_internal_active_scene_id() const {
  return active_scene_id_.Get();
}
inline void Show::_internal_set_active_scene_id(const std::string& value) {
  
  active_scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Show::set_active_scene_id(std::string&& value) {
  
  active_scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Show.active_scene_id)
}
inline void Show::set_active_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Show.active_scene_id)
}
inline void Show::set_active_scene_id(const char* value,
    size_t size) {
  
  active_scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Show.active_scene_id)
}
inline std::string* Show::_internal_mutable_active_scene_id() {
  
  return active_scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Show::release_active_scene_id() {
  // @@protoc_insertion_point(field_release:proto.Show.active_scene_id)
  return active_scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Show::set_allocated_active_scene_id(std::string* active_scene_id) {
  if (active_scene_id != nullptr) {
    
  } else {
    
  }
  active_scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Show.active_scene_id)
}
inline std::string* Show::unsafe_arena_release_active_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Show.active_scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return active_scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Show::unsafe_arena_set_allocated_active_scene_id(
    std::string* active_scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (active_scene_id != nullptr) {
    
  } else {
    
  }
  active_scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      active_scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Show.active_scene_id)
}

// repeated .proto.Scene scenes = 4;
inline int Show::_internal_scenes_size() const {
  return scenes_.size();
}
inline int Show::scenes_size() const {
  return _internal_scenes_size();
}
inline void Show::clear_scenes() {
  scenes_.Clear();
}
inline ::proto::Scene* Show::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Show.scenes)
  return scenes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Scene >*
Show::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:proto.Show.scenes)
  return &scenes_;
}
inline const ::proto::Scene& Show::_internal_scenes(int index) const {
  return scenes_.Get(index);
}
inline const ::proto::Scene& Show::scenes(int index) const {
  // @@protoc_insertion_point(field_get:proto.Show.scenes)
  return _internal_scenes(index);
}
inline ::proto::Scene* Show::_internal_add_scenes() {
  return scenes_.Add();
}
inline ::proto::Scene* Show::add_scenes() {
  // @@protoc_insertion_point(field_add:proto.Show.scenes)
  return _internal_add_scenes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Scene >&
Show::scenes() const {
  // @@protoc_insertion_point(field_list:proto.Show.scenes)
  return scenes_;
}

// -------------------------------------------------------------------

// Scene

// string id = 1;
inline void Scene::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Scene::id() const {
  // @@protoc_insertion_point(field_get:proto.Scene.id)
  return _internal_id();
}
inline void Scene::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Scene.id)
}
inline std::string* Scene::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto.Scene.id)
  return _internal_mutable_id();
}
inline const std::string& Scene::_internal_id() const {
  return id_.Get();
}
inline void Scene::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Scene::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Scene.id)
}
inline void Scene::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Scene.id)
}
inline void Scene::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Scene.id)
}
inline std::string* Scene::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Scene::release_id() {
  // @@protoc_insertion_point(field_release:proto.Scene.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scene::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Scene.id)
}
inline std::string* Scene::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Scene.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Scene::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Scene.id)
}

// string name = 2;
inline void Scene::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Scene::name() const {
  // @@protoc_insertion_point(field_get:proto.Scene.name)
  return _internal_name();
}
inline void Scene::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.Scene.name)
}
inline std::string* Scene::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.Scene.name)
  return _internal_mutable_name();
}
inline const std::string& Scene::_internal_name() const {
  return name_.Get();
}
inline void Scene::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Scene::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Scene.name)
}
inline void Scene::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Scene.name)
}
inline void Scene::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Scene.name)
}
inline std::string* Scene::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Scene::release_name() {
  // @@protoc_insertion_point(field_release:proto.Scene.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scene::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Scene.name)
}
inline std::string* Scene::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Scene.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Scene::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Scene.name)
}

// string active_source_id = 3;
inline void Scene::clear_active_source_id() {
  active_source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Scene::active_source_id() const {
  // @@protoc_insertion_point(field_get:proto.Scene.active_source_id)
  return _internal_active_source_id();
}
inline void Scene::set_active_source_id(const std::string& value) {
  _internal_set_active_source_id(value);
  // @@protoc_insertion_point(field_set:proto.Scene.active_source_id)
}
inline std::string* Scene::mutable_active_source_id() {
  // @@protoc_insertion_point(field_mutable:proto.Scene.active_source_id)
  return _internal_mutable_active_source_id();
}
inline const std::string& Scene::_internal_active_source_id() const {
  return active_source_id_.Get();
}
inline void Scene::_internal_set_active_source_id(const std::string& value) {
  
  active_source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Scene::set_active_source_id(std::string&& value) {
  
  active_source_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Scene.active_source_id)
}
inline void Scene::set_active_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  active_source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Scene.active_source_id)
}
inline void Scene::set_active_source_id(const char* value,
    size_t size) {
  
  active_source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Scene.active_source_id)
}
inline std::string* Scene::_internal_mutable_active_source_id() {
  
  return active_source_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Scene::release_active_source_id() {
  // @@protoc_insertion_point(field_release:proto.Scene.active_source_id)
  return active_source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scene::set_allocated_active_source_id(std::string* active_source_id) {
  if (active_source_id != nullptr) {
    
  } else {
    
  }
  active_source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), active_source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Scene.active_source_id)
}
inline std::string* Scene::unsafe_arena_release_active_source_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Scene.active_source_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return active_source_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Scene::unsafe_arena_set_allocated_active_source_id(
    std::string* active_source_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (active_source_id != nullptr) {
    
  } else {
    
  }
  active_source_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      active_source_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Scene.active_source_id)
}

// repeated .proto.Source sources = 4;
inline int Scene::_internal_sources_size() const {
  return sources_.size();
}
inline int Scene::sources_size() const {
  return _internal_sources_size();
}
inline void Scene::clear_sources() {
  sources_.Clear();
}
inline ::proto::Source* Scene::mutable_sources(int index) {
  // @@protoc_insertion_point(field_mutable:proto.Scene.sources)
  return sources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Source >*
Scene::mutable_sources() {
  // @@protoc_insertion_point(field_mutable_list:proto.Scene.sources)
  return &sources_;
}
inline const ::proto::Source& Scene::_internal_sources(int index) const {
  return sources_.Get(index);
}
inline const ::proto::Source& Scene::sources(int index) const {
  // @@protoc_insertion_point(field_get:proto.Scene.sources)
  return _internal_sources(index);
}
inline ::proto::Source* Scene::_internal_add_sources() {
  return sources_.Add();
}
inline ::proto::Source* Scene::add_sources() {
  // @@protoc_insertion_point(field_add:proto.Scene.sources)
  return _internal_add_sources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::Source >&
Scene::sources() const {
  // @@protoc_insertion_point(field_list:proto.Scene.sources)
  return sources_;
}

// -------------------------------------------------------------------

// Source

// string id = 1;
inline void Source::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Source::id() const {
  // @@protoc_insertion_point(field_get:proto.Source.id)
  return _internal_id();
}
inline void Source::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.Source.id)
}
inline std::string* Source::mutable_id() {
  // @@protoc_insertion_point(field_mutable:proto.Source.id)
  return _internal_mutable_id();
}
inline const std::string& Source::_internal_id() const {
  return id_.Get();
}
inline void Source::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Source::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.id)
}
inline void Source::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Source.id)
}
inline void Source::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Source.id)
}
inline std::string* Source::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Source::release_id() {
  // @@protoc_insertion_point(field_release:proto.Source.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Source::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Source.id)
}
inline std::string* Source::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Source.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Source::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Source.id)
}

// string name = 2;
inline void Source::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Source::name() const {
  // @@protoc_insertion_point(field_get:proto.Source.name)
  return _internal_name();
}
inline void Source::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:proto.Source.name)
}
inline std::string* Source::mutable_name() {
  // @@protoc_insertion_point(field_mutable:proto.Source.name)
  return _internal_mutable_name();
}
inline const std::string& Source::_internal_name() const {
  return name_.Get();
}
inline void Source::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Source::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.name)
}
inline void Source::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Source.name)
}
inline void Source::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Source.name)
}
inline std::string* Source::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Source::release_name() {
  // @@protoc_insertion_point(field_release:proto.Source.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Source::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Source.name)
}
inline std::string* Source::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Source.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Source::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Source.name)
}

// string type = 3;
inline void Source::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Source::type() const {
  // @@protoc_insertion_point(field_get:proto.Source.type)
  return _internal_type();
}
inline void Source::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:proto.Source.type)
}
inline std::string* Source::mutable_type() {
  // @@protoc_insertion_point(field_mutable:proto.Source.type)
  return _internal_mutable_type();
}
inline const std::string& Source::_internal_type() const {
  return type_.Get();
}
inline void Source::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Source::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.type)
}
inline void Source::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Source.type)
}
inline void Source::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Source.type)
}
inline std::string* Source::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Source::release_type() {
  // @@protoc_insertion_point(field_release:proto.Source.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Source::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Source.type)
}
inline std::string* Source::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Source.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Source::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Source.type)
}

// string url = 4;
inline void Source::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Source::url() const {
  // @@protoc_insertion_point(field_get:proto.Source.url)
  return _internal_url();
}
inline void Source::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:proto.Source.url)
}
inline std::string* Source::mutable_url() {
  // @@protoc_insertion_point(field_mutable:proto.Source.url)
  return _internal_mutable_url();
}
inline const std::string& Source::_internal_url() const {
  return url_.Get();
}
inline void Source::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Source::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.Source.url)
}
inline void Source::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.Source.url)
}
inline void Source::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.Source.url)
}
inline std::string* Source::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Source::release_url() {
  // @@protoc_insertion_point(field_release:proto.Source.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Source::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.Source.url)
}
inline std::string* Source::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.Source.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Source::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.Source.url)
}

// -------------------------------------------------------------------

// ShowGetRequest

// string show_id = 1;
inline void ShowGetRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShowGetRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowGetRequest.show_id)
  return _internal_show_id();
}
inline void ShowGetRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.ShowGetRequest.show_id)
}
inline std::string* ShowGetRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.ShowGetRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& ShowGetRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void ShowGetRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShowGetRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowGetRequest.show_id)
}
inline void ShowGetRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.ShowGetRequest.show_id)
}
inline void ShowGetRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.ShowGetRequest.show_id)
}
inline std::string* ShowGetRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShowGetRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.ShowGetRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShowGetRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.ShowGetRequest.show_id)
}
inline std::string* ShowGetRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ShowGetRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShowGetRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowGetRequest.show_id)
}

// -------------------------------------------------------------------

// ShowCreateRequest

// string show_name = 1;
inline void ShowCreateRequest::clear_show_name() {
  show_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShowCreateRequest::show_name() const {
  // @@protoc_insertion_point(field_get:proto.ShowCreateRequest.show_name)
  return _internal_show_name();
}
inline void ShowCreateRequest::set_show_name(const std::string& value) {
  _internal_set_show_name(value);
  // @@protoc_insertion_point(field_set:proto.ShowCreateRequest.show_name)
}
inline std::string* ShowCreateRequest::mutable_show_name() {
  // @@protoc_insertion_point(field_mutable:proto.ShowCreateRequest.show_name)
  return _internal_mutable_show_name();
}
inline const std::string& ShowCreateRequest::_internal_show_name() const {
  return show_name_.Get();
}
inline void ShowCreateRequest::_internal_set_show_name(const std::string& value) {
  
  show_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShowCreateRequest::set_show_name(std::string&& value) {
  
  show_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowCreateRequest.show_name)
}
inline void ShowCreateRequest::set_show_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.ShowCreateRequest.show_name)
}
inline void ShowCreateRequest::set_show_name(const char* value,
    size_t size) {
  
  show_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.ShowCreateRequest.show_name)
}
inline std::string* ShowCreateRequest::_internal_mutable_show_name() {
  
  return show_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShowCreateRequest::release_show_name() {
  // @@protoc_insertion_point(field_release:proto.ShowCreateRequest.show_name)
  return show_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShowCreateRequest::set_allocated_show_name(std::string* show_name) {
  if (show_name != nullptr) {
    
  } else {
    
  }
  show_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.ShowCreateRequest.show_name)
}
inline std::string* ShowCreateRequest::unsafe_arena_release_show_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ShowCreateRequest.show_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShowCreateRequest::unsafe_arena_set_allocated_show_name(
    std::string* show_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_name != nullptr) {
    
  } else {
    
  }
  show_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowCreateRequest.show_name)
}

// -------------------------------------------------------------------

// ShowDuplicateRequest

// string show_id = 1;
inline void ShowDuplicateRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShowDuplicateRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowDuplicateRequest.show_id)
  return _internal_show_id();
}
inline void ShowDuplicateRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.ShowDuplicateRequest.show_id)
}
inline std::string* ShowDuplicateRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.ShowDuplicateRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& ShowDuplicateRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void ShowDuplicateRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShowDuplicateRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowDuplicateRequest.show_id)
}
inline void ShowDuplicateRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.ShowDuplicateRequest.show_id)
}
inline void ShowDuplicateRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.ShowDuplicateRequest.show_id)
}
inline std::string* ShowDuplicateRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShowDuplicateRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.ShowDuplicateRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShowDuplicateRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.ShowDuplicateRequest.show_id)
}
inline std::string* ShowDuplicateRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ShowDuplicateRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShowDuplicateRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowDuplicateRequest.show_id)
}

// -------------------------------------------------------------------

// ShowRemoveRequest

// string show_id = 1;
inline void ShowRemoveRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShowRemoveRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.ShowRemoveRequest.show_id)
  return _internal_show_id();
}
inline void ShowRemoveRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.ShowRemoveRequest.show_id)
}
inline std::string* ShowRemoveRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.ShowRemoveRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& ShowRemoveRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void ShowRemoveRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShowRemoveRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowRemoveRequest.show_id)
}
inline void ShowRemoveRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.ShowRemoveRequest.show_id)
}
inline void ShowRemoveRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.ShowRemoveRequest.show_id)
}
inline std::string* ShowRemoveRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShowRemoveRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.ShowRemoveRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShowRemoveRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.ShowRemoveRequest.show_id)
}
inline std::string* ShowRemoveRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ShowRemoveRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShowRemoveRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowRemoveRequest.show_id)
}

// -------------------------------------------------------------------

// ShowLoadRequest

// string show_path = 1;
inline void ShowLoadRequest::clear_show_path() {
  show_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShowLoadRequest::show_path() const {
  // @@protoc_insertion_point(field_get:proto.ShowLoadRequest.show_path)
  return _internal_show_path();
}
inline void ShowLoadRequest::set_show_path(const std::string& value) {
  _internal_set_show_path(value);
  // @@protoc_insertion_point(field_set:proto.ShowLoadRequest.show_path)
}
inline std::string* ShowLoadRequest::mutable_show_path() {
  // @@protoc_insertion_point(field_mutable:proto.ShowLoadRequest.show_path)
  return _internal_mutable_show_path();
}
inline const std::string& ShowLoadRequest::_internal_show_path() const {
  return show_path_.Get();
}
inline void ShowLoadRequest::_internal_set_show_path(const std::string& value) {
  
  show_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShowLoadRequest::set_show_path(std::string&& value) {
  
  show_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.ShowLoadRequest.show_path)
}
inline void ShowLoadRequest::set_show_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.ShowLoadRequest.show_path)
}
inline void ShowLoadRequest::set_show_path(const char* value,
    size_t size) {
  
  show_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.ShowLoadRequest.show_path)
}
inline std::string* ShowLoadRequest::_internal_mutable_show_path() {
  
  return show_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShowLoadRequest::release_show_path() {
  // @@protoc_insertion_point(field_release:proto.ShowLoadRequest.show_path)
  return show_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShowLoadRequest::set_allocated_show_path(std::string* show_path) {
  if (show_path != nullptr) {
    
  } else {
    
  }
  show_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.ShowLoadRequest.show_path)
}
inline std::string* ShowLoadRequest::unsafe_arena_release_show_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.ShowLoadRequest.show_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShowLoadRequest::unsafe_arena_set_allocated_show_path(
    std::string* show_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_path != nullptr) {
    
  } else {
    
  }
  show_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowLoadRequest.show_path)
}

// -------------------------------------------------------------------

// SceneGetRequest

// string show_id = 1;
inline void SceneGetRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneGetRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetRequest.show_id)
  return _internal_show_id();
}
inline void SceneGetRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneGetRequest.show_id)
}
inline std::string* SceneGetRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneGetRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SceneGetRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SceneGetRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneGetRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetRequest.show_id)
}
inline void SceneGetRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneGetRequest.show_id)
}
inline void SceneGetRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetRequest.show_id)
}
inline std::string* SceneGetRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneGetRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneGetRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetRequest.show_id)
}
inline std::string* SceneGetRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneGetRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneGetRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneGetRequest.show_id)
}

// string scene_id = 2;
inline void SceneGetRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneGetRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetRequest.scene_id)
  return _internal_scene_id();
}
inline void SceneGetRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneGetRequest.scene_id)
}
inline std::string* SceneGetRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneGetRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SceneGetRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SceneGetRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneGetRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetRequest.scene_id)
}
inline void SceneGetRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneGetRequest.scene_id)
}
inline void SceneGetRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetRequest.scene_id)
}
inline std::string* SceneGetRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneGetRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneGetRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetRequest.scene_id)
}
inline std::string* SceneGetRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneGetRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneGetRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneGetRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneAddRequest

// string show_id = 1;
inline void SceneAddRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneAddRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneAddRequest.show_id)
  return _internal_show_id();
}
inline void SceneAddRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneAddRequest.show_id)
}
inline std::string* SceneAddRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneAddRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SceneAddRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SceneAddRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneAddRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneAddRequest.show_id)
}
inline void SceneAddRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneAddRequest.show_id)
}
inline void SceneAddRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneAddRequest.show_id)
}
inline std::string* SceneAddRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneAddRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneAddRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneAddRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAddRequest.show_id)
}
inline std::string* SceneAddRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneAddRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneAddRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneAddRequest.show_id)
}

// string scene_name = 2;
inline void SceneAddRequest::clear_scene_name() {
  scene_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneAddRequest::scene_name() const {
  // @@protoc_insertion_point(field_get:proto.SceneAddRequest.scene_name)
  return _internal_scene_name();
}
inline void SceneAddRequest::set_scene_name(const std::string& value) {
  _internal_set_scene_name(value);
  // @@protoc_insertion_point(field_set:proto.SceneAddRequest.scene_name)
}
inline std::string* SceneAddRequest::mutable_scene_name() {
  // @@protoc_insertion_point(field_mutable:proto.SceneAddRequest.scene_name)
  return _internal_mutable_scene_name();
}
inline const std::string& SceneAddRequest::_internal_scene_name() const {
  return scene_name_.Get();
}
inline void SceneAddRequest::_internal_set_scene_name(const std::string& value) {
  
  scene_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneAddRequest::set_scene_name(std::string&& value) {
  
  scene_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneAddRequest.scene_name)
}
inline void SceneAddRequest::set_scene_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneAddRequest.scene_name)
}
inline void SceneAddRequest::set_scene_name(const char* value,
    size_t size) {
  
  scene_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneAddRequest.scene_name)
}
inline std::string* SceneAddRequest::_internal_mutable_scene_name() {
  
  return scene_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneAddRequest::release_scene_name() {
  // @@protoc_insertion_point(field_release:proto.SceneAddRequest.scene_name)
  return scene_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneAddRequest::set_allocated_scene_name(std::string* scene_name) {
  if (scene_name != nullptr) {
    
  } else {
    
  }
  scene_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAddRequest.scene_name)
}
inline std::string* SceneAddRequest::unsafe_arena_release_scene_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneAddRequest.scene_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneAddRequest::unsafe_arena_set_allocated_scene_name(
    std::string* scene_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_name != nullptr) {
    
  } else {
    
  }
  scene_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneAddRequest.scene_name)
}

// -------------------------------------------------------------------

// SceneDuplicateRequest

// string show_id = 1;
inline void SceneDuplicateRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneDuplicateRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneDuplicateRequest.show_id)
  return _internal_show_id();
}
inline void SceneDuplicateRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneDuplicateRequest.show_id)
}
inline std::string* SceneDuplicateRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneDuplicateRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SceneDuplicateRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SceneDuplicateRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneDuplicateRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneDuplicateRequest.show_id)
}
inline void SceneDuplicateRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneDuplicateRequest.show_id)
}
inline void SceneDuplicateRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneDuplicateRequest.show_id)
}
inline std::string* SceneDuplicateRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneDuplicateRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneDuplicateRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneDuplicateRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneDuplicateRequest.show_id)
}
inline std::string* SceneDuplicateRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneDuplicateRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneDuplicateRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneDuplicateRequest.show_id)
}

// string scene_id = 2;
inline void SceneDuplicateRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneDuplicateRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneDuplicateRequest.scene_id)
  return _internal_scene_id();
}
inline void SceneDuplicateRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneDuplicateRequest.scene_id)
}
inline std::string* SceneDuplicateRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneDuplicateRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SceneDuplicateRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SceneDuplicateRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneDuplicateRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneDuplicateRequest.scene_id)
}
inline void SceneDuplicateRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneDuplicateRequest.scene_id)
}
inline void SceneDuplicateRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneDuplicateRequest.scene_id)
}
inline std::string* SceneDuplicateRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneDuplicateRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneDuplicateRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneDuplicateRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneDuplicateRequest.scene_id)
}
inline std::string* SceneDuplicateRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneDuplicateRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneDuplicateRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneDuplicateRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneRemoveRequest

// string show_id = 1;
inline void SceneRemoveRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneRemoveRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneRemoveRequest.show_id)
  return _internal_show_id();
}
inline void SceneRemoveRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneRemoveRequest.show_id)
}
inline std::string* SceneRemoveRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneRemoveRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SceneRemoveRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SceneRemoveRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneRemoveRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneRemoveRequest.show_id)
}
inline void SceneRemoveRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneRemoveRequest.show_id)
}
inline void SceneRemoveRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneRemoveRequest.show_id)
}
inline std::string* SceneRemoveRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneRemoveRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneRemoveRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneRemoveRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneRemoveRequest.show_id)
}
inline std::string* SceneRemoveRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneRemoveRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneRemoveRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneRemoveRequest.show_id)
}

// string scene_id = 2;
inline void SceneRemoveRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneRemoveRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneRemoveRequest.scene_id)
  return _internal_scene_id();
}
inline void SceneRemoveRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneRemoveRequest.scene_id)
}
inline std::string* SceneRemoveRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneRemoveRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SceneRemoveRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SceneRemoveRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneRemoveRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneRemoveRequest.scene_id)
}
inline void SceneRemoveRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneRemoveRequest.scene_id)
}
inline void SceneRemoveRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneRemoveRequest.scene_id)
}
inline std::string* SceneRemoveRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneRemoveRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneRemoveRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneRemoveRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneRemoveRequest.scene_id)
}
inline std::string* SceneRemoveRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneRemoveRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneRemoveRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneRemoveRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneSetAsCurrentRequest

// string show_id = 1;
inline void SceneSetAsCurrentRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneSetAsCurrentRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneSetAsCurrentRequest.show_id)
  return _internal_show_id();
}
inline void SceneSetAsCurrentRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneSetAsCurrentRequest.show_id)
}
inline std::string* SceneSetAsCurrentRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneSetAsCurrentRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SceneSetAsCurrentRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SceneSetAsCurrentRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneSetAsCurrentRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneSetAsCurrentRequest.show_id)
}
inline void SceneSetAsCurrentRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneSetAsCurrentRequest.show_id)
}
inline void SceneSetAsCurrentRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneSetAsCurrentRequest.show_id)
}
inline std::string* SceneSetAsCurrentRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneSetAsCurrentRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneSetAsCurrentRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneSetAsCurrentRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneSetAsCurrentRequest.show_id)
}
inline std::string* SceneSetAsCurrentRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneSetAsCurrentRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneSetAsCurrentRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneSetAsCurrentRequest.show_id)
}

// string scene_id = 2;
inline void SceneSetAsCurrentRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneSetAsCurrentRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneSetAsCurrentRequest.scene_id)
  return _internal_scene_id();
}
inline void SceneSetAsCurrentRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneSetAsCurrentRequest.scene_id)
}
inline std::string* SceneSetAsCurrentRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneSetAsCurrentRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SceneSetAsCurrentRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SceneSetAsCurrentRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneSetAsCurrentRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneSetAsCurrentRequest.scene_id)
}
inline void SceneSetAsCurrentRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneSetAsCurrentRequest.scene_id)
}
inline void SceneSetAsCurrentRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneSetAsCurrentRequest.scene_id)
}
inline std::string* SceneSetAsCurrentRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneSetAsCurrentRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneSetAsCurrentRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneSetAsCurrentRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneSetAsCurrentRequest.scene_id)
}
inline std::string* SceneSetAsCurrentRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneSetAsCurrentRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneSetAsCurrentRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneSetAsCurrentRequest.scene_id)
}

// -------------------------------------------------------------------

// SceneGetCurrentRequest

// string show_id = 1;
inline void SceneGetCurrentRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneGetCurrentRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetCurrentRequest.show_id)
  return _internal_show_id();
}
inline void SceneGetCurrentRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneGetCurrentRequest.show_id)
}
inline std::string* SceneGetCurrentRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneGetCurrentRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SceneGetCurrentRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SceneGetCurrentRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneGetCurrentRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetCurrentRequest.show_id)
}
inline void SceneGetCurrentRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneGetCurrentRequest.show_id)
}
inline void SceneGetCurrentRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetCurrentRequest.show_id)
}
inline std::string* SceneGetCurrentRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneGetCurrentRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetCurrentRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneGetCurrentRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetCurrentRequest.show_id)
}
inline std::string* SceneGetCurrentRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneGetCurrentRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneGetCurrentRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneGetCurrentRequest.show_id)
}

// -------------------------------------------------------------------

// SourceGetRequest

// string show_id = 1;
inline void SourceGetRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceGetRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetRequest.show_id)
  return _internal_show_id();
}
inline void SourceGetRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceGetRequest.show_id)
}
inline std::string* SourceGetRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceGetRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SourceGetRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SourceGetRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceGetRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceGetRequest.show_id)
}
inline void SourceGetRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceGetRequest.show_id)
}
inline void SourceGetRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceGetRequest.show_id)
}
inline std::string* SourceGetRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceGetRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceGetRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceGetRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetRequest.show_id)
}
inline std::string* SourceGetRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceGetRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceGetRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceGetRequest.show_id)
}

// string scene_id = 2;
inline void SourceGetRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceGetRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetRequest.scene_id)
  return _internal_scene_id();
}
inline void SourceGetRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceGetRequest.scene_id)
}
inline std::string* SourceGetRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceGetRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SourceGetRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SourceGetRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceGetRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceGetRequest.scene_id)
}
inline void SourceGetRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceGetRequest.scene_id)
}
inline void SourceGetRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceGetRequest.scene_id)
}
inline std::string* SourceGetRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceGetRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceGetRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceGetRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetRequest.scene_id)
}
inline std::string* SourceGetRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceGetRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceGetRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceGetRequest.scene_id)
}

// string source_id = 3;
inline void SourceGetRequest::clear_source_id() {
  source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceGetRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetRequest.source_id)
  return _internal_source_id();
}
inline void SourceGetRequest::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceGetRequest.source_id)
}
inline std::string* SourceGetRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceGetRequest.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& SourceGetRequest::_internal_source_id() const {
  return source_id_.Get();
}
inline void SourceGetRequest::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceGetRequest::set_source_id(std::string&& value) {
  
  source_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceGetRequest.source_id)
}
inline void SourceGetRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceGetRequest.source_id)
}
inline void SourceGetRequest::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceGetRequest.source_id)
}
inline std::string* SourceGetRequest::_internal_mutable_source_id() {
  
  return source_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceGetRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceGetRequest.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceGetRequest::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetRequest.source_id)
}
inline std::string* SourceGetRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceGetRequest.source_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceGetRequest::unsafe_arena_set_allocated_source_id(
    std::string* source_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceGetRequest.source_id)
}

// -------------------------------------------------------------------

// SourceAddRequest

// string show_id = 1;
inline void SourceAddRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceAddRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.show_id)
  return _internal_show_id();
}
inline void SourceAddRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.show_id)
}
inline std::string* SourceAddRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SourceAddRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SourceAddRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceAddRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.show_id)
}
inline void SourceAddRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.show_id)
}
inline void SourceAddRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.show_id)
}
inline std::string* SourceAddRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceAddRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceAddRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.show_id)
}
inline std::string* SourceAddRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceAddRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceAddRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceAddRequest.show_id)
}

// string scene_id = 2;
inline void SourceAddRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceAddRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.scene_id)
  return _internal_scene_id();
}
inline void SourceAddRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.scene_id)
}
inline std::string* SourceAddRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SourceAddRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SourceAddRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceAddRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.scene_id)
}
inline void SourceAddRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.scene_id)
}
inline void SourceAddRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.scene_id)
}
inline std::string* SourceAddRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceAddRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceAddRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.scene_id)
}
inline std::string* SourceAddRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceAddRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceAddRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceAddRequest.scene_id)
}

// string source_name = 3;
inline void SourceAddRequest::clear_source_name() {
  source_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceAddRequest::source_name() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.source_name)
  return _internal_source_name();
}
inline void SourceAddRequest::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.source_name)
}
inline std::string* SourceAddRequest::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& SourceAddRequest::_internal_source_name() const {
  return source_name_.Get();
}
inline void SourceAddRequest::_internal_set_source_name(const std::string& value) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceAddRequest::set_source_name(std::string&& value) {
  
  source_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.source_name)
}
inline void SourceAddRequest::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.source_name)
}
inline void SourceAddRequest::set_source_name(const char* value,
    size_t size) {
  
  source_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.source_name)
}
inline std::string* SourceAddRequest::_internal_mutable_source_name() {
  
  return source_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceAddRequest::release_source_name() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.source_name)
  return source_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceAddRequest::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.source_name)
}
inline std::string* SourceAddRequest::unsafe_arena_release_source_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceAddRequest.source_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceAddRequest::unsafe_arena_set_allocated_source_name(
    std::string* source_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceAddRequest.source_name)
}

// string source_type = 4;
inline void SourceAddRequest::clear_source_type() {
  source_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceAddRequest::source_type() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.source_type)
  return _internal_source_type();
}
inline void SourceAddRequest::set_source_type(const std::string& value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.source_type)
}
inline std::string* SourceAddRequest::mutable_source_type() {
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.source_type)
  return _internal_mutable_source_type();
}
inline const std::string& SourceAddRequest::_internal_source_type() const {
  return source_type_.Get();
}
inline void SourceAddRequest::_internal_set_source_type(const std::string& value) {
  
  source_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceAddRequest::set_source_type(std::string&& value) {
  
  source_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.source_type)
}
inline void SourceAddRequest::set_source_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.source_type)
}
inline void SourceAddRequest::set_source_type(const char* value,
    size_t size) {
  
  source_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.source_type)
}
inline std::string* SourceAddRequest::_internal_mutable_source_type() {
  
  return source_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceAddRequest::release_source_type() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.source_type)
  return source_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceAddRequest::set_allocated_source_type(std::string* source_type) {
  if (source_type != nullptr) {
    
  } else {
    
  }
  source_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.source_type)
}
inline std::string* SourceAddRequest::unsafe_arena_release_source_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceAddRequest.source_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceAddRequest::unsafe_arena_set_allocated_source_type(
    std::string* source_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_type != nullptr) {
    
  } else {
    
  }
  source_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceAddRequest.source_type)
}

// string source_url = 5;
inline void SourceAddRequest::clear_source_url() {
  source_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceAddRequest::source_url() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddRequest.source_url)
  return _internal_source_url();
}
inline void SourceAddRequest::set_source_url(const std::string& value) {
  _internal_set_source_url(value);
  // @@protoc_insertion_point(field_set:proto.SourceAddRequest.source_url)
}
inline std::string* SourceAddRequest::mutable_source_url() {
  // @@protoc_insertion_point(field_mutable:proto.SourceAddRequest.source_url)
  return _internal_mutable_source_url();
}
inline const std::string& SourceAddRequest::_internal_source_url() const {
  return source_url_.Get();
}
inline void SourceAddRequest::_internal_set_source_url(const std::string& value) {
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceAddRequest::set_source_url(std::string&& value) {
  
  source_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceAddRequest.source_url)
}
inline void SourceAddRequest::set_source_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceAddRequest.source_url)
}
inline void SourceAddRequest::set_source_url(const char* value,
    size_t size) {
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceAddRequest.source_url)
}
inline std::string* SourceAddRequest::_internal_mutable_source_url() {
  
  return source_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceAddRequest::release_source_url() {
  // @@protoc_insertion_point(field_release:proto.SourceAddRequest.source_url)
  return source_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceAddRequest::set_allocated_source_url(std::string* source_url) {
  if (source_url != nullptr) {
    
  } else {
    
  }
  source_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddRequest.source_url)
}
inline std::string* SourceAddRequest::unsafe_arena_release_source_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceAddRequest.source_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceAddRequest::unsafe_arena_set_allocated_source_url(
    std::string* source_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_url != nullptr) {
    
  } else {
    
  }
  source_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceAddRequest.source_url)
}

// -------------------------------------------------------------------

// SourceDuplicateRequest

// string show_id = 1;
inline void SourceDuplicateRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceDuplicateRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateRequest.show_id)
  return _internal_show_id();
}
inline void SourceDuplicateRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceDuplicateRequest.show_id)
}
inline std::string* SourceDuplicateRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SourceDuplicateRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SourceDuplicateRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceDuplicateRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceDuplicateRequest.show_id)
}
inline void SourceDuplicateRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceDuplicateRequest.show_id)
}
inline void SourceDuplicateRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceDuplicateRequest.show_id)
}
inline std::string* SourceDuplicateRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceDuplicateRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceDuplicateRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateRequest.show_id)
}
inline std::string* SourceDuplicateRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceDuplicateRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceDuplicateRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceDuplicateRequest.show_id)
}

// string scene_id = 2;
inline void SourceDuplicateRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceDuplicateRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateRequest.scene_id)
  return _internal_scene_id();
}
inline void SourceDuplicateRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceDuplicateRequest.scene_id)
}
inline std::string* SourceDuplicateRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SourceDuplicateRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SourceDuplicateRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceDuplicateRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceDuplicateRequest.scene_id)
}
inline void SourceDuplicateRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceDuplicateRequest.scene_id)
}
inline void SourceDuplicateRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceDuplicateRequest.scene_id)
}
inline std::string* SourceDuplicateRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceDuplicateRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceDuplicateRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateRequest.scene_id)
}
inline std::string* SourceDuplicateRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceDuplicateRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceDuplicateRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceDuplicateRequest.scene_id)
}

// string source_id = 3;
inline void SourceDuplicateRequest::clear_source_id() {
  source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceDuplicateRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateRequest.source_id)
  return _internal_source_id();
}
inline void SourceDuplicateRequest::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceDuplicateRequest.source_id)
}
inline std::string* SourceDuplicateRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateRequest.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& SourceDuplicateRequest::_internal_source_id() const {
  return source_id_.Get();
}
inline void SourceDuplicateRequest::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceDuplicateRequest::set_source_id(std::string&& value) {
  
  source_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceDuplicateRequest.source_id)
}
inline void SourceDuplicateRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceDuplicateRequest.source_id)
}
inline void SourceDuplicateRequest::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceDuplicateRequest.source_id)
}
inline std::string* SourceDuplicateRequest::_internal_mutable_source_id() {
  
  return source_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceDuplicateRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateRequest.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceDuplicateRequest::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateRequest.source_id)
}
inline std::string* SourceDuplicateRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceDuplicateRequest.source_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceDuplicateRequest::unsafe_arena_set_allocated_source_id(
    std::string* source_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceDuplicateRequest.source_id)
}

// -------------------------------------------------------------------

// SourceRemoveRequest

// string show_id = 1;
inline void SourceRemoveRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceRemoveRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceRemoveRequest.show_id)
  return _internal_show_id();
}
inline void SourceRemoveRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceRemoveRequest.show_id)
}
inline std::string* SourceRemoveRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceRemoveRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SourceRemoveRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SourceRemoveRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceRemoveRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceRemoveRequest.show_id)
}
inline void SourceRemoveRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceRemoveRequest.show_id)
}
inline void SourceRemoveRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceRemoveRequest.show_id)
}
inline std::string* SourceRemoveRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceRemoveRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceRemoveRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceRemoveRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceRemoveRequest.show_id)
}
inline std::string* SourceRemoveRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceRemoveRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceRemoveRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceRemoveRequest.show_id)
}

// string scene_id = 2;
inline void SourceRemoveRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceRemoveRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceRemoveRequest.scene_id)
  return _internal_scene_id();
}
inline void SourceRemoveRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceRemoveRequest.scene_id)
}
inline std::string* SourceRemoveRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceRemoveRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SourceRemoveRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SourceRemoveRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceRemoveRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceRemoveRequest.scene_id)
}
inline void SourceRemoveRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceRemoveRequest.scene_id)
}
inline void SourceRemoveRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceRemoveRequest.scene_id)
}
inline std::string* SourceRemoveRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceRemoveRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceRemoveRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceRemoveRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceRemoveRequest.scene_id)
}
inline std::string* SourceRemoveRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceRemoveRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceRemoveRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceRemoveRequest.scene_id)
}

// string source_id = 3;
inline void SourceRemoveRequest::clear_source_id() {
  source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceRemoveRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceRemoveRequest.source_id)
  return _internal_source_id();
}
inline void SourceRemoveRequest::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceRemoveRequest.source_id)
}
inline std::string* SourceRemoveRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceRemoveRequest.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& SourceRemoveRequest::_internal_source_id() const {
  return source_id_.Get();
}
inline void SourceRemoveRequest::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceRemoveRequest::set_source_id(std::string&& value) {
  
  source_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceRemoveRequest.source_id)
}
inline void SourceRemoveRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceRemoveRequest.source_id)
}
inline void SourceRemoveRequest::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceRemoveRequest.source_id)
}
inline std::string* SourceRemoveRequest::_internal_mutable_source_id() {
  
  return source_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceRemoveRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceRemoveRequest.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceRemoveRequest::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceRemoveRequest.source_id)
}
inline std::string* SourceRemoveRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceRemoveRequest.source_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceRemoveRequest::unsafe_arena_set_allocated_source_id(
    std::string* source_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceRemoveRequest.source_id)
}

// -------------------------------------------------------------------

// SourceSetPropertiesRequest

// string show_id = 1;
inline void SourceSetPropertiesRequest::clear_show_id() {
  show_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceSetPropertiesRequest::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.show_id)
  return _internal_show_id();
}
inline void SourceSetPropertiesRequest::set_show_id(const std::string& value) {
  _internal_set_show_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.show_id)
}
inline std::string* SourceSetPropertiesRequest::mutable_show_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.show_id)
  return _internal_mutable_show_id();
}
inline const std::string& SourceSetPropertiesRequest::_internal_show_id() const {
  return show_id_.Get();
}
inline void SourceSetPropertiesRequest::_internal_set_show_id(const std::string& value) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceSetPropertiesRequest::set_show_id(std::string&& value) {
  
  show_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.show_id)
}
inline void SourceSetPropertiesRequest::set_show_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.show_id)
}
inline void SourceSetPropertiesRequest::set_show_id(const char* value,
    size_t size) {
  
  show_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.show_id)
}
inline std::string* SourceSetPropertiesRequest::_internal_mutable_show_id() {
  
  return show_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceSetPropertiesRequest::release_show_id() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.show_id)
  return show_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceSetPropertiesRequest::set_allocated_show_id(std::string* show_id) {
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), show_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.show_id)
}
inline std::string* SourceSetPropertiesRequest::unsafe_arena_release_show_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceSetPropertiesRequest.show_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return show_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceSetPropertiesRequest::unsafe_arena_set_allocated_show_id(
    std::string* show_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (show_id != nullptr) {
    
  } else {
    
  }
  show_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      show_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceSetPropertiesRequest.show_id)
}

// string scene_id = 2;
inline void SourceSetPropertiesRequest::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceSetPropertiesRequest::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.scene_id)
  return _internal_scene_id();
}
inline void SourceSetPropertiesRequest::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.scene_id)
}
inline std::string* SourceSetPropertiesRequest::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SourceSetPropertiesRequest::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SourceSetPropertiesRequest::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceSetPropertiesRequest::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.scene_id)
}
inline void SourceSetPropertiesRequest::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.scene_id)
}
inline void SourceSetPropertiesRequest::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.scene_id)
}
inline std::string* SourceSetPropertiesRequest::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceSetPropertiesRequest::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceSetPropertiesRequest::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.scene_id)
}
inline std::string* SourceSetPropertiesRequest::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceSetPropertiesRequest.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceSetPropertiesRequest::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceSetPropertiesRequest.scene_id)
}

// string source_id = 3;
inline void SourceSetPropertiesRequest::clear_source_id() {
  source_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceSetPropertiesRequest::source_id() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.source_id)
  return _internal_source_id();
}
inline void SourceSetPropertiesRequest::set_source_id(const std::string& value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.source_id)
}
inline std::string* SourceSetPropertiesRequest::mutable_source_id() {
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.source_id)
  return _internal_mutable_source_id();
}
inline const std::string& SourceSetPropertiesRequest::_internal_source_id() const {
  return source_id_.Get();
}
inline void SourceSetPropertiesRequest::_internal_set_source_id(const std::string& value) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceSetPropertiesRequest::set_source_id(std::string&& value) {
  
  source_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.source_id)
}
inline void SourceSetPropertiesRequest::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.source_id)
}
inline void SourceSetPropertiesRequest::set_source_id(const char* value,
    size_t size) {
  
  source_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.source_id)
}
inline std::string* SourceSetPropertiesRequest::_internal_mutable_source_id() {
  
  return source_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceSetPropertiesRequest::release_source_id() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.source_id)
  return source_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceSetPropertiesRequest::set_allocated_source_id(std::string* source_id) {
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.source_id)
}
inline std::string* SourceSetPropertiesRequest::unsafe_arena_release_source_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceSetPropertiesRequest.source_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceSetPropertiesRequest::unsafe_arena_set_allocated_source_id(
    std::string* source_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_id != nullptr) {
    
  } else {
    
  }
  source_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceSetPropertiesRequest.source_id)
}

// string source_type = 4;
inline void SourceSetPropertiesRequest::clear_source_type() {
  source_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceSetPropertiesRequest::source_type() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.source_type)
  return _internal_source_type();
}
inline void SourceSetPropertiesRequest::set_source_type(const std::string& value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.source_type)
}
inline std::string* SourceSetPropertiesRequest::mutable_source_type() {
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.source_type)
  return _internal_mutable_source_type();
}
inline const std::string& SourceSetPropertiesRequest::_internal_source_type() const {
  return source_type_.Get();
}
inline void SourceSetPropertiesRequest::_internal_set_source_type(const std::string& value) {
  
  source_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceSetPropertiesRequest::set_source_type(std::string&& value) {
  
  source_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.source_type)
}
inline void SourceSetPropertiesRequest::set_source_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.source_type)
}
inline void SourceSetPropertiesRequest::set_source_type(const char* value,
    size_t size) {
  
  source_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.source_type)
}
inline std::string* SourceSetPropertiesRequest::_internal_mutable_source_type() {
  
  return source_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceSetPropertiesRequest::release_source_type() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.source_type)
  return source_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceSetPropertiesRequest::set_allocated_source_type(std::string* source_type) {
  if (source_type != nullptr) {
    
  } else {
    
  }
  source_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.source_type)
}
inline std::string* SourceSetPropertiesRequest::unsafe_arena_release_source_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceSetPropertiesRequest.source_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceSetPropertiesRequest::unsafe_arena_set_allocated_source_type(
    std::string* source_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_type != nullptr) {
    
  } else {
    
  }
  source_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceSetPropertiesRequest.source_type)
}

// string source_url = 5;
inline void SourceSetPropertiesRequest::clear_source_url() {
  source_url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SourceSetPropertiesRequest::source_url() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesRequest.source_url)
  return _internal_source_url();
}
inline void SourceSetPropertiesRequest::set_source_url(const std::string& value) {
  _internal_set_source_url(value);
  // @@protoc_insertion_point(field_set:proto.SourceSetPropertiesRequest.source_url)
}
inline std::string* SourceSetPropertiesRequest::mutable_source_url() {
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesRequest.source_url)
  return _internal_mutable_source_url();
}
inline const std::string& SourceSetPropertiesRequest::_internal_source_url() const {
  return source_url_.Get();
}
inline void SourceSetPropertiesRequest::_internal_set_source_url(const std::string& value) {
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SourceSetPropertiesRequest::set_source_url(std::string&& value) {
  
  source_url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SourceSetPropertiesRequest.source_url)
}
inline void SourceSetPropertiesRequest::set_source_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SourceSetPropertiesRequest.source_url)
}
inline void SourceSetPropertiesRequest::set_source_url(const char* value,
    size_t size) {
  
  source_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SourceSetPropertiesRequest.source_url)
}
inline std::string* SourceSetPropertiesRequest::_internal_mutable_source_url() {
  
  return source_url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SourceSetPropertiesRequest::release_source_url() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesRequest.source_url)
  return source_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SourceSetPropertiesRequest::set_allocated_source_url(std::string* source_url) {
  if (source_url != nullptr) {
    
  } else {
    
  }
  source_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesRequest.source_url)
}
inline std::string* SourceSetPropertiesRequest::unsafe_arena_release_source_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SourceSetPropertiesRequest.source_url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return source_url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SourceSetPropertiesRequest::unsafe_arena_set_allocated_source_url(
    std::string* source_url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source_url != nullptr) {
    
  } else {
    
  }
  source_url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceSetPropertiesRequest.source_url)
}

// -------------------------------------------------------------------

// StudioGetResponse

// .proto.StudioState studio = 1;
inline bool StudioGetResponse::_internal_has_studio() const {
  return this != internal_default_instance() && studio_ != nullptr;
}
inline bool StudioGetResponse::has_studio() const {
  return _internal_has_studio();
}
inline void StudioGetResponse::clear_studio() {
  if (GetArena() == nullptr && studio_ != nullptr) {
    delete studio_;
  }
  studio_ = nullptr;
}
inline const ::proto::StudioState& StudioGetResponse::_internal_studio() const {
  const ::proto::StudioState* p = studio_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::StudioState*>(
      &::proto::_StudioState_default_instance_);
}
inline const ::proto::StudioState& StudioGetResponse::studio() const {
  // @@protoc_insertion_point(field_get:proto.StudioGetResponse.studio)
  return _internal_studio();
}
inline void StudioGetResponse::unsafe_arena_set_allocated_studio(
    ::proto::StudioState* studio) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(studio_);
  }
  studio_ = studio;
  if (studio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.StudioGetResponse.studio)
}
inline ::proto::StudioState* StudioGetResponse::release_studio() {
  auto temp = unsafe_arena_release_studio();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::StudioState* StudioGetResponse::unsafe_arena_release_studio() {
  // @@protoc_insertion_point(field_release:proto.StudioGetResponse.studio)
  
  ::proto::StudioState* temp = studio_;
  studio_ = nullptr;
  return temp;
}
inline ::proto::StudioState* StudioGetResponse::_internal_mutable_studio() {
  
  if (studio_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::StudioState>(GetArena());
    studio_ = p;
  }
  return studio_;
}
inline ::proto::StudioState* StudioGetResponse::mutable_studio() {
  // @@protoc_insertion_point(field_mutable:proto.StudioGetResponse.studio)
  return _internal_mutable_studio();
}
inline void StudioGetResponse::set_allocated_studio(::proto::StudioState* studio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete studio_;
  }
  if (studio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(studio);
    if (message_arena != submessage_arena) {
      studio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, studio, submessage_arena);
    }
    
  } else {
    
  }
  studio_ = studio;
  // @@protoc_insertion_point(field_set_allocated:proto.StudioGetResponse.studio)
}

// -------------------------------------------------------------------

// ShowGetResponse

// .proto.Show show = 1;
inline bool ShowGetResponse::_internal_has_show() const {
  return this != internal_default_instance() && show_ != nullptr;
}
inline bool ShowGetResponse::has_show() const {
  return _internal_has_show();
}
inline void ShowGetResponse::clear_show() {
  if (GetArena() == nullptr && show_ != nullptr) {
    delete show_;
  }
  show_ = nullptr;
}
inline const ::proto::Show& ShowGetResponse::_internal_show() const {
  const ::proto::Show* p = show_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline const ::proto::Show& ShowGetResponse::show() const {
  // @@protoc_insertion_point(field_get:proto.ShowGetResponse.show)
  return _internal_show();
}
inline void ShowGetResponse::unsafe_arena_set_allocated_show(
    ::proto::Show* show) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowGetResponse.show)
}
inline ::proto::Show* ShowGetResponse::release_show() {
  auto temp = unsafe_arena_release_show();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Show* ShowGetResponse::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowGetResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::proto::Show* ShowGetResponse::_internal_mutable_show() {
  
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArena());
    show_ = p;
  }
  return show_;
}
inline ::proto::Show* ShowGetResponse::mutable_show() {
  // @@protoc_insertion_point(field_mutable:proto.ShowGetResponse.show)
  return _internal_mutable_show();
}
inline void ShowGetResponse::set_allocated_show(::proto::Show* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_;
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show);
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowGetResponse.show)
}

// -------------------------------------------------------------------

// ShowCreateResponse

// .proto.Show show = 1;
inline bool ShowCreateResponse::_internal_has_show() const {
  return this != internal_default_instance() && show_ != nullptr;
}
inline bool ShowCreateResponse::has_show() const {
  return _internal_has_show();
}
inline void ShowCreateResponse::clear_show() {
  if (GetArena() == nullptr && show_ != nullptr) {
    delete show_;
  }
  show_ = nullptr;
}
inline const ::proto::Show& ShowCreateResponse::_internal_show() const {
  const ::proto::Show* p = show_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline const ::proto::Show& ShowCreateResponse::show() const {
  // @@protoc_insertion_point(field_get:proto.ShowCreateResponse.show)
  return _internal_show();
}
inline void ShowCreateResponse::unsafe_arena_set_allocated_show(
    ::proto::Show* show) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowCreateResponse.show)
}
inline ::proto::Show* ShowCreateResponse::release_show() {
  auto temp = unsafe_arena_release_show();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Show* ShowCreateResponse::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowCreateResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::proto::Show* ShowCreateResponse::_internal_mutable_show() {
  
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArena());
    show_ = p;
  }
  return show_;
}
inline ::proto::Show* ShowCreateResponse::mutable_show() {
  // @@protoc_insertion_point(field_mutable:proto.ShowCreateResponse.show)
  return _internal_mutable_show();
}
inline void ShowCreateResponse::set_allocated_show(::proto::Show* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_;
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show);
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowCreateResponse.show)
}

// -------------------------------------------------------------------

// ShowDuplicateResponse

// .proto.Show show = 1;
inline bool ShowDuplicateResponse::_internal_has_show() const {
  return this != internal_default_instance() && show_ != nullptr;
}
inline bool ShowDuplicateResponse::has_show() const {
  return _internal_has_show();
}
inline void ShowDuplicateResponse::clear_show() {
  if (GetArena() == nullptr && show_ != nullptr) {
    delete show_;
  }
  show_ = nullptr;
}
inline const ::proto::Show& ShowDuplicateResponse::_internal_show() const {
  const ::proto::Show* p = show_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline const ::proto::Show& ShowDuplicateResponse::show() const {
  // @@protoc_insertion_point(field_get:proto.ShowDuplicateResponse.show)
  return _internal_show();
}
inline void ShowDuplicateResponse::unsafe_arena_set_allocated_show(
    ::proto::Show* show) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowDuplicateResponse.show)
}
inline ::proto::Show* ShowDuplicateResponse::release_show() {
  auto temp = unsafe_arena_release_show();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Show* ShowDuplicateResponse::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowDuplicateResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::proto::Show* ShowDuplicateResponse::_internal_mutable_show() {
  
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArena());
    show_ = p;
  }
  return show_;
}
inline ::proto::Show* ShowDuplicateResponse::mutable_show() {
  // @@protoc_insertion_point(field_mutable:proto.ShowDuplicateResponse.show)
  return _internal_mutable_show();
}
inline void ShowDuplicateResponse::set_allocated_show(::proto::Show* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_;
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show);
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowDuplicateResponse.show)
}

// -------------------------------------------------------------------

// ShowLoadResponse

// .proto.Show show = 1;
inline bool ShowLoadResponse::_internal_has_show() const {
  return this != internal_default_instance() && show_ != nullptr;
}
inline bool ShowLoadResponse::has_show() const {
  return _internal_has_show();
}
inline void ShowLoadResponse::clear_show() {
  if (GetArena() == nullptr && show_ != nullptr) {
    delete show_;
  }
  show_ = nullptr;
}
inline const ::proto::Show& ShowLoadResponse::_internal_show() const {
  const ::proto::Show* p = show_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline const ::proto::Show& ShowLoadResponse::show() const {
  // @@protoc_insertion_point(field_get:proto.ShowLoadResponse.show)
  return _internal_show();
}
inline void ShowLoadResponse::unsafe_arena_set_allocated_show(
    ::proto::Show* show) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowLoadResponse.show)
}
inline ::proto::Show* ShowLoadResponse::release_show() {
  auto temp = unsafe_arena_release_show();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Show* ShowLoadResponse::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowLoadResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::proto::Show* ShowLoadResponse::_internal_mutable_show() {
  
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArena());
    show_ = p;
  }
  return show_;
}
inline ::proto::Show* ShowLoadResponse::mutable_show() {
  // @@protoc_insertion_point(field_mutable:proto.ShowLoadResponse.show)
  return _internal_mutable_show();
}
inline void ShowLoadResponse::set_allocated_show(::proto::Show* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_;
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show);
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowLoadResponse.show)
}

// -------------------------------------------------------------------

// ShowSwitchSourceResponse

// .proto.Show show = 1;
inline bool ShowSwitchSourceResponse::_internal_has_show() const {
  return this != internal_default_instance() && show_ != nullptr;
}
inline bool ShowSwitchSourceResponse::has_show() const {
  return _internal_has_show();
}
inline void ShowSwitchSourceResponse::clear_show() {
  if (GetArena() == nullptr && show_ != nullptr) {
    delete show_;
  }
  show_ = nullptr;
}
inline const ::proto::Show& ShowSwitchSourceResponse::_internal_show() const {
  const ::proto::Show* p = show_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline const ::proto::Show& ShowSwitchSourceResponse::show() const {
  // @@protoc_insertion_point(field_get:proto.ShowSwitchSourceResponse.show)
  return _internal_show();
}
inline void ShowSwitchSourceResponse::unsafe_arena_set_allocated_show(
    ::proto::Show* show) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ShowSwitchSourceResponse.show)
}
inline ::proto::Show* ShowSwitchSourceResponse::release_show() {
  auto temp = unsafe_arena_release_show();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Show* ShowSwitchSourceResponse::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:proto.ShowSwitchSourceResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::proto::Show* ShowSwitchSourceResponse::_internal_mutable_show() {
  
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArena());
    show_ = p;
  }
  return show_;
}
inline ::proto::Show* ShowSwitchSourceResponse::mutable_show() {
  // @@protoc_insertion_point(field_mutable:proto.ShowSwitchSourceResponse.show)
  return _internal_mutable_show();
}
inline void ShowSwitchSourceResponse::set_allocated_show(::proto::Show* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_;
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show);
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.ShowSwitchSourceResponse.show)
}

// -------------------------------------------------------------------

// SceneGetResponse

// .proto.Scene scene = 1;
inline bool SceneGetResponse::_internal_has_scene() const {
  return this != internal_default_instance() && scene_ != nullptr;
}
inline bool SceneGetResponse::has_scene() const {
  return _internal_has_scene();
}
inline void SceneGetResponse::clear_scene() {
  if (GetArena() == nullptr && scene_ != nullptr) {
    delete scene_;
  }
  scene_ = nullptr;
}
inline const ::proto::Scene& SceneGetResponse::_internal_scene() const {
  const ::proto::Scene* p = scene_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Scene*>(
      &::proto::_Scene_default_instance_);
}
inline const ::proto::Scene& SceneGetResponse::scene() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetResponse.scene)
  return _internal_scene();
}
inline void SceneGetResponse::unsafe_arena_set_allocated_scene(
    ::proto::Scene* scene) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_);
  }
  scene_ = scene;
  if (scene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneGetResponse.scene)
}
inline ::proto::Scene* SceneGetResponse::release_scene() {
  auto temp = unsafe_arena_release_scene();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Scene* SceneGetResponse::unsafe_arena_release_scene() {
  // @@protoc_insertion_point(field_release:proto.SceneGetResponse.scene)
  
  ::proto::Scene* temp = scene_;
  scene_ = nullptr;
  return temp;
}
inline ::proto::Scene* SceneGetResponse::_internal_mutable_scene() {
  
  if (scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Scene>(GetArena());
    scene_ = p;
  }
  return scene_;
}
inline ::proto::Scene* SceneGetResponse::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:proto.SceneGetResponse.scene)
  return _internal_mutable_scene();
}
inline void SceneGetResponse::set_allocated_scene(::proto::Scene* scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scene_;
  }
  if (scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scene);
    if (message_arena != submessage_arena) {
      scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetResponse.scene)
}

// -------------------------------------------------------------------

// SceneAddResponse

// .proto.Scene scene = 1;
inline bool SceneAddResponse::_internal_has_scene() const {
  return this != internal_default_instance() && scene_ != nullptr;
}
inline bool SceneAddResponse::has_scene() const {
  return _internal_has_scene();
}
inline void SceneAddResponse::clear_scene() {
  if (GetArena() == nullptr && scene_ != nullptr) {
    delete scene_;
  }
  scene_ = nullptr;
}
inline const ::proto::Scene& SceneAddResponse::_internal_scene() const {
  const ::proto::Scene* p = scene_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Scene*>(
      &::proto::_Scene_default_instance_);
}
inline const ::proto::Scene& SceneAddResponse::scene() const {
  // @@protoc_insertion_point(field_get:proto.SceneAddResponse.scene)
  return _internal_scene();
}
inline void SceneAddResponse::unsafe_arena_set_allocated_scene(
    ::proto::Scene* scene) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_);
  }
  scene_ = scene;
  if (scene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneAddResponse.scene)
}
inline ::proto::Scene* SceneAddResponse::release_scene() {
  auto temp = unsafe_arena_release_scene();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Scene* SceneAddResponse::unsafe_arena_release_scene() {
  // @@protoc_insertion_point(field_release:proto.SceneAddResponse.scene)
  
  ::proto::Scene* temp = scene_;
  scene_ = nullptr;
  return temp;
}
inline ::proto::Scene* SceneAddResponse::_internal_mutable_scene() {
  
  if (scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Scene>(GetArena());
    scene_ = p;
  }
  return scene_;
}
inline ::proto::Scene* SceneAddResponse::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:proto.SceneAddResponse.scene)
  return _internal_mutable_scene();
}
inline void SceneAddResponse::set_allocated_scene(::proto::Scene* scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scene_;
  }
  if (scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scene);
    if (message_arena != submessage_arena) {
      scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneAddResponse.scene)
}

// -------------------------------------------------------------------

// SceneDuplicateResponse

// .proto.Scene scene = 1;
inline bool SceneDuplicateResponse::_internal_has_scene() const {
  return this != internal_default_instance() && scene_ != nullptr;
}
inline bool SceneDuplicateResponse::has_scene() const {
  return _internal_has_scene();
}
inline void SceneDuplicateResponse::clear_scene() {
  if (GetArena() == nullptr && scene_ != nullptr) {
    delete scene_;
  }
  scene_ = nullptr;
}
inline const ::proto::Scene& SceneDuplicateResponse::_internal_scene() const {
  const ::proto::Scene* p = scene_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Scene*>(
      &::proto::_Scene_default_instance_);
}
inline const ::proto::Scene& SceneDuplicateResponse::scene() const {
  // @@protoc_insertion_point(field_get:proto.SceneDuplicateResponse.scene)
  return _internal_scene();
}
inline void SceneDuplicateResponse::unsafe_arena_set_allocated_scene(
    ::proto::Scene* scene) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scene_);
  }
  scene_ = scene;
  if (scene) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneDuplicateResponse.scene)
}
inline ::proto::Scene* SceneDuplicateResponse::release_scene() {
  auto temp = unsafe_arena_release_scene();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Scene* SceneDuplicateResponse::unsafe_arena_release_scene() {
  // @@protoc_insertion_point(field_release:proto.SceneDuplicateResponse.scene)
  
  ::proto::Scene* temp = scene_;
  scene_ = nullptr;
  return temp;
}
inline ::proto::Scene* SceneDuplicateResponse::_internal_mutable_scene() {
  
  if (scene_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Scene>(GetArena());
    scene_ = p;
  }
  return scene_;
}
inline ::proto::Scene* SceneDuplicateResponse::mutable_scene() {
  // @@protoc_insertion_point(field_mutable:proto.SceneDuplicateResponse.scene)
  return _internal_mutable_scene();
}
inline void SceneDuplicateResponse::set_allocated_scene(::proto::Scene* scene) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scene_;
  }
  if (scene) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scene);
    if (message_arena != submessage_arena) {
      scene = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scene, submessage_arena);
    }
    
  } else {
    
  }
  scene_ = scene;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneDuplicateResponse.scene)
}

// -------------------------------------------------------------------

// SceneSetAsCurrentResponse

// .proto.Show show = 1;
inline bool SceneSetAsCurrentResponse::_internal_has_show() const {
  return this != internal_default_instance() && show_ != nullptr;
}
inline bool SceneSetAsCurrentResponse::has_show() const {
  return _internal_has_show();
}
inline void SceneSetAsCurrentResponse::clear_show() {
  if (GetArena() == nullptr && show_ != nullptr) {
    delete show_;
  }
  show_ = nullptr;
}
inline const ::proto::Show& SceneSetAsCurrentResponse::_internal_show() const {
  const ::proto::Show* p = show_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Show*>(
      &::proto::_Show_default_instance_);
}
inline const ::proto::Show& SceneSetAsCurrentResponse::show() const {
  // @@protoc_insertion_point(field_get:proto.SceneSetAsCurrentResponse.show)
  return _internal_show();
}
inline void SceneSetAsCurrentResponse::unsafe_arena_set_allocated_show(
    ::proto::Show* show) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(show_);
  }
  show_ = show;
  if (show) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneSetAsCurrentResponse.show)
}
inline ::proto::Show* SceneSetAsCurrentResponse::release_show() {
  auto temp = unsafe_arena_release_show();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Show* SceneSetAsCurrentResponse::unsafe_arena_release_show() {
  // @@protoc_insertion_point(field_release:proto.SceneSetAsCurrentResponse.show)
  
  ::proto::Show* temp = show_;
  show_ = nullptr;
  return temp;
}
inline ::proto::Show* SceneSetAsCurrentResponse::_internal_mutable_show() {
  
  if (show_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Show>(GetArena());
    show_ = p;
  }
  return show_;
}
inline ::proto::Show* SceneSetAsCurrentResponse::mutable_show() {
  // @@protoc_insertion_point(field_mutable:proto.SceneSetAsCurrentResponse.show)
  return _internal_mutable_show();
}
inline void SceneSetAsCurrentResponse::set_allocated_show(::proto::Show* show) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete show_;
  }
  if (show) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(show);
    if (message_arena != submessage_arena) {
      show = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, show, submessage_arena);
    }
    
  } else {
    
  }
  show_ = show;
  // @@protoc_insertion_point(field_set_allocated:proto.SceneSetAsCurrentResponse.show)
}

// -------------------------------------------------------------------

// SceneGetCurrentResponse

// string scene_id = 2;
inline void SceneGetCurrentResponse::clear_scene_id() {
  scene_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SceneGetCurrentResponse::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGetCurrentResponse.scene_id)
  return _internal_scene_id();
}
inline void SceneGetCurrentResponse::set_scene_id(const std::string& value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:proto.SceneGetCurrentResponse.scene_id)
}
inline std::string* SceneGetCurrentResponse::mutable_scene_id() {
  // @@protoc_insertion_point(field_mutable:proto.SceneGetCurrentResponse.scene_id)
  return _internal_mutable_scene_id();
}
inline const std::string& SceneGetCurrentResponse::_internal_scene_id() const {
  return scene_id_.Get();
}
inline void SceneGetCurrentResponse::_internal_set_scene_id(const std::string& value) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SceneGetCurrentResponse::set_scene_id(std::string&& value) {
  
  scene_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGetCurrentResponse.scene_id)
}
inline void SceneGetCurrentResponse::set_scene_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:proto.SceneGetCurrentResponse.scene_id)
}
inline void SceneGetCurrentResponse::set_scene_id(const char* value,
    size_t size) {
  
  scene_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGetCurrentResponse.scene_id)
}
inline std::string* SceneGetCurrentResponse::_internal_mutable_scene_id() {
  
  return scene_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SceneGetCurrentResponse::release_scene_id() {
  // @@protoc_insertion_point(field_release:proto.SceneGetCurrentResponse.scene_id)
  return scene_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SceneGetCurrentResponse::set_allocated_scene_id(std::string* scene_id) {
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGetCurrentResponse.scene_id)
}
inline std::string* SceneGetCurrentResponse::unsafe_arena_release_scene_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:proto.SceneGetCurrentResponse.scene_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return scene_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SceneGetCurrentResponse::unsafe_arena_set_allocated_scene_id(
    std::string* scene_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scene_id != nullptr) {
    
  } else {
    
  }
  scene_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scene_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SceneGetCurrentResponse.scene_id)
}

// -------------------------------------------------------------------

// SourceGetResponse

// .proto.Source source = 1;
inline bool SourceGetResponse::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool SourceGetResponse::has_source() const {
  return _internal_has_source();
}
inline void SourceGetResponse::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::proto::Source& SourceGetResponse::_internal_source() const {
  const ::proto::Source* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline const ::proto::Source& SourceGetResponse::source() const {
  // @@protoc_insertion_point(field_get:proto.SourceGetResponse.source)
  return _internal_source();
}
inline void SourceGetResponse::unsafe_arena_set_allocated_source(
    ::proto::Source* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceGetResponse.source)
}
inline ::proto::Source* SourceGetResponse::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Source* SourceGetResponse::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceGetResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::proto::Source* SourceGetResponse::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::proto::Source* SourceGetResponse::mutable_source() {
  // @@protoc_insertion_point(field_mutable:proto.SourceGetResponse.source)
  return _internal_mutable_source();
}
inline void SourceGetResponse::set_allocated_source(::proto::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceGetResponse.source)
}

// -------------------------------------------------------------------

// SourceAddResponse

// .proto.Source source = 1;
inline bool SourceAddResponse::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool SourceAddResponse::has_source() const {
  return _internal_has_source();
}
inline void SourceAddResponse::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::proto::Source& SourceAddResponse::_internal_source() const {
  const ::proto::Source* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline const ::proto::Source& SourceAddResponse::source() const {
  // @@protoc_insertion_point(field_get:proto.SourceAddResponse.source)
  return _internal_source();
}
inline void SourceAddResponse::unsafe_arena_set_allocated_source(
    ::proto::Source* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceAddResponse.source)
}
inline ::proto::Source* SourceAddResponse::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Source* SourceAddResponse::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceAddResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::proto::Source* SourceAddResponse::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::proto::Source* SourceAddResponse::mutable_source() {
  // @@protoc_insertion_point(field_mutable:proto.SourceAddResponse.source)
  return _internal_mutable_source();
}
inline void SourceAddResponse::set_allocated_source(::proto::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceAddResponse.source)
}

// -------------------------------------------------------------------

// SourceDuplicateResponse

// .proto.Source source = 1;
inline bool SourceDuplicateResponse::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool SourceDuplicateResponse::has_source() const {
  return _internal_has_source();
}
inline void SourceDuplicateResponse::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::proto::Source& SourceDuplicateResponse::_internal_source() const {
  const ::proto::Source* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline const ::proto::Source& SourceDuplicateResponse::source() const {
  // @@protoc_insertion_point(field_get:proto.SourceDuplicateResponse.source)
  return _internal_source();
}
inline void SourceDuplicateResponse::unsafe_arena_set_allocated_source(
    ::proto::Source* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceDuplicateResponse.source)
}
inline ::proto::Source* SourceDuplicateResponse::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Source* SourceDuplicateResponse::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceDuplicateResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::proto::Source* SourceDuplicateResponse::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::proto::Source* SourceDuplicateResponse::mutable_source() {
  // @@protoc_insertion_point(field_mutable:proto.SourceDuplicateResponse.source)
  return _internal_mutable_source();
}
inline void SourceDuplicateResponse::set_allocated_source(::proto::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceDuplicateResponse.source)
}

// -------------------------------------------------------------------

// SourceSetPropertiesResponse

// .proto.Source source = 1;
inline bool SourceSetPropertiesResponse::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool SourceSetPropertiesResponse::has_source() const {
  return _internal_has_source();
}
inline void SourceSetPropertiesResponse::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::proto::Source& SourceSetPropertiesResponse::_internal_source() const {
  const ::proto::Source* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::proto::Source*>(
      &::proto::_Source_default_instance_);
}
inline const ::proto::Source& SourceSetPropertiesResponse::source() const {
  // @@protoc_insertion_point(field_get:proto.SourceSetPropertiesResponse.source)
  return _internal_source();
}
inline void SourceSetPropertiesResponse::unsafe_arena_set_allocated_source(
    ::proto::Source* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.SourceSetPropertiesResponse.source)
}
inline ::proto::Source* SourceSetPropertiesResponse::release_source() {
  auto temp = unsafe_arena_release_source();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::proto::Source* SourceSetPropertiesResponse::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:proto.SourceSetPropertiesResponse.source)
  
  ::proto::Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::proto::Source* SourceSetPropertiesResponse::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::Source>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::proto::Source* SourceSetPropertiesResponse::mutable_source() {
  // @@protoc_insertion_point(field_mutable:proto.SourceSetPropertiesResponse.source)
  return _internal_mutable_source();
}
inline void SourceSetPropertiesResponse::set_allocated_source(::proto::Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:proto.SourceSetPropertiesResponse.source)
}

// -------------------------------------------------------------------

// HealthResponse

// int64 timestamp = 1;
inline void HealthResponse::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HealthResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HealthResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.HealthResponse.timestamp)
  return _internal_timestamp();
}
inline void HealthResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void HealthResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:proto.HealthResponse.timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_studio_2eproto
